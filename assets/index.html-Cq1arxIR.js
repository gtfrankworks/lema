import{a as n,c as l,b as i,o as s}from"./app-ZQgO6-gU.js";const e={};function t(r,a){return s(),l("div",null,a[0]||(a[0]=[i(`<h3 id="_1、并发编程三要素" tabindex="-1"><a class="header-anchor" href="#_1、并发编程三要素"><span><strong>1、并发编程三要素</strong></span></a></h3><p>并发编程的核心在于保证程序在多线程环境下执行的正确性和高效性。三要素分别是：</p><ol><li><strong>原子性（Atomicity）</strong><ul><li>定义：一个操作或一组操作要么全部完成，要么全部不执行，并且在执行过程中不被线程调度打断。</li><li>典型例子：自增操作 <code>i++</code> 并不是原子操作，因为它包含读取、计算和写入三步。需要使用 <code>synchronized</code>、<code>Lock</code> 或 <code>AtomicInteger</code> 来保证原子性。</li></ul></li><li><strong>可见性（Visibility）</strong><ul><li>定义：当一个线程修改共享变量时，其他线程能够立即看到这个修改。</li><li>实现方式： <ul><li><code>volatile</code> 关键字</li><li><code>synchronized</code>/<code>Lock</code>（锁释放前会刷新主内存）</li><li><code>final</code> 字段在构造完成后即可被其他线程安全读取</li></ul></li></ul></li><li><strong>有序性（Ordering）</strong><ul><li>定义：程序执行顺序遵循代码先后顺序，但在多线程环境中可能因为编译器优化、CPU 指令重排而出现“乱序执行”。</li><li>Java 保证： <ul><li><strong>happens-before 原则</strong></li><li><code>volatile</code> 修饰的变量禁止指令重排</li><li>synchronized 块保证进入前和退出后内存可见性</li></ul></li></ul></li></ol><hr><h3 id="_2、实现可见性的方法" tabindex="-1"><a class="header-anchor" href="#_2、实现可见性的方法"><span><strong>2、实现可见性的方法</strong></span></a></h3><ul><li><strong>synchronized / Lock</strong>： <ul><li>当线程获取锁时，保证读取的是主内存最新值；释放锁时，会将修改值刷新到主内存。</li><li>保证了多个线程对共享变量操作的可见性。</li></ul></li><li><strong>volatile</strong>： <ul><li>保证变量的修改会立即写回主内存，其他线程读取到的是最新值。</li><li>注意：volatile 不保证原子性，只保证可见性和禁止指令重排。</li></ul></li></ul><hr><h3 id="_3、多线程的价值" tabindex="-1"><a class="header-anchor" href="#_3、多线程的价值"><span><strong>3、多线程的价值</strong></span></a></h3><ol><li><strong>发挥多核 CPU 优势</strong><ul><li>多线程可在多个 CPU 核心上并行执行任务，提高 CPU 利用率。</li></ul></li><li><strong>防止阻塞</strong><ul><li>单线程遇到 I/O 或远程调用阻塞时，会导致整个程序停滞。</li><li>多线程可以让其它线程继续执行，从而提高程序响应性。</li></ul></li><li><strong>便于建模和分工</strong><ul><li>将大任务拆分为多个小任务（任务 B、C、D）分别处理，更清晰、更易管理。</li><li>适合复杂业务逻辑或异步任务处理。</li></ul></li></ol><hr><h3 id="_4、创建线程的方式" tabindex="-1"><a class="header-anchor" href="#_4、创建线程的方式"><span><strong>4、创建线程的方式</strong></span></a></h3><p>Java 提供了四种主流方式：</p><ol><li><strong>继承 Thread 类</strong></li><li><strong>实现 Runnable 接口</strong></li><li><strong>实现 Callable 接口 + Future</strong></li><li><strong>通过线程池（ExecutorService）创建</strong></li></ol><hr><h3 id="_5、创建线程方式的对比" tabindex="-1"><a class="header-anchor" href="#_5、创建线程方式的对比"><span><strong>5、创建线程方式的对比</strong></span></a></h3><table><thead><tr><th>方式</th><th>优势</th><th>劣势</th><th>适用场景</th></tr></thead><tbody><tr><td>继承 Thread</td><td>编写简单，可直接使用 <code>this</code> 访问当前线程</td><td>已继承 Thread 无法再继承其他类</td><td>简单场景，独立线程任务</td></tr><tr><td>实现 Runnable</td><td>线程与任务分离，可共享资源，可继承其他类</td><td>编程稍复杂，需要 Thread.currentThread()</td><td>多线程共享资源场景</td></tr><tr><td>实现 Callable</td><td>可返回值，可抛异常，可结合 Future 获取结果</td><td>与 Runnable 类似，需要配合线程池或 FutureTask</td><td>需要异步结果、异常处理的场景</td></tr></tbody></table><p><strong>Runnable vs Callable</strong>：</p><ul><li><code>run()</code> 无返回值，<code>call()</code> 有返回值</li><li><code>call()</code> 可抛异常</li><li><code>call()</code> 配合 <code>Future</code> 可获取异步结果</li></ul><hr><h3 id="_6、线程状态流转图" tabindex="-1"><a class="header-anchor" href="#_6、线程状态流转图"><span><strong>6、线程状态流转图</strong></span></a></h3><p>线程的生命周期和五种基本状态：</p><ol><li><strong>新建（New）</strong>：<code>Thread t = new Thread()</code></li><li><strong>就绪（Runnable）</strong>：调用 <code>t.start()</code> 后，线程准备就绪，等待 CPU 调度</li><li><strong>运行（Running）</strong>：线程获得 CPU 时间片，执行任务</li><li><strong>阻塞（Blocked）</strong>：线程暂时放弃 CPU，等待条件满足 <ul><li><strong>等待阻塞（Waiting）</strong>：执行 <code>wait()</code></li><li><strong>同步阻塞（Blocked）</strong>：等待锁</li><li><strong>其他阻塞（Timed Waiting）</strong>：执行 <code>sleep()</code>、<code>join()</code> 或 I/O 操作</li></ul></li><li><strong>死亡（Dead）</strong>：线程执行完任务或异常退出</li></ol><hr><h3 id="_7、java-线程五种状态" tabindex="-1"><a class="header-anchor" href="#_7、java-线程五种状态"><span><strong>7、Java 线程五种状态</strong></span></a></h3><ul><li><strong>新建（New）</strong>：线程对象创建，但未启动</li><li><strong>就绪（Runnable）</strong>：线程已准备好等待 CPU 调度</li><li><strong>运行（Running）</strong>：线程正在执行</li><li><strong>阻塞（Blocked）</strong>：线程等待某个条件或锁</li><li><strong>死亡（Dead）</strong>：线程完成或异常退出</li></ul><hr><h3 id="_8、什么是线程池" tabindex="-1"><a class="header-anchor" href="#_8、什么是线程池"><span><strong>8、什么是线程池？</strong></span></a></h3><ul><li><strong>定义</strong>：线程池是提前创建一定数量的线程，用于执行任务，执行完成后线程不销毁，而是等待下一个任务。</li><li><strong>优点</strong>： <ol><li>重用线程，减少创建销毁开销</li><li>控制最大并发线程数，避免资源竞争</li><li>提供定时任务、周期任务、单线程任务执行能力</li></ol></li></ul><hr><h3 id="_9、线程池的四种创建方式" tabindex="-1"><a class="header-anchor" href="#_9、线程池的四种创建方式"><span><strong>9、线程池的四种创建方式</strong></span></a></h3><ol><li><code>Executors.newCachedThreadPool()</code>：可缓存线程池，空闲线程复用</li><li><code>Executors.newFixedThreadPool(n)</code>：固定大小线程池，限制最大并发数</li><li><code>Executors.newScheduledThreadPool(n)</code>：支持定时/周期任务</li><li><code>Executors.newSingleThreadExecutor()</code>：单线程池，顺序执行任务</li></ol><hr><h3 id="_10、线程池的优点" tabindex="-1"><a class="header-anchor" href="#_10、线程池的优点"><span><strong>10、线程池的优点</strong></span></a></h3><ol><li><strong>线程复用</strong>：避免频繁创建销毁线程，节省资源</li><li><strong>控制并发</strong>：避免线程过多导致 CPU/内存资源竞争</li><li><strong>功能丰富</strong>：支持定时任务、周期任务、异步任务执行</li><li><strong>提高系统性能</strong>：合理配置线程池可大幅提升系统吞吐量</li></ol><h3 id="_11、常用的并发工具类有哪些" tabindex="-1"><a class="header-anchor" href="#_11、常用的并发工具类有哪些"><span>11、常用的并发工具类有哪些？</span></a></h3><ol><li><p><strong>CountDownLatch</strong></p><ul><li><p>功能：允许一个或多个线程等待其他线程完成操作后再继续执行。</p></li><li><p>使用场景：主线程等待多个子任务执行完再继续，例如初始化多个服务后再启动主服务。</p></li><li><p>示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>CountDownLatch latch = new CountDownLatch(3);</span></span>
<span class="line"><span>Runnable task = () -&gt; {</span></span>
<span class="line"><span>    System.out.println(Thread.currentThread().getName() + &quot; done&quot;);</span></span>
<span class="line"><span>    latch.countDown();</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>new Thread(task).start();</span></span>
<span class="line"><span>new Thread(task).start();</span></span>
<span class="line"><span>new Thread(task).start();</span></span>
<span class="line"><span>latch.await(); // 等待三个线程完成</span></span>
<span class="line"><span>System.out.println(&quot;All tasks completed&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>CyclicBarrier</strong></p><ul><li><p>功能：一组线程互相等待，直到所有线程都到达屏障点，再同时执行后续操作。</p></li><li><p>使用场景：模拟多线程并发处理阶段性任务，所有线程完成当前阶段才能进入下一阶段。</p></li><li><p>示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>CyclicBarrier barrier = new CyclicBarrier(3, () -&gt; System.out.println(&quot;All threads ready&quot;));</span></span>
<span class="line"><span>Runnable task = () -&gt; {</span></span>
<span class="line"><span>    System.out.println(Thread.currentThread().getName() + &quot; waiting&quot;);</span></span>
<span class="line"><span>    barrier.await(); // 阻塞直到所有线程调用 await()</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>new Thread(task).start();</span></span>
<span class="line"><span>new Thread(task).start();</span></span>
<span class="line"><span>new Thread(task).start();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>Semaphore</strong></p><ul><li><p>功能：控制同时访问某资源的线程数量，相当于一个计数器。</p></li><li><p>使用场景：限流、控制连接池并发访问。</p></li><li><p>示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Semaphore semaphore = new Semaphore(2); // 同时允许2个线程访问</span></span>
<span class="line"><span>Runnable task = () -&gt; {</span></span>
<span class="line"><span>    semaphore.acquire();</span></span>
<span class="line"><span>    try {</span></span>
<span class="line"><span>        System.out.println(Thread.currentThread().getName() + &quot; acquired&quot;);</span></span>
<span class="line"><span>    } finally {</span></span>
<span class="line"><span>        semaphore.release();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>Exchanger</strong></p><ul><li><p>功能：用于两个线程之间交换数据。</p></li><li><p>使用场景：生产者与消费者交换缓冲数据或中间计算结果。</p></li><li><p>示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Exchanger&lt;String&gt; exchanger = new Exchanger&lt;&gt;();</span></span>
<span class="line"><span>new Thread(() -&gt; {</span></span>
<span class="line"><span>    try {</span></span>
<span class="line"><span>        String data = exchanger.exchange(&quot;Data from Thread A&quot;);</span></span>
<span class="line"><span>        System.out.println(&quot;Thread A received: &quot; + data);</span></span>
<span class="line"><span>    } catch (InterruptedException e) {}</span></span>
<span class="line"><span>}).start();</span></span>
<span class="line"><span>new Thread(() -&gt; {</span></span>
<span class="line"><span>    try {</span></span>
<span class="line"><span>        String data = exchanger.exchange(&quot;Data from Thread B&quot;);</span></span>
<span class="line"><span>        System.out.println(&quot;Thread B received: &quot; + data);</span></span>
<span class="line"><span>    } catch (InterruptedException e) {}</span></span>
<span class="line"><span>}).start();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><hr><h3 id="_12、cyclicbarrier-和-countdownlatch-的区别" tabindex="-1"><a class="header-anchor" href="#_12、cyclicbarrier-和-countdownlatch-的区别"><span>12、CyclicBarrier 和 CountDownLatch 的区别</span></a></h3><table><thead><tr><th>特性</th><th>CountDownLatch</th><th>CyclicBarrier</th></tr></thead><tbody><tr><td>用途</td><td>一个线程等待多个线程完成</td><td>多个线程互相等待</td></tr><tr><td>计数器</td><td>一次性</td><td>可复用（可 reset()）</td></tr><tr><td>等待策略</td><td>主线程等待其他线程完成</td><td>所有线程等待彼此</td></tr><tr><td>方法</td><td>countDown(), await()</td><td>await(), reset(), getNumberWaiting()</td></tr></tbody></table><hr><h3 id="_13、synchronized-的作用" tabindex="-1"><a class="header-anchor" href="#_13、synchronized-的作用"><span>13、synchronized 的作用</span></a></h3><ul><li>用于保证线程安全，控制临界区同一时间只有一个线程访问。</li><li>可加在 <strong>方法</strong> 或 <strong>代码块</strong> 上。</li><li>关键特点： <ol><li>内置锁（对象锁）机制。</li><li>自动释放锁，无需手动 unlock。</li><li>可重入锁，即同一线程可以再次获取锁。</li></ol></li></ul><hr><h3 id="_14、volatile-关键字的作用" tabindex="-1"><a class="header-anchor" href="#_14、volatile-关键字的作用"><span>14、volatile 关键字的作用</span></a></h3><ul><li>保证 <strong>可见性</strong>：当一个线程修改变量时，其他线程立即可见。</li><li>禁止指令重排序优化，保证 <strong>有序性</strong>。</li><li>不保证原子性，适用于状态标识或配合 CAS 使用。</li></ul><hr><h3 id="_15、什么是-cas" tabindex="-1"><a class="header-anchor" href="#_15、什么是-cas"><span>15、什么是 CAS</span></a></h3><ul><li><p>CAS = Compare And Swap（比较并交换）</p></li><li><p>乐观锁机制：不断尝试更新值，若冲突则自旋重试。</p></li><li><p>示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>AtomicInteger atomicInt = new AtomicInteger(0);</span></span>
<span class="line"><span>atomicInt.compareAndSet(0, 1); // 当前值为0时改为1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>问题：</p><ol><li><strong>ABA 问题</strong>：0→1→0，CAS无法感知。可用 AtomicStampedReference 解决。</li><li><strong>非原子操作</strong>：CAS保证单个变量原子性，但不保证代码块原子性。</li><li><strong>CPU占用</strong>：自旋可能导致CPU空转。</li></ol></li></ul><hr><h3 id="_16、future" tabindex="-1"><a class="header-anchor" href="#_16、future"><span>16、Future</span></a></h3><ul><li>表示异步任务的结果，可以阻塞等待或非阻塞回调获取结果。</li><li>典型用法：线程池提交任务返回 Future，用 get() 等待结果。</li></ul><hr><h3 id="_17、aqs" tabindex="-1"><a class="header-anchor" href="#_17、aqs"><span>17、AQS</span></a></h3><ul><li>AbstractQueuedSynchronizer，底层同步框架。</li><li>通过 <strong>state + 队列</strong> 管理同步状态，支持多种锁和同步器的实现。</li><li>常见基于 AQS 的类：ReentrantLock、Semaphore、CountDownLatch、FutureTask。</li></ul><hr><h3 id="_18、aqs-支持两种同步方式" tabindex="-1"><a class="header-anchor" href="#_18、aqs-支持两种同步方式"><span>18、AQS 支持两种同步方式</span></a></h3><ol><li><strong>独占锁模式（Exclusive）</strong>：一次只允许一个线程占用，比如 ReentrantLock。</li><li><strong>共享锁模式（Shared）</strong>：允许多个线程同时占用，如 Semaphore、ReadWriteLock 的读锁。</li></ol><hr><h3 id="_19、readwritelock" tabindex="-1"><a class="header-anchor" href="#_19、readwritelock"><span>19、ReadWriteLock</span></a></h3><ul><li>分为读锁和写锁： <ul><li><strong>读锁</strong>：多个线程可同时持有。</li><li><strong>写锁</strong>：一次只允许一个线程持有。</li></ul></li><li>使用场景：读多写少的共享资源，提高并发性能。</li></ul><hr><h3 id="_20、futuretask" tabindex="-1"><a class="header-anchor" href="#_20、futuretask"><span>20、FutureTask</span></a></h3><ul><li>实现 <strong>Runnable + Future</strong> 接口，表示可执行的异步任务。</li><li>可以： <ol><li>放入线程池执行</li><li>获取计算结果</li><li>支持取消任务</li></ol></li></ul><hr><h3 id="_21、synchronized-和-reentrantlock-的区别" tabindex="-1"><a class="header-anchor" href="#_21、synchronized-和-reentrantlock-的区别"><span>21、synchronized 和 ReentrantLock 的区别</span></a></h3><table><thead><tr><th>特性</th><th>synchronized</th><th>ReentrantLock</th></tr></thead><tbody><tr><td>语言级别</td><td>JVM</td><td>Java API</td></tr><tr><td>可重入</td><td>支持</td><td>支持</td></tr><tr><td>公平锁</td><td>不支持</td><td>可选支持</td></tr><tr><td>响应中断</td><td>不支持</td><td>支持 lockInterruptibly()</td></tr><tr><td>条件变量</td><td>不支持</td><td>支持 Condition 多个等待队列</td></tr></tbody></table><hr><h3 id="_22、乐观锁和悲观锁" tabindex="-1"><a class="header-anchor" href="#_22、乐观锁和悲观锁"><span>22、乐观锁和悲观锁</span></a></h3><ul><li><strong>乐观锁</strong>：假设冲突少，不加锁，基于 CAS 更新，失败则重试。</li><li><strong>悲观锁</strong>：假设冲突多，加锁独占资源，其他线程阻塞。</li></ul><hr><h3 id="_23、线程-b-怎么知道线程-a-修改了变量" tabindex="-1"><a class="header-anchor" href="#_23、线程-b-怎么知道线程-a-修改了变量"><span>23、线程 B 怎么知道线程 A 修改了变量</span></a></h3><ol><li>volatile 修饰</li><li>synchronized 同步块</li><li>wait/notify 通知机制</li><li>轮询检查（低效）</li></ol><hr><h3 id="_24、synchronized、volatile、cas-比较" tabindex="-1"><a class="header-anchor" href="#_24、synchronized、volatile、cas-比较"><span>24、synchronized、volatile、CAS 比较</span></a></h3><table><thead><tr><th>特性</th><th>synchronized</th><th>volatile</th><th>CAS</th></tr></thead><tbody><tr><td>类型</td><td>悲观锁</td><td>可见性</td><td>乐观锁</td></tr><tr><td>阻塞</td><td>会阻塞</td><td>不阻塞</td><td>不阻塞，自旋</td></tr><tr><td>原子性</td><td>保证</td><td>不保证</td><td>单变量保证</td></tr><tr><td>应用</td><td>临界区保护</td><td>状态标志</td><td>高性能并发计数</td></tr></tbody></table><hr><h3 id="_25、sleep-与-wait-的区别" tabindex="-1"><a class="header-anchor" href="#_25、sleep-与-wait-的区别"><span>25、sleep 与 wait 的区别</span></a></h3><table><thead><tr><th>特性</th><th>sleep</th><th>wait</th></tr></thead><tbody><tr><td>是否释放锁</td><td>不释放</td><td>释放对象锁</td></tr><tr><td>所在类</td><td>Thread</td><td>Object</td></tr><tr><td>场景</td><td>暂停线程</td><td>线程等待通知</td></tr></tbody></table><hr><h3 id="_26、threadlocal" tabindex="-1"><a class="header-anchor" href="#_26、threadlocal"><span>26、ThreadLocal</span></a></h3><ul><li>每个线程保存自己的独立变量副本，线程间互不干扰。</li><li>使用场景：保存用户会话、数据库连接、事务上下文等。</li><li>实现原理：Thread 内部有 ThreadLocalMap，key 是 ThreadLocal 对象，value 是数据副本。</li></ul><hr><h3 id="_27、wait-notify-notifyall-为什么要在同步块中调用" tabindex="-1"><a class="header-anchor" href="#_27、wait-notify-notifyall-为什么要在同步块中调用"><span>27、wait()/notify()/notifyAll() 为什么要在同步块中调用</span></a></h3><ul><li>必须先获得对象的监视器（锁），否则 JVM 会抛 IllegalMonitorStateException。</li><li>原因：wait 会释放锁，notify 会唤醒锁等待队列中的线程。</li></ul><hr><h3 id="_28、多线程同步方法" tabindex="-1"><a class="header-anchor" href="#_28、多线程同步方法"><span>28、多线程同步方法</span></a></h3><ul><li><strong>方法</strong>：synchronized、Lock、Atomic 类、并发工具类、分布式锁等。</li><li><strong>选择原则</strong>：简单同步用 synchronized，高性能或可中断、可超时用 ReentrantLock。</li></ul><hr><h3 id="_29、线程调度策略" tabindex="-1"><a class="header-anchor" href="#_29、线程调度策略"><span>29、线程调度策略</span></a></h3><ul><li><strong>优先级调度</strong>：线程优先级高可能先执行。</li><li><strong>时间片轮转</strong>：线程轮流使用 CPU 时间片，操作系统调度。</li></ul><hr><h3 id="_30、concurrenthashmap-的并发度" tabindex="-1"><a class="header-anchor" href="#_30、concurrenthashmap-的并发度"><span>30、ConcurrentHashMap 的并发度</span></a></h3><ul><li>JDK1.7：通过段（Segment）分段锁，concurrencyLevel 决定段数量，提高并发性能。</li><li>JDK1.8：使用 CAS + 红黑树 + synchronized，concurrencyLevel 不再作为参数。</li></ul><hr><h3 id="_31、linux-查找-cpu-占用最高线程" tabindex="-1"><a class="header-anchor" href="#_31、linux-查找-cpu-占用最高线程"><span>31、Linux 查找 CPU 占用最高线程</span></a></h3><ul><li>使用 <code>top -H</code> 命令显示线程级 CPU 使用情况。</li><li>或 <code>ps -eLo pid,tid,pcpu,comm</code> 查看各线程 CPU。</li></ul><hr><h3 id="_32、java-死锁及避免" tabindex="-1"><a class="header-anchor" href="#_32、java-死锁及避免"><span>32、Java 死锁及避免</span></a></h3><ul><li><strong>死锁</strong>：多个线程互相等待对方释放锁，程序无法继续。</li><li><strong>避免方法</strong>： <ol><li>避免嵌套锁</li><li>尝试使用 <code>tryLock</code> 带超时</li><li>固定加锁顺序</li><li>使用高层次并发工具类（如 Semaphore、ConcurrentHashMap）</li></ol></li></ul><hr><h3 id="_33、死锁的原因" tabindex="-1"><a class="header-anchor" href="#_33、死锁的原因"><span>33、死锁的原因</span></a></h3><ol><li>互斥条件：资源独占</li><li>占有并等待：线程持有资源同时等待其他资源</li><li>不可剥夺条件：资源不能被强制释放</li><li>循环等待条件：线程形成环路等待资源</li></ol><hr><h3 id="_34、唤醒阻塞线程" tabindex="-1"><a class="header-anchor" href="#_34、唤醒阻塞线程"><span>34、唤醒阻塞线程</span></a></h3><ul><li><strong>Object.notify() / notifyAll()</strong>：唤醒等待该对象的线程</li><li><strong>Lock + Condition.signal() / signalAll()</strong></li><li><strong>中断阻塞线程</strong>：thread.interrupt()</li></ul><hr><h3 id="_35、不可变对象对多线程的帮助" tabindex="-1"><a class="header-anchor" href="#_35、不可变对象对多线程的帮助"><span>35、不可变对象对多线程的帮助</span></a></h3><ul><li>不可变对象天然线程安全，不需要加锁。</li><li>示例：<code>String</code>、<code>Integer</code>、<code>BigDecimal</code>。</li></ul><hr><h3 id="_36、多线程上下文切换" tabindex="-1"><a class="header-anchor" href="#_36、多线程上下文切换"><span>36、多线程上下文切换</span></a></h3><ul><li>CPU 从一个线程切换到另一个线程的过程，保存旧线程状态、恢复新线程状态。</li><li>代价：寄存器、缓存刷新、内核态切换，过多切换降低性能。</li></ul><hr><h3 id="_37、线程池队列满时的处理" tabindex="-1"><a class="header-anchor" href="#_37、线程池队列满时的处理"><span>37、线程池队列满时的处理</span></a></h3><ul><li><strong>拒绝策略</strong>： <ol><li>AbortPolicy（抛出异常）</li><li>CallerRunsPolicy（调用者线程执行任务）</li><li>DiscardPolicy（丢弃任务）</li><li>DiscardOldestPolicy（丢弃最老任务）</li></ol></li></ul><hr><h3 id="_38、java-线程调度算法" tabindex="-1"><a class="header-anchor" href="#_38、java-线程调度算法"><span>38、Java 线程调度算法</span></a></h3><ul><li>主要依赖 <strong>操作系统线程调度</strong>，Java 层无法精确控制。</li><li>JVM 提供优先级调度，但只是调度建议，不保证顺序。</li></ul><hr><h3 id="_39、线程调度器和时间分片" tabindex="-1"><a class="header-anchor" href="#_39、线程调度器和时间分片"><span>39、线程调度器和时间分片</span></a></h3><ul><li><strong>线程调度器</strong>：操作系统管理线程运行顺序。</li><li><strong>时间分片</strong>：每个线程分配固定时间片执行，时间片用完轮转到下一个线程。</li></ul><hr><h3 id="_40、自旋" tabindex="-1"><a class="header-anchor" href="#_40、自旋"><span>40、自旋</span></a></h3><ul><li>线程不断循环检查条件而不阻塞，等待资源可用。</li><li>优点：避免线程挂起、唤醒开销</li><li>缺点：CPU 占用高</li></ul><hr><h3 id="_41、lock-接口及优势" tabindex="-1"><a class="header-anchor" href="#_41、lock-接口及优势"><span>41、Lock 接口及优势</span></a></h3><ul><li>提供比 synchronized 更灵活的锁机制</li><li>优势： <ol><li>可响应中断 lockInterruptibly()</li><li>可尝试获取锁 tryLock()</li><li>支持公平锁</li><li>可绑定多个 Condition 条件队列</li></ol></li></ul><hr><h3 id="_42、单例模式线程安全性" tabindex="-1"><a class="header-anchor" href="#_42、单例模式线程安全性"><span>42、单例模式线程安全性</span></a></h3><ol><li><strong>懒汉式</strong> + synchronized：线程安全，但每次获取实例都有锁开销</li><li><strong>双重检查 + volatile</strong>：保证线程安全且性能高</li><li><strong>静态内部类</strong>：JVM 保证线程安全、懒加载</li></ol><hr><h3 id="_43、semaphore-的作用" tabindex="-1"><a class="header-anchor" href="#_43、semaphore-的作用"><span>43、Semaphore 的作用</span></a></h3><ul><li>控制同时访问某资源线程数量</li><li>用于限流、资源池管理</li><li>支持公平和非公平策略</li></ul><hr><h3 id="_44、executors-类" tabindex="-1"><a class="header-anchor" href="#_44、executors-类"><span>44、Executors 类</span></a></h3><ul><li>工具类，创建各种线程池</li><li>方法： <ol><li>newCachedThreadPool</li><li>newFixedThreadPool</li><li>newScheduledThreadPool</li><li>newSingleThreadExecutor</li></ol></li></ul><hr><h3 id="_45、线程类构造方法、静态块被哪个线程调用" tabindex="-1"><a class="header-anchor" href="#_45、线程类构造方法、静态块被哪个线程调用"><span>45、线程类构造方法、静态块被哪个线程调用</span></a></h3><ul><li><strong>静态块</strong>：由类加载线程执行（JVM 内部线程）</li><li><strong>构造方法</strong>：由创建该对象的线程执行</li></ul><hr><h3 id="_46、同步方法-vs-同步块-哪个更好" tabindex="-1"><a class="header-anchor" href="#_46、同步方法-vs-同步块-哪个更好"><span>46、同步方法 vs 同步块，哪个更好</span></a></h3><ul><li><strong>同步方法</strong>：锁对象是 <code>this</code> 或类对象，范围大，容易阻塞</li><li><strong>同步块</strong>：可指定锁对象，粒度小，推荐使用</li><li><strong>原则</strong>：尽量使用同步块，锁粒度越小越好</li></ul><hr><h3 id="_47、java-线程数过多可能造成的异常" tabindex="-1"><a class="header-anchor" href="#_47、java-线程数过多可能造成的异常"><span>47、Java 线程数过多可能造成的异常</span></a></h3><ol><li><strong>OutOfMemoryError: unable to create new native thread</strong></li><li>系统调度压力增大，导致 CPU 负载过高</li><li>上下文切换频繁，整体性能下降</li></ol>`,144)]))}const o=n(e,[["render",t]]),h=JSON.parse('{"path":"/bigcompany/5maer6mx/","title":"拼多多-Java工程师（电商部）","lang":"zh-CN","frontmatter":{"title":"拼多多-Java工程师（电商部）","createTime":"2025/08/21 13:27:00","permalink":"/bigcompany/5maer6mx/"},"readingTime":{"minutes":11.76,"words":3528},"git":{"createdTime":1756736713000},"filePathRelative":"notes/bigcompany/company/拼多多-Java工程师（电商部）.md","headers":[]}');export{o as comp,h as data};

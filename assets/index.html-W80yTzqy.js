import{a as t,c as r,b as o,o as n}from"./app-ZQgO6-gU.js";const e={};function i(s,a){return n(),r("div",null,a[0]||(a[0]=[o('<p>Spring Boot 3.0 是一个重要的主要版本，它将 Spring Boot 的开发提升到了一个新的水平，主要围绕 <strong>Java 17、Jakarta EE 9/10 和 GraalVM</strong> 等技术展开。</p><h2 id="_1-最低要求-java-17" tabindex="-1"><a class="header-anchor" href="#_1-最低要求-java-17"><span>1. 最低要求：Java 17</span></a></h2><p>这是 Spring Boot 3 最重要的变化之一。它将项目的最低 Java 版本要求提高到了 <strong>Java 17</strong>。这意味着你将能够利用 Java 17 的所有新特性，包括：</p><ul><li><strong>模式匹配（Pattern Matching）</strong>：简化 <code>instanceof</code> 和 <code>switch</code> 表达式的使用，使代码更具可读性。</li><li><strong>Record 类型</strong>：为不可变数据类提供简洁的语法，减少样板代码。</li><li><strong>密封类（Sealed Classes）</strong>：控制哪些类可以继承一个类，提供了更强的类型安全性。</li></ul><h2 id="_2-拥抱-jakarta-ee-9-10" tabindex="-1"><a class="header-anchor" href="#_2-拥抱-jakarta-ee-9-10"><span>2. 拥抱 Jakarta EE 9 &amp; 10</span></a></h2><p>Spring Boot 3 放弃了对 Java EE 8（<code>javax</code> 命名空间）的支持，完全迁移到了 <strong>Jakarta EE 9+</strong>（<code>jakarta</code> 命名空间）。</p><ul><li><strong>主要影响</strong>：这意味着所有与 Servlet、JPA、JMS 和 Bean Validation 相关的依赖，都必须使用 <code>jakarta.*</code> 命名空间。</li><li><strong>迁移</strong>：对于从 Spring Boot 2.x 升级的现有应用，你需要更新依赖并修改代码中的 <code>javax.*</code> 包导入语句。</li></ul><h2 id="_3-aot-ahead-of-time-支持与-graalvm" tabindex="-1"><a class="header-anchor" href="#_3-aot-ahead-of-time-支持与-graalvm"><span>3. AOT（Ahead-of-Time）支持与 GraalVM</span></a></h2><p>这是 Spring Boot 3 最令人兴奋的新特性之一。它提供了对 <strong>GraalVM Native Image</strong> 的原生支持。</p><ul><li><strong>什么是 Native Image？</strong>：它是一种将 Java 应用编译成独立的可执行文件（Native Executable）的技术，无需 JVM 即可运行。</li><li><strong>核心优势</strong>： <ul><li><strong>极速启动</strong>：Native Image 应用的启动时间通常在毫秒级，非常适合微服务和无服务架构。</li><li><strong>低内存占用</strong>：由于移除了 JVM，内存消耗大幅降低。</li><li><strong>更小的包体积</strong>：只包含必要的代码，生成的可执行文件更小。</li></ul></li></ul><p>Spring Boot 3 的 AOT 支持能够自动生成 Native Image 所需的配置，极大地简化了 Native Image 的创建过程。</p><h2 id="_4-全新的可观察性-observability" tabindex="-1"><a class="header-anchor" href="#_4-全新的可观察性-observability"><span>4. 全新的可观察性（Observability）</span></a></h2><p>Spring Boot 3 引入了一个全新的可观察性模块，基于 <strong>Micrometer</strong> 和 <strong>Micrometer Tracing</strong>。它统一了 Metrics（指标）、Logging（日志）和 Tracing（分布式追踪）的配置，让监控你的应用变得更加简单。</p><ul><li><strong>统一 API</strong>：提供了统一的 API 来处理追踪、指标和日志，无需担心底层实现。</li><li><strong>开箱即用</strong>：只需引入相应的依赖，就可以自动配置对 Prometheus、Zipkin、Grafana 等流行工具的支持。</li></ul><h2 id="_5-改进的-actuator" tabindex="-1"><a class="header-anchor" href="#_5-改进的-actuator"><span>5. 改进的 Actuator</span></a></h2><p>Spring Boot Actuator 提供了许多生产就绪的端点，用于监控和管理应用。在 Spring Boot 3 中，Actuator 得到了改进，以更好地支持可观察性。</p><ul><li><strong>Metrics</strong>：更好地集成了 Micrometer，提供更丰富的应用指标。</li><li><strong>Endpoint</strong>：增加了新的 <code>/actuator/info</code> 端点，可以更灵活地展示应用信息。</li></ul><h2 id="_6-其他重要变化" tabindex="-1"><a class="header-anchor" href="#_6-其他重要变化"><span>6. 其他重要变化</span></a></h2><ul><li><strong>Spring Data JPA</strong>：默认将 <code>@Transactional</code> 事务注解改为 <code>jakarta.transaction.Transactional</code>。</li><li><strong>Spring Security</strong>：默认使用新的授权管理器 API。</li><li><strong>HTTP/2 支持</strong>：内嵌的服务器（Tomcat, Jetty）默认支持 HTTP/2。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Spring Boot 3 是一个向现代化、云原生和高效开发转型的版本。它不仅是简单的版本升级，更是对技术栈的全面革新。</p><ul><li><strong>最低要求</strong>：如果你想使用 Spring Boot 3，你需要将 Java 版本升级到 17。</li><li><strong>云原生</strong>：Native Image 的支持使其成为构建高效、低成本微服务的理想选择。</li><li><strong>可观察性</strong>：新的可观察性模块使得应用监控更加方便和强大。</li></ul><p>如果你正在开发新的 Spring 应用，直接选择 Spring Boot 3 是一个明智的决定。如果你需要升级旧应用，请务必仔细阅读官方迁移指南。</p>',23)]))}const g=t(e,[["render",i]]),c=JSON.parse('{"path":"/framework/springboot/lt8adhak/","title":"SpringBoot3的简介","lang":"zh-CN","frontmatter":{"title":"SpringBoot3的简介","createTime":"2025/08/27 16:16:53","permalink":"/framework/springboot/lt8adhak/"},"readingTime":{"minutes":3.1,"words":931},"git":{"createdTime":1756736713000},"filePathRelative":"notes/framework/springboot/README.md","headers":[]}');export{g as comp,c as data};

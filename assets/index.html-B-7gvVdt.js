import{a,c as e,b as n,o as i}from"./app-ZQgO6-gU.js";const l={};function c(p,s){return i(),e("div",null,s[0]||(s[0]=[n(`<p>在 MyBatis-Flex 中，提供了许多批量操作（批量插入、批量更新等）的方法，当有多个方法的时候，会经常导致误用的情况。</p><h2 id="basemapper-insertbatch-方法" tabindex="-1"><a class="header-anchor" href="#basemapper-insertbatch-方法"><span><code>BaseMapper.insertBatch</code> 方法</span></a></h2><p>这个方法的示例代码如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>List&lt;Account&gt; accounts = ....</span></span>
<span class="line"><span>mapper.insertBatch(accounts);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>BaseMapper.insertBatch</code> 执行时，会通过 <code>accounts</code> 去组装一个如下的 SQL：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>insert into tb_account(id,nickname, .....) values</span></span>
<span class="line"><span>(100,&quot;miachel100&quot;, ....),</span></span>
<span class="line"><span>(101,&quot;miachel101&quot;, ....),</span></span>
<span class="line"><span>(102,&quot;miachel102&quot;, ....),</span></span>
<span class="line"><span>(103,&quot;miachel103&quot;, ....),</span></span>
<span class="line"><span>(104,&quot;miachel104&quot;, ....),</span></span>
<span class="line"><span>(105,&quot;miachel105&quot;, ....);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种有一个特点：在小批量数据执行插入的时候，效率是非常高；但是当数据列表过多时，其生成的 SQL 可能会非常大， 这个大的 SQL 在传输和执行的时候就会变得很慢了。</p><p>因此，<code>BaseMapper.insertBatch</code> 方法只适用于在小批量数据插入的场景，比如 100 条数据以内。</p><h2 id="db-executebatch-方法" tabindex="-1"><a class="header-anchor" href="#db-executebatch-方法"><span><code>Db.executeBatch</code> 方法</span></a></h2><p><code>Db.executeBatch</code> 可以用于进行批量的插入、修改和删除，以下是使用 <code>Db.executeBatch</code> 进行批量插入的示例：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>List&lt;Account&gt; accounts = ....</span></span>
<span class="line"><span>Db.executeBatch(accounts.size(), 1000, AccountMapper.class, (mapper, index) -&gt; {</span></span>
<span class="line"><span>    Account account = accounts.get(index);</span></span>
<span class="line"><span>    mapper.insert(account);</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>List&lt;Account&gt; accounts = ....</span></span>
<span class="line"><span>Db.executeBatch(accounts, 1000, AccountMapper.class, (mapper, account) -&gt; {</span></span>
<span class="line"><span>    mapper.insert(account);</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Db.executeBatch</code> 是通过 JDBC 的 <code>Statement.executeBatch()</code> 进行批量执行；这个在大批量数据执行的时候，效率要比 <code>BaseMapper.insertBatch</code> 高出许多；</p><p>IService 很多批量操作的方法，也都是通过 <code>Db.executeBatch</code> 进行封装的，大家也可以通过其扩展出自己的 &quot;批量操作&quot; 方法来。比如这是一个批量忽略 <code>null</code> 的插入示例：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public boolean saveBatchSelective(Collection&lt;Account&gt; entities) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    int[] result = Db.executeBatch(entities,</span></span>
<span class="line"><span>        1000,</span></span>
<span class="line"><span>        AccountMapper.class,</span></span>
<span class="line"><span>        BaseMapper::insertSelective);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    return SqlUtil.toBool(result);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>注意！注意！错误的用法！</strong></p><p>在社区里看到个别同学，在使用 <code>Db.executeBatch</code> 时，未使用到参数 mapper，而是使用了其他 mapper，或者使用了 UpdateChain 等。</p><p>如下所示：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>List&lt;Account&gt; accounts = ....</span></span>
<span class="line"><span>Db.executeBatch(accounts, 1000, AccountMapper.class</span></span>
<span class="line"><span>    , (mapper, account) -&gt; {</span></span>
<span class="line"><span>    // ↑↑↑↑↑  以上的这个 mapper，未被使用</span></span>
<span class="line"><span>    UpdateChain.of(account)</span></span>
<span class="line"><span>        .set(Account::getUserName, &quot;张三&quot;)</span></span>
<span class="line"><span>        .update();</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的 <strong>错误</strong> 示例，是因为没有用到 <code>mapper</code> 参数，因此，不仅仅 <code>Db.executeBatch</code> 返回的都是失败的内容，而且也起不到批量操作的作用。</p><p>以上代码需要修改为：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>List&lt;Account&gt; accounts = ....</span></span>
<span class="line"><span>Db.executeBatch(accounts, 1000, AccountMapper.class</span></span>
<span class="line"><span>    , (mapper, account) -&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    UpdateChain.of(mapper) //使用 mapper 参数，才能起到批量执行的效果</span></span>
<span class="line"><span>        .set(Account::getUserName, &quot;张三&quot;)</span></span>
<span class="line"><span>        .update();</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="db-updatebatch-方法" tabindex="-1"><a class="header-anchor" href="#db-updatebatch-方法"><span><code>Db.updateBatch</code> 方法</span></a></h2><p>这个方法的示例代码如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>List&lt;Account&gt; accounts = ....</span></span>
<span class="line"><span>String sql = &quot;insert into tb_account(user_name, age, birthday) &quot; +</span></span>
<span class="line"><span>    &quot;values (?, ?, ?)&quot;;</span></span>
<span class="line"><span>Db.updateBatch(sql, new BatchArgsSetter() {</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public int getBatchSize() {</span></span>
<span class="line"><span>        return accounts.size();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public Object[] getSqlArgs(int index) {</span></span>
<span class="line"><span>        Account account = accounts = accounts.get(index);</span></span>
<span class="line"><span>        Object[] args = new Object[3];</span></span>
<span class="line"><span>        args[0] = account.getUserName;</span></span>
<span class="line"><span>        args[1] = account.getAge();</span></span>
<span class="line"><span>        args[2] = new Date();</span></span>
<span class="line"><span>        return args;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然这个方法叫 <code>updateBatch</code>，但一样可以执行 <code>insert</code>、<code>delete</code>、<code>update</code> 等任何 SQL； 这个方法类似 Spring 的 <code>jdbcTemplate.batchUpdate()</code> 方法。</p><h2 id="db-updateentitiesbatch-方法" tabindex="-1"><a class="header-anchor" href="#db-updateentitiesbatch-方法"><span><code>Db.updateEntitiesBatch</code> 方法</span></a></h2><p>这个方法用于批量根据 id 更新 entity，其是对 <code>Db.executeBatch</code> 的封装，使用代码如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>List&lt;Account&gt; accounts = ....</span></span>
<span class="line"><span>Db.updateEntitiesBatch(accounts, 1000);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,40)]))}const d=a(l,[["render",c]]),r=JSON.parse('{"path":"/framework/mybatisflex/base/df2jwu1l/","title":"批量操作","lang":"zh-CN","frontmatter":{"title":"批量操作","createTime":"2025/08/26 17:23:02","permalink":"/framework/mybatisflex/base/df2jwu1l/"},"readingTime":{"minutes":2.36,"words":708},"git":{"createdTime":1756736713000},"filePathRelative":"notes/framework/mybatisflex/base/批量操作.md","headers":[]}');export{d as comp,r as data};

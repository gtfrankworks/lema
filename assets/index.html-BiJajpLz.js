import{a as s,c as a,b as i,o as n}from"./app-ZQgO6-gU.js";const l={};function d(t,e){return n(),a("div",null,e[0]||(e[0]=[i(`<p>MyBatis-Flex 内置了一个名为 <code>BaseMapper</code> 的接口，它实现了基本的增删改查功能以及分页查询功能。</p><blockquote><p>MyBatis-Flex 的 <strong>代码生成器</strong> 生成的所有 Mapper 辅助类，都是继承 BaseMapper。</p></blockquote><h2 id="新增数据" tabindex="-1"><a class="header-anchor" href="#新增数据"><span>新增数据</span></a></h2><p><code>BaseMapper</code> 的接口提供了 insert 和 insertBatch 方法，用于新增数据；</p><ul><li><strong><code>insert(entity)</code></strong>：插入实体类数据，不忽略 <code>null</code> 值。</li><li><strong><code>insertSelective(entity)</code></strong>：插入实体类数据，但是忽略 <code>null</code> 的数据，只对有值的内容进行插入。这样的好处是数据库已经配置了一些默认值，这些默认值才会生效。</li><li><strong><code>insert(entity, ignoreNulls)</code></strong>：插入实体类数据。</li><li><strong><code>insertWithPk(entity)</code></strong>：插入带有主键的实体类，不忽略 <code>null</code> 值。</li><li><strong><code>insertSelectiveWithPk(entity)</code></strong>：插入带有主键的实体类，忽略 <code>null</code> 值。</li><li><strong><code>insertWithPk(entity, ignoreNulls)</code></strong>：带有主键的插入，此时实体类不会经过主键生成器生成主键。</li><li><strong><code>insertBatch(entities)</code></strong>：批量插入实体类数据，只会根据第一条数据来构建插入的字段内容。</li><li><strong><code>insertBatch(entities, size)</code></strong>：批量插入实体类数据，按 size 切分。</li><li><strong><code>insertBatchSelective(entities)</code></strong>：批量插入实体类数据，忽略 <code>null</code> 值。</li><li><strong><code>insertOrUpdate(entity)</code></strong>：插入或者更新，若主键有值，则更新，若没有主键值，则插入，插入或者更新都不会忽略 <code>null</code> 值。</li><li><strong><code>insertOrUpdateSelective(entity)</code></strong>：插入或者更新，若主键有值，则更新，若没有主键值，则插入，插入或者更新都会忽略 <code>null</code> 值。</li><li><strong><code>insertOrUpdate(entity, ignoreNulls)</code></strong>：插入或者更新，若主键有值，则更新，若没有主键值，则插入。</li></ul><h3 id="用-updatewrapper-新增数据-v1-5-8" tabindex="-1"><a class="header-anchor" href="#用-updatewrapper-新增数据-v1-5-8"><span>用 UpdateWrapper 新增数据 ^ v1.5.8</span></a></h3><p>在某些场景下，我们希望在新增数据时，新增数据字段内容是数据库的某个 <code>函数</code> 或者 <code>SQL片段</code> 生成的内容，而非我们手动设置的内容。 例如，我们希望执行的 SQL 如下：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>INSERT INTO \`tb_account\`(\`user_name\`,  \`birthday\`)</span></span>
<span class="line"><span>VALUES (?, now())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>以上 SQL 中，<code>birthday</code> 是由 <code>now()</code> 函数生成的内容。</p></blockquote><p>那么，java 代码如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>@Test</span></span>
<span class="line"><span>public void testInsertWithRaw() {</span></span>
<span class="line"><span>    Account account = new Account();</span></span>
<span class="line"><span>    account.setUserName(&quot;michael&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Account newAccount = UpdateWrapper.of(account)</span></span>
<span class="line"><span>//       .setRaw(&quot;birthday&quot;, &quot;now()&quot;)</span></span>
<span class="line"><span>//       .setRaw(ACCOUNT.BIRTHDAY, &quot;now()&quot;)</span></span>
<span class="line"><span>        .setRaw(Account::getBirthday, &quot;now()&quot;)</span></span>
<span class="line"><span>        .toEntity();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    accountMapper.insert(newAccount);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者复杂一点的：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>@Test</span></span>
<span class="line"><span>public void testInsertWithRaw() {</span></span>
<span class="line"><span>    Account account = new Account();</span></span>
<span class="line"><span>    account.setUserName(&quot;michael&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Account newAccount = UpdateWrapper.of(account)</span></span>
<span class="line"><span>        .setRaw(Account::getBirthday, &quot;(select xxx from ...)&quot;)</span></span>
<span class="line"><span>        .toEntity();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    accountMapper.insert(newAccount);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其生成的 SQL 如下：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>INSERT INTO \`tb_account\`(\`user_name\`,  \`birthday\`)</span></span>
<span class="line"><span>VALUES (?, (select xxx from ...))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意，通过 <code>UpdateWrapper.setRaw()</code> 的设置，会覆盖注解 <code>@Column.onUpdateValue</code> 配置的内容。</p></blockquote><h2 id="删除数据" tabindex="-1"><a class="header-anchor" href="#删除数据"><span>删除数据</span></a></h2><p><code>BaseMapper</code> 的接口提供了 deleteById、deleteBatchByIds、deleteByMap、deleteByQuery 方法，用于删除数据；</p><ul><li><strong><code>deleteById(id)</code></strong>：根据主键删除数据。如果是多个主键的情况下，需要传入数组，例如：<code>new Integer[]{100,101}</code>。</li><li><strong><code>delete(entity)</code></strong>：根据实体主键来删除数据。相比deleteById(id)，此方法更便于对复合主键实体类的删除。</li><li><strong><code>deleteBatchByIds(ids)</code></strong>：根据多个主键批量删除数据。</li><li><strong><code>deleteBatchByIds(ids, size)</code></strong>：根据多个主键批量删除数据。</li><li><strong><code>deleteByMap(whereConditions)</code></strong>：根据 Map 构建的条件来删除数据。</li><li><strong><code>deleteByCondition(whereConditions)</code></strong>：根据查询条件来删除数据。</li><li><strong><code>deleteByQuery(queryWrapper)</code></strong>：根据查询条件来删除数据。</li></ul><p><strong>deleteByQuery(queryWrapper)</strong> 方法示例：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>QueryWrapper queryWrapper = QueryWrapper.create();</span></span>
<span class="line"><span>queryWrapper.where(ACCOUNT.ID.ge(100));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//通过 queryWrapper 删除</span></span>
<span class="line"><span>accountMapper.deleteByQuery(queryWrapper);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>deleteByCondition(condition)</strong> 方法示例：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>accountMapper.deleteByCondition(ACCOUNT.ID.ge(100));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>以上的代码，会删除所有 id &gt;= 100 的数据，其执行的 Sql 如下：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>delete from tb_account where id &gt;= 100;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>tip: QueryWrapper 非常灵活，也是 MyBatis-Flex 的特色之一，更多关于 QueryWrapper 的 请看 <a href="https://mybatis-flex.com/zh/base/querywrapper.html" target="_blank" rel="noopener noreferrer">QueryWrapper 章节</a>。</p></blockquote><h2 id="更新数据" tabindex="-1"><a class="header-anchor" href="#更新数据"><span>更新数据</span></a></h2><p><code>BaseMapper</code> 的接口提供了 update、updateByMap、updateByQuery 方法，用于更新数据；</p><ul><li><strong><code>update(entity)</code></strong>：根据主键来更新数据，若实体类属性数据为 <code>null</code>，该属性不会更新到数据库。</li><li><strong><code>update(entity, ignoreNulls)</code></strong>：根据主键来更新数据到数据库。</li><li><strong><code>updateByMap(entity, whereConditions)</code></strong>：根据 Map 构建的条件来更新数据。</li><li><strong><code>updateByMap(entity, ignoreNulls, whereConditions)</code></strong>：根据 Map 构建的条件来更新数据。</li><li><strong><code>updateByCondition(entity, whereConditions)</code></strong>：根据查询条件来更新数据。</li><li><strong><code>updateByCondition(entity, ignoreNulls, whereConditions)</code></strong>：根据查询条件来更新数据。</li><li><strong><code>updateByQuery(entity, queryWrapper)</code></strong>：根据查询条件来更新数据。</li><li><strong><code>updateByQuery(entity, ignoreNulls, queryWrapper)</code></strong>：根据查询条件来更新数据。</li><li><strong><code>updateNumberAddByQuery(fieldName, value, queryWrapper)</code></strong>：执行类似 <code>update table set field = field + 1 where ... </code>的场景。</li><li><strong><code>updateNumberAddByQuery(column, value, queryWrapper)</code></strong>：执行类似 <code>update table set field = field + 1 where ... </code>的场景。</li><li><strong><code>updateNumberAddByQuery(fn, value, queryWrapper)</code></strong>：执行类似 <code>update table set field = field + 1 where ... </code>的场景。</li></ul><h2 id="部分字段更新" tabindex="-1"><a class="header-anchor" href="#部分字段更新"><span>部分字段更新</span></a></h2><p>在很多场景下，我们希望只更新<strong>部分字段</strong>，而更新的字段中，一些为 null，一些非 null。此时需要用到 <code>UpdateEntity</code> 工具类，以下是示例代码：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Account account = UpdateEntity.of(Account.class, 100);</span></span>
<span class="line"><span>//Account account = UpdateEntity.of(Account.class);</span></span>
<span class="line"><span>//account.setId(100);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>account.setUserName(null);</span></span>
<span class="line"><span>account.setAge(10);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>accountMapper.update(account);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的示例中，会把 id (主键)为 100 这条数据中的 user_name 字段更新为 null，age 字段更新为 10，其他字段不会被更新。</p><p>也就是说，通过 UpdateEntity 创建的对象，只会更新调用了 setter 方法的字段，若不调用 setter 方法，不管这个对象里的属性的值是什么，都不会更新到数据库。</p><p>其执行的 sql 内容如下：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>update tb_account</span></span>
<span class="line"><span>set user_name = ?, age = ? where id = ?</span></span>
<span class="line"><span>#参数: null,10,100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Account account = UpdateEntity.of(Account.class, 100);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>等同于：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Account account = UpdateEntity.of(Account.class);</span></span>
<span class="line"><span>account.setId(100);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="部分字段更新-增强" tabindex="-1"><a class="header-anchor" href="#部分字段更新-增强"><span>部分字段更新（增强）</span></a></h2><p>在以上的部分字段更新中，只能更新为用户传入的数据，但是有些时候我们想更新为数据库计算的数据，比如 SQL：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>update tb_account</span></span>
<span class="line"><span>set user_name = ?, age = age + 1 where id = ?</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，我们可以直接把 <code>Account</code> 强转为 <code>UpdateWrapper</code> 然后进行更新，例如：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Account account = UpdateEntity.of(Account.class, 100);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>account.setUserName(null);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 通过 UpdateWrapper 操作 account 数据</span></span>
<span class="line"><span>UpdateWrapper wrapper = UpdateWrapper.of(account);</span></span>
<span class="line"><span>wrapper.setRaw(&quot;age&quot;, &quot;age + 1&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>accountMapper.update(account);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行的 SQL 为：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>update tb_account</span></span>
<span class="line"><span>set user_name = null, age = age + 1 where id = 100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>更高级的用法</strong></p><p>示例1：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Account account = UpdateEntity.of(Account.class, 100);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>account.setUserName(&quot;Michael&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 通过 UpdateWrapper 操作 account 数据</span></span>
<span class="line"><span>UpdateWrapper wrapper = UpdateWrapper.of(account);</span></span>
<span class="line"><span>wrapper.set(ACCOUNT.AGE, ACCOUNT.AGE.add(1));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>accountMapper.update(account);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行的 SQL 为：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>update tb_account</span></span>
<span class="line"><span>set user_name = &quot;michael&quot;, age = age + 1 where id = 100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例2：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Account account = UpdateEntity.of(Account.class, 100);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>account.setUserName(&quot;Michael&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 通过 UpdateWrapper 操作 account 数据</span></span>
<span class="line"><span>UpdateWrapper wrapper = UpdateWrapper.of(account);</span></span>
<span class="line"><span>wrapper.set(ACCOUNT.AGE, select().from(...));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>accountMapper.update(account);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行的 SQL 为：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>update tb_account</span></span>
<span class="line"><span>set user_name = &quot;michael&quot;, age = (select ... from ... )</span></span>
<span class="line"><span>where id = 100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="updatechain" tabindex="-1"><a class="header-anchor" href="#updatechain"><span>UpdateChain</span></a></h2><p>UpdateChain 是一个对 <code>UpdateEntity</code>、<code>UpdateWrapper</code> 等进行封装的一个工具类，方便用户用于进行链式操作。</p><p>假设我们要更新 <code>Account</code> 的 <code>userName</code> 为 &quot;<code>张三</code>&quot;，更新年龄在之前的基础上加 1，更新代码如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>@Test</span></span>
<span class="line"><span>public void testUpdateChain() {</span></span>
<span class="line"><span>    UpdateChain.of(Account.class)</span></span>
<span class="line"><span>        .set(Account::getUserName, &quot;张三&quot;)</span></span>
<span class="line"><span>        .setRaw(Account::getAge, &quot;age + 1&quot;)</span></span>
<span class="line"><span>        .where(Account::getId).eq(1)</span></span>
<span class="line"><span>        .update();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上方法调用时，MyBatis-Flex 内部执行的 SQL 如下：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>UPDATE \`tb_account\` SET \`user_name\` = &#39;张三&#39; , \`age\` = age + 1</span></span>
<span class="line"><span>WHERE \`id\` = 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>更多关于 <strong>链式操作</strong>，请点击这个 <a href="https://mybatis-flex.com/zh/base/chain.html#updatechain-%E7%A4%BA%E4%BE%8B" target="_blank" rel="noopener noreferrer">这里</a>。</p><h2 id="set-和-setraw-的区别" tabindex="-1"><a class="header-anchor" href="#set-和-setraw-的区别"><span><code>set()</code> 和 <code>setRaw()</code> 的区别</span></a></h2><p>在 <code>Row</code>、<code>UpdateWrapper</code>、<code>UpdateChain</code> 中，都提供了 <code>set()</code> 和 <code>setRaw()</code> 两个方法用于设置数据。 那么，他们有什么区别呢？</p><ul><li><code>set()</code> 方法用于设置参数数据。</li><li><code>setRaw()</code> 用于设置 SQL 拼接数据。</li></ul><p>例如：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>UpdateChain.of(Account.class)</span></span>
<span class="line"><span>    .set(Account::getUserName, &quot;张三&quot;)</span></span>
<span class="line"><span>    .where(Account::getId).eq(1)</span></span>
<span class="line"><span>    .update();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行的 SQL 如下：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>UPDATE \`tb_account\` SET \`user_name\` = ? WHERE \`id\` = 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果是使用 <code>setRaw()</code> 方法：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>UpdateChain.of(Account.class)</span></span>
<span class="line"><span>    .setRaw(Account::getUserName, &quot;张三&quot;)</span></span>
<span class="line"><span>    .where(Account::getId).eq(1)</span></span>
<span class="line"><span>    .update();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码执行时，参数 &quot;<code>张三</code>&quot; 会直接参与 SQL 拼接，可能会造成 SQL 错误，其 SQL 如下：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>UPDATE \`tb_account\` SET \`user_name\` = 张三 WHERE \`id\` = 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>因此，需要用户 <strong>【特别注意!!!】</strong>，<code>setRaw()</code> 传入不恰当的参数时，可能会造成 SQL 注入的危险。 因此，调用 <code>setRaw()</code> 方法时，需要开发者自行对其参数进行 SQL 注入过滤。</p><p><strong><code>setRaw()</code> 经常使用的场景：</strong></p><ul><li><strong>场景1： 用户充值，更新用户金额：</strong></li></ul><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>UpdateChain.of(Account.class)</span></span>
<span class="line"><span>    .setRaw(Account::getMoney, &quot;money + 100&quot;)</span></span>
<span class="line"><span>    .where(Account::getId).eq(1)</span></span>
<span class="line"><span>    .update();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行的 SQL 如下：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>UPDATE \`tb_account\` SET  \`money\` = money + 100</span></span>
<span class="line"><span>WHERE \`id\` = 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>场景2：执行某些特殊函数：</strong></li></ul><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>UpdateChain.of(Account.class)</span></span>
<span class="line"><span>    .setRaw(Account::getUserName, &quot;UPPER(user_name)&quot;)</span></span>
<span class="line"><span>    .where(Account::getId).eq(1)</span></span>
<span class="line"><span>    .update();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行的 SQL 如下：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>UPDATE tb_account SET  user_name = UPPER(user_name)</span></span>
<span class="line"><span>WHERE id = 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>UpdateChain.of(Account.class)</span></span>
<span class="line"><span>    .setRaw(Account::getUserName, &quot;utl_raw.cast_to_raw(&#39;some magic here&#39;)&quot;)</span></span>
<span class="line"><span>    .where(Account::getId).eq(1)</span></span>
<span class="line"><span>    .update();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行的 SQL 如下：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>UPDATE tb_account SET  user_name = utl_raw.cast_to_raw(&#39;some magic here&#39;)</span></span>
<span class="line"><span>WHERE id = 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,118)]))}const c=s(l,[["render",d]]),r=JSON.parse('{"path":"/framework/mybatisflex/base/3q6avye4/","title":"MyBatis-Flex 的增删改功能","lang":"zh-CN","frontmatter":{"title":"MyBatis-Flex 的增删改功能","createTime":"2025/08/26 17:17:01","permalink":"/framework/mybatisflex/base/3q6avye4/"},"readingTime":{"minutes":6.66,"words":1999},"git":{"createdTime":1756736713000},"filePathRelative":"notes/framework/mybatisflex/base/MyBatis-Flex 的增删改功能.md","headers":[]}');export{c as comp,r as data};

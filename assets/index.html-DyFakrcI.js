import{a as n,c as e,b as a,o as i}from"./app-ZQgO6-gU.js";const l={};function t(d,s){return i(),e("div",null,s[0]||(s[0]=[a(`<p><strong>多租户技术</strong>（英语：multi-tenancy technology），是一种软件架构技术，它是在探讨与实现如何于多用户的环境下共用相同的系统或程序组件，并且仍可确保各用户间数据的隔离性。</p><p>多租户简单来说是指一个单独的实例可以为多个用户（或组织）服务。多租户技术要求所有用户共用同一个数据中心，但能提供多个客户端相同甚至可定制化的服务，并且仍然可以保障客户的数据隔离。</p><p>多租户的数据隔离有许多种方案，但最为常见的是以列进行隔离的方式。MyBatis-Flex 内置的正是通过指定的列（租户ID <code>tenant_id</code>）进行隔离的方案。</p><h2 id="开始使用" tabindex="-1"><a class="header-anchor" href="#开始使用"><span>开始使用</span></a></h2><p>MyBatis-Flex 使用多租户需要 2 个步骤：</p><ul><li>step 1：通过 <code>@Column(tenantId = true)</code> 标识租户列。</li><li>step 2：为 <code>TenantManager</code> 配置 <code>TenantFactory</code>。</li></ul><blockquote><p>TenantFactory 是用于生产租户ID的，或者说是用于获取当前租户ID的。</p></blockquote><p>以下是代码示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>@Table(&quot;tb_article&quot;)</span></span>
<span class="line"><span>public class Article {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Id(keyType = KeyType.Auto)</span></span>
<span class="line"><span>    private Long id;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Column(tenantId = true)</span></span>
<span class="line"><span>    private Long tenantId;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>通过 <code>@Column(tenantId = true)</code> 表示租户ID。</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>TenantManager.setTenantFactory(new TenantFactory() {</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public Object[] getTenantIds() {</span></span>
<span class="line"><span>        //通过这里返回当前租户 ID</span></span>
<span class="line"><span>        return new Object[]{100};</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tenantfactory-说明" tabindex="-1"><a class="header-anchor" href="#tenantfactory-说明"><span>TenantFactory 说明</span></a></h2><p><code>TenantFactory</code> 接口的主要作用，适用于获取当前的租户ID，并在数据新增、删除、修改 和 查询的时候，会自动带上 TenantFactory &quot;生产&quot; 的数据。</p><p><code>TenantFactory</code> 源码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public interface TenantFactory {</span></span>
<span class="line"><span>    Object[] getTenantIds();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>getTenantIds</code> 要求返回一个数组，原因有如下场景：</p><ul><li><strong>场景1</strong>：租户对自己的数据进行增删改查，返回的 <code>Object[]</code> 数组只有租户自己的 ID 就可以了。</li><li><strong>场景2</strong>：租户可以对自己，以及其他租户（比如下级租户）的数据进行增删改查，那么要求返回的 <code>Object[]</code> 必须包含其他租户的 ID。比如某个数据列表， 除了显示租户自己的数据以外，还包含下级租户的数据，这种场景则要求 <code>getTenantIds</code> 返回多个值。</li><li><strong>场景3</strong>：忽略租户条件，由代码自定义条件查询，此项要求 <code>getTenantIds</code> 返回 null 或者 空数组。</li></ul><p><strong>注意！注意！注意！</strong></p><blockquote><p>在整个应用中，应该只有一个 <code>TenantFactory</code> 实例，然后再通过其 <code>getTenantIds()</code> 方法里去获取当前的租户 ID，在 Spring 场景中，我们可以通过在 RequestContextHolder 中去获取当前的租户 ID。在其他框架中，我们可以通过自定义 ThreadLocal 去获取 TenantId。</p></blockquote><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class MyTenantFactory implements TenantFactory {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public Object[] getTenantIds(){</span></span>
<span class="line"><span>        RequestAttributes attributes = RequestContextHolder.getRequestAttributes();</span></span>
<span class="line"><span>        Long tenantId =  attributes.getAttribute(&quot;tenantId&quot;, RequestAttributes.SCOPE_REQUEST);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        return new Object[]{tenantId};</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，<code>MyTenantFactory</code> 需要正常工作，我们需要在 Spring 拦截器里，需要通过 request 去获取当前的租户 ID，并设置到 request 的 attribute，如下代码所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class TenantInterceptor implements HandlerInterceptor {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public boolean preHandle(HttpServletRequest request</span></span>
<span class="line"><span>        , HttpServletResponse response, Object handler) throws Exception {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //通过 request 去获取租户 ID</span></span>
<span class="line"><span>        Long tenantId = getTenantIdByReuqest(request);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //设置租户ID到 request 的 attribute</span></span>
<span class="line"><span>        request.setAttribute(&quot;tenantId&quot;, tenantId);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        return true;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，在 <code>WebMvcConfigurer</code> 中，通过重写 <code>addInterceptors</code> 方法添加一下我们自定义的多租户拦截器：<code>TenantInterceptor</code>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>@Configuration</span></span>
<span class="line"><span>public class WebConfig implements WebMvcConfigurer {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void addInterceptors(InterceptorRegistry registry) {</span></span>
<span class="line"><span>        registry.addInterceptor(new TenantInterceptor());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springboot-支持" tabindex="-1"><a class="header-anchor" href="#springboot-支持"><span>SpringBoot 支持</span></a></h2><p>在 SpringBoot 项目下，直接通过 <code>@Configuration</code> 即可使用：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>@Configuration</span></span>
<span class="line"><span>public class MyConfiguration {</span></span>
<span class="line"><span>    @Bean</span></span>
<span class="line"><span>    public TenantFactory tenantFactory(){</span></span>
<span class="line"><span>        TenantFactory tenantFactory = new MyTenantFactory();</span></span>
<span class="line"><span>        return tenantFactory;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="忽略租户条件" tabindex="-1"><a class="header-anchor" href="#忽略租户条件"><span>忽略租户条件</span></a></h2><p>在某些场景下，在增删改查等操作，我们可能需要忽略租户条件， 此时可以使用TenantManager的<code>withoutTenantCondition</code>、<code>ignoreTenantCondition</code>、<code>restoreTenantCondition</code>三个方法。</p><p>推荐使用<code>withoutTenantCondition</code>方法，该方法使用了模版方法设计模式，保障忽略 tenant 条件并执行相关逻辑后自动恢复 tenant 条件。</p><p><code>withoutTenantCondition</code>方法实现如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public static &lt;T&gt; T withoutTenantCondition(Supplier&lt;T&gt; supplier) {</span></span>
<span class="line"><span>    try {</span></span>
<span class="line"><span>        ignoreTenantCondition();</span></span>
<span class="line"><span>        return supplier.get();</span></span>
<span class="line"><span>    } finally {</span></span>
<span class="line"><span>        restoreTenantCondition();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>TenantAccountMapper mapper = ...;</span></span>
<span class="line"><span>List&lt;TenantAccount&gt; tenantAccounts = TenantManager.withoutTenantCondition(mapper::selectAll);</span></span>
<span class="line"><span>System.out.println(tenantAccounts);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ignoreTenantCondition</code>和<code>restoreTenantCondition</code>方法需配套使用，推荐使用<code>try{...}finally{...}</code>模式，如下例所示。 使用这两个方法可以自主控制忽略 tenant 条件和恢复 tenant 条件的时机。 当忽略 tenant 条件和恢复 tenant 条件无法放在同一个方法中时，可以使用这两个方法。 此时需要仔细处理代码分支及异常，以防止忽略 tenant 条件后未恢复 tenant 条件，导致数据异常。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>try {</span></span>
<span class="line"><span>    TenantManager.ignoreTenantCondition();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //此处操作的数据不会带有 tenant_id 的条件</span></span>
<span class="line"><span>    accountMapper.selectListByQuery(...);</span></span>
<span class="line"><span>} finally {</span></span>
<span class="line"><span>    TenantManager.restoreTenantCondition();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，除此之外，<code>TenantFactory</code> 返回空数据，也会忽略 tenant 条件。</p><h2 id="全局配置多租户字段" tabindex="-1"><a class="header-anchor" href="#全局配置多租户字段"><span>全局配置多租户字段</span></a></h2><p>在 <code>MyBatis-Flex</code> 中，可以使用 <code>FlexGlobalConfig</code> 在 <code>MyBatis-Flex</code> 启动之前，指定项目中的多租户列的列名。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>FlexGlobalConfig.getDefaultConfig().setTenantColumn(&quot;tenant_id&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样就可以省略实体类属性上的 <code>@Column(tenantId = true)</code> 注解了。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class Account {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // @Column(tenantId = true)</span></span>
<span class="line"><span>    private Integer tenantId;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><h3 id="新增数据时注意事项" tabindex="-1"><a class="header-anchor" href="#新增数据时注意事项"><span>新增数据时注意事项</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>@Table(&quot;tb_article&quot;)</span></span>
<span class="line"><span>public class Article {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Id(keyType = KeyType.Auto)</span></span>
<span class="line"><span>    private Long id;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Column(tenantId = true)</span></span>
<span class="line"><span>    private Long tenantId;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以上的代码中，我们 <strong>新增</strong> Article 的时候，无论 <code>Article</code> 设置 <code>tenantId</code> 的值是什么，都会被 <code>TenantFactory</code> 返回的内容进行覆盖， 若 <code>TenantFactory</code> 返回多个 <code>tenantId</code>，则默认使用第一个为 <code>Article.tenantId</code> 赋值。若 <code>TenantFactory</code> 返回的内容为 null 或者 空数组， 则保留 <code>Article.tenantId</code> 设置的值。</p><p>以下是代码示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Article article = new Article();</span></span>
<span class="line"><span>article.setTenantId(100);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>articleMapper.insert(article);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>若 <code>TenantFactory</code> 返回的有值，<code>tenantId</code> 的值为 <code>TenantFactory</code> 返回数组的第一个值。</li><li>若 <code>TenantFactory</code> 返回的数组为 <code>null</code> 或者 空数组，<code>tenantId</code> 的值为 <code>100</code>；</li></ul><h3 id="删除、修改和查询注意事项" tabindex="-1"><a class="header-anchor" href="#删除、修改和查询注意事项"><span>删除、修改和查询注意事项</span></a></h3><p>当 Entity 被 <code>@Column(tenantId = true)</code> 标识租户列后，所有通过 <code>BaseMapper</code> 进行 删除、修改 和 查询，都会带上租户的条件。</p><p>比如根据 ID 删除，那么执行的 SQL 如下：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>DELETE FROM tb_article where id = ? and tenant_id = ?</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当 <code>TenantFactory</code> 返回多个租户 ID 的时候，执行的 SQL 如下：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>DELETE FROM tb_article where id = ? and tenant_id in (?, ?, ?)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>同理，修改和查询，也都会带有 <code>tenant_id</code> 条件。</p>`,59)]))}const c=n(l,[["render",t]]),r=JSON.parse('{"path":"/framework/mybatisflex/ad/zlv3mj7v/","title":"MyBatis-Flex多租户","lang":"zh-CN","frontmatter":{"title":"MyBatis-Flex多租户","createTime":"2025/08/27 10:02:33","permalink":"/framework/mybatisflex/ad/zlv3mj7v/"},"readingTime":{"minutes":4.93,"words":1478},"git":{"createdTime":1756736713000},"filePathRelative":"notes/framework/mybatisflex/ad/多租户.md","headers":[]}');export{c as comp,r as data};

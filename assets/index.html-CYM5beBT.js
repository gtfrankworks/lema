import{a as e,c as n,b as a,o as i}from"./app-ZQgO6-gU.js";const l={};function d(o,s){return i(),n("div",null,s[0]||(s[0]=[a(`<h2 id="启动mongod" tabindex="-1"><a class="header-anchor" href="#启动mongod"><span>启动mongod</span></a></h2><p>推荐使用 配置文件(mongod.conf) 的方式启动 mongod。</p><p>Linux系统下启动：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>mongod -f mongod.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Windows系统下启动 (cmd命令窗口，右键，以管理员身份运行)：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>mongod.exe -f mongod.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>若不使用配置文件启动 mongod，采用直接 mongod + 参数 的形式，则需要输入多项对应的参数，略显麻烦。</p></blockquote><p>mongod.conf 配置参考：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>#数据库目录设置</span></span>
<span class="line"><span>storage:</span></span>
<span class="line"><span>  dbPath: ../data</span></span>
<span class="line"><span>  journal:</span></span>
<span class="line"><span>    enabled: true</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>#日志相关设置</span></span>
<span class="line"><span>systemLog:</span></span>
<span class="line"><span>  destination: file</span></span>
<span class="line"><span>  logAppend: true</span></span>
<span class="line"><span>  path:  ../log/mongod.log</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#网络端口设置</span></span>
<span class="line"><span>#注意：</span></span>
<span class="line"><span>#1、建议一定要将默认的端口号 27017 修改为其他端口，防止被一些 mongodb 端口黑客扫描工具</span></span>
<span class="line"><span>#2、如果 bindIp 值为 0.0.0.0，则表示可以通过外网IP进行访问</span></span>
<span class="line"><span>#3、如果 bindIp 值为 127.0.0.1，则表示仅本机内部可访问</span></span>
<span class="line"><span>net:</span></span>
<span class="line"><span>  port: 27027</span></span>
<span class="line"><span>  bindIp: 127.0.0.1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#是否后台运行设置。 特别说明：windows系统不支持该项，不可以有此项设置</span></span>
<span class="line"><span>processManagement:</span></span>
<span class="line"><span>  fork: true</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#用户认证设置</span></span>
<span class="line"><span>security:</span></span>
<span class="line"><span>  authorization: enabled</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常见的启动失败解决办法" tabindex="-1"><a class="header-anchor" href="#常见的启动失败解决办法"><span>常见的启动失败解决办法</span></a></h4><p>当执行启动 mongod 命令后，如果顺利启动，则会收到类似以下信息：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>about to fork child process, waiting until server is ready for connections.</span></span>
<span class="line"><span>forked process: 30172</span></span>
<span class="line"><span>child process started successfully, parent exiting</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有看到 successfully 则可能是启动失败，以下为常见的2种启动失败原因和解决办法。</p><p><strong>第1种：第一次启动 mongod，启动前并未创建数据库和日志的目录</strong></p><p>一定要提前创建好存放数据和日志的目录，并确保目录有读写的权限，例如上面配置示例中的 ../data 和 ../log，若启动之前并未创建对应目录，则会启动失败，收到以下类似的错误提示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>about to fork child process, waiting until server is ready for connections.</span></span>
<span class="line"><span>forked process: 26716(这个数字每次是会变化的)</span></span>
<span class="line"><span>ERROR: child process failed, exited with 1</span></span>
<span class="line"><span>To see additional information in this output, start without the &quot;--fork&quot; option.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第2种：之前的 mongod 异常关闭</strong></p><p>还有另外一种情况，就是之前启动了 mongod 却未正常关闭，导致 mongod 处于一种 “异常关闭保护性被锁” 的状态，目的是为了保持在非正常关闭那一刻记录还未保持的数据(本人目前暂时的理解)，也会出现启动失败，这时解决方法是 找到 data 目录，删除里面的 mongod.lock 文件，再次执行启动命令即可。</p><h4 id="windows系统启动-mongod-的注意事项" tabindex="-1"><a class="header-anchor" href="#windows系统启动-mongod-的注意事项"><span>Windows系统启动 mongod 的注意事项</span></a></h4><ol><li><p>可以使用 mongo.exe 直接连接 mongod所创建的数据库，但是直接运行 mongo.exe 连接时无法设置连接参数，例如端口为27017，无法设置账户密码等。如果 mongod 创建的数据库端口不是 27017，则 mongo.exe 连接失败，窗口会自动关闭，此时只能通过 cmd 命令窗口来连接。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>./mongo.exe 127.0.0.1:27017 -u namexxx -p pwdxxx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者直接连接到某数据库，例如数据库名为dbnamexxx，代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>./mongo.exe 127.0.0.1:27017/dbnamexxx -u namexxx -p pwdxxx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>如果是希望连接远程服务器数据库，则把上述代码中的 IP 地址更换为服务器 IP</p></blockquote></li><li><p>windows系统命令窗口下执行 mongod -f mongod.conf 之后，即使成功启动，也不会有任何文字提示。</p></li><li><p>windows系统命令窗口不支持后台运行(fork:true)，因此 启动 mongod 之后，千万不要关闭当前 cmd 命令窗口，因为一旦关闭就相当于把 mongod 也关闭了。 想进行 mongo 命令连接 mongod，只能再新建一个 cmd 命令窗口进行操作。</p></li></ol><blockquote><p>特别注意：</p><ol><li>需要用 管理员账户 运行 cmd命令窗口</li><li>启动时，执行的代码是 <code>mongod.exe -f mongod.conf</code> ，一定要注意是 <code>mongod.exe</code></li></ol></blockquote><h4 id="结束mongod进程" tabindex="-1"><a class="header-anchor" href="#结束mongod进程"><span>结束mongod进程</span></a></h4><p>执行以下代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>killall -9 nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="安全架构" tabindex="-1"><a class="header-anchor" href="#安全架构"><span>安全架构</span></a></h2><p>MongoDB安全架构共有4大种类：</p><ol><li>认证</li><li>鉴权</li><li>审计</li><li>加密</li></ol><h2 id="认证" tabindex="-1"><a class="header-anchor" href="#认证"><span>认证</span></a></h2><h4 id="用户认证" tabindex="-1"><a class="header-anchor" href="#用户认证"><span>用户认证</span></a></h4><table><thead><tr><th>认证方式</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>用户名+密码</td><td>- MongoDB默认认证方式 <br> - SCRAM-SHA-1 哈希算法 <br> - 用户信息存于MongoDB本地数据库</td><td></td></tr><tr><td>证书方式</td><td>- X.509标注 <br> - 服务端需要提供证书文件启动 <br> - 客户端需要证书文件连接服务端 <br> - 证书有外部或内部CA颁发</td><td></td></tr><tr><td>LDAP外部认证</td><td>连接到外部LDAP服务器</td><td>企业版功能</td></tr><tr><td>Kerberos外部认证</td><td>连接到外部Kerberos服务器</td><td>企业版功能</td></tr></tbody></table><h4 id="集群认证" tabindex="-1"><a class="header-anchor" href="#集群认证"><span>集群认证</span></a></h4><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>Keyfile</td><td>将统一Keyfile文件拷贝到不同的节点，Keyfile就是一个字符串</td></tr><tr><td>X.509(更安全)</td><td>基于证书的认证模式，推荐不同的节点使用不同的证书</td></tr></tbody></table><h2 id="鉴权" tabindex="-1"><a class="header-anchor" href="#鉴权"><span>鉴权</span></a></h2><h4 id="基于角色的权限机制" tabindex="-1"><a class="header-anchor" href="#基于角色的权限机制"><span>基于角色的权限机制</span></a></h4><p>MongoDB授权基于角色的权限机制，不同的权限的用户对数据库的操作不同。 例如 DBA 可以创建用户、应用开发者可以插入数据、报表开发者可以读取数据。</p><h4 id="角色的组成" tabindex="-1"><a class="header-anchor" href="#角色的组成"><span>角色的组成</span></a></h4><p>角色分为2部分：</p><ol><li>可以执行的权限(Actions)，例如 插入，更新，创建等</li><li>可操作对象(Resources)，例如 某集合，数据库，分片等</li></ol><h4 id="内置角色及权限继承关系" tabindex="-1"><a class="header-anchor" href="#内置角色及权限继承关系"><span>内置角色及权限继承关系</span></a></h4><p>超级用户角色：root 、备份恢复相关、集群管理相关、全局管理相关、数据库管理相关、应用程序用户相关</p><p>同时MongoDB可以通过db.createRole()自定义角色，然后再通过 db.createUser(）添加角色实例账户。</p><h2 id="审计" tabindex="-1"><a class="header-anchor" href="#审计"><span>审计</span></a></h2><ul><li>数据库记录型系统通常使用审计监控数据库相关的活动，以及对一些可以的操作进行调查。</li><li>记录格式：JSON</li><li>记录方式：本地文件或syslog</li><li>记录内容：Schema change(DDL)、CRUD操作(DML)、用户认证</li></ul><blockquote><p>注意：<br> 审计功能需要收费的MongoDB企业版</p></blockquote><h2 id="加密" tabindex="-1"><a class="header-anchor" href="#加密"><span>加密</span></a></h2><h4 id="传输加密" tabindex="-1"><a class="header-anchor" href="#传输加密"><span>传输加密</span></a></h4><p>MongoDB 支持 TLS/SSL 来加密 MongoDB 的所有网络传输(客户端应用和服务端之间、内部复制集之间)。确保 MongoDB 网络传输仅由允许的客户端读取。</p><h4 id="落盘加密" tabindex="-1"><a class="header-anchor" href="#落盘加密"><span>落盘加密</span></a></h4><p>落盘加密流程：</p><ol><li>生成 master key，用来加密每一个数据库的 key。</li><li>生成每一个数据库的 key，用来加密各自的数据库。</li><li>基于生成的数据库 key 加密各个数据库中的数据。</li><li>Key 管理(只针对 master key，数据库 key 保存在数据库内部)。</li></ol><h4 id="字段级加密" tabindex="-1"><a class="header-anchor" href="#字段级加密"><span>字段级加密</span></a></h4><ul><li>单独文档字段通过自身秘钥加密</li><li>数据库只看见密文</li><li>优势： <ul><li>便捷：自动及透明</li><li>任务公开：简化基于服务的系统步骤，因为没有服务工程师能看到纯文本</li><li>合规：监管“被遗忘权”</li><li>快速：最小性能代偿</li></ul></li></ul><blockquote><p>注意：<br> 字段及加密需要运行在 MongoDB 4.2+ 版本</p></blockquote><h4 id="字段级加密查询流程" tabindex="-1"><a class="header-anchor" href="#字段级加密查询流程"><span>字段级加密查询流程</span></a></h4><ol><li>查询及响应验证通过的客户</li><li>MongoDB驱动程序</li><li>秘钥管理 拿到秘钥</li><li>MongoDB数据库 加密字段始终按密文储存、传输和检索</li><li>把结果返回给MongoDB驱动程序</li><li>MongoDB驱动程序通过秘钥管理器解密</li><li>把解密后的数据发送给客户端</li></ol><p>整个加密解密过程都在MongoDB客户端驱动程序进行。</p><h2 id="mongodb安全最佳实践" tabindex="-1"><a class="header-anchor" href="#mongodb安全最佳实践"><span>MongoDB安全最佳实践</span></a></h2><ol><li>启用身份认证：启用访问控制并强制执行身份认证，建议使用强密码。</li><li>权限控制：基于 Deny All 原则不多给多余权限。</li><li>加密和审计：启用传输加密、数据保护和活动审计。</li><li>网络加固：内网部署服务器，设置防火墙，操作系统设置。</li><li>遵循安全准则：遵循不同行业或地区安全标准合规性要求。</li></ol><h4 id="合理配置权限" tabindex="-1"><a class="header-anchor" href="#合理配置权限"><span>合理配置权限</span></a></h4><ul><li>创建管理员</li><li>使用复杂密码</li><li>不同用户不同账户</li><li>应用隔离</li><li>最小权限原则</li></ul><h4 id="启用加密" tabindex="-1"><a class="header-anchor" href="#启用加密"><span>启用加密</span></a></h4><ul><li>使用TLS或SSL作为传输协议</li><li>使用4.2版本的字段级加密对敏感字段加密</li><li>如有需要，使用企业版进行落盘加密</li><li>如有需要，使用企业版并启用审计日志</li></ul><h4 id="网络和操作系统加固" tabindex="-1"><a class="header-anchor" href="#网络和操作系统加固"><span>网络和操作系统加固</span></a></h4><ul><li><p>使用专用用户运行 MongoDB</p><ul><li>不建议在操作系统层使用 root 用户运行 MongoDB</li></ul></li><li><p>限制网络开放度</p><ul><li>通过防火墙，iptables 规则控制对 MongoDB的访问</li><li>使用VPN/VPCs 可以创建一个安全通道，MongoDB服务不应该直接暴露在互联网上</li><li>使用白名单列表限制允许访问的网段</li><li>使用bind_ip绑定一个具体地址</li><li>修改默认监听端口：27017</li></ul></li><li><p>使用安全配置选项运行 MongoDB</p><ul><li>如果不需要执行 JavaScript 脚本，使用 --noscripting 禁止脚本执行</li><li>如果使用老版本MongoDB，关闭 http 接口：net.http.enabled=False net.http.JSONPEnabled=False</li><li>如果使用老版本MongoDB，关闭 Rest API 接口：net.http.RESTInterfaceEnabled=False</li></ul></li></ul><h2 id="mongodb-启用认证" tabindex="-1"><a class="header-anchor" href="#mongodb-启用认证"><span>MongoDB 启用认证</span></a></h2><h4 id="第1种启用方式-命令方式-通过-auth-参数" tabindex="-1"><a class="header-anchor" href="#第1种启用方式-命令方式-通过-auth-参数"><span>第1种启用方式:命令方式，通过 --auth 参数</span></a></h4><h4 id="第2种启用方式-配置文件中-在-security-下添加-authorization-enabled" tabindex="-1"><a class="header-anchor" href="#第2种启用方式-配置文件中-在-security-下添加-authorization-enabled"><span>第2种启用方式：配置文件中，在 security 下添加 authorization:enabled</span></a></h4><p>重启 mongod ，并添加配置文件的参数</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>mongod -f mongod.conf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>再次强调：</p><ol><li>若是第1次启动 mongod，一定要提前创建好储存数据和日志的目录，否则会启动失败。</li><li>若是后续启动过程中遇到错误，可以尝试删除数据库目录中的 mongod.lock 文件后，再次执行启动。</li></ol></blockquote><p>重新通过 mongo 连接数据库。启用鉴权后，无密码可以登录，但是只能执行创建用户操作。</p><pre><code>mongo --host 127.0.0.1:27017
use admin
db.createUser({
  user:&quot;superuser&quot;,pwd:&quot;password&quot;,roles:[{role:&quot;root&quot;,db:&quot;admin&quot;}]
})
</code></pre><p>安全登录，执行如下命令查看认证机制</p><pre><code>mongo -u superuser -p password --authenticationDatabase admin
db.runCommand({getParameter：1，authenticationMechanisms:1})
</code></pre><p>从数据库中查看用户</p><pre><code>db.system.users.find()
</code></pre><blockquote><p>注意：<br> 结束mongod的进程代码为：pkill mongod</p></blockquote><h4 id="创建总管理员" tabindex="-1"><a class="header-anchor" href="#创建总管理员"><span>创建总管理员</span></a></h4><p>MongoDB默认没有总管理员账户，需要手工创建。</p><p>大致步骤为：</p><ol><li>mongod启动时 添加 --auth 参数 或在配置文件中 security 添加 authorization: enabled，确保mongod启动的数据库必须通过登录认证才可以连接。</li><li>使用 mongo 去连接 mongod数据库，注意：此时还未有任何一个管理账户，所以第一次连接时是不需要用户名和密码的。</li><li>进入 admin 集合中</li><li>使用 db.createUser() 来创建超级管理员账户名和密码，超级管理员角色对应的是 root。</li><li>若此时选择退出连接，那么下次再使用 mongo 连接数据库时，则必须使用超级管理员的用户名和密码，否则连接进去之后，也不会有任何权限，做任何操作都会提示操作失败，因为无权限。</li><li>有2种方式可以使用账户密码登录，第一种就是在 mongo 连接时添加参数 --username xxx --pwd xxx，第二种就 mongo 连接时先不添加用户名和密码参数，而是选择连接后，执行 db.auth(&quot;usenamexxxx&quot;,&quot;passwordxxxx)进行登录。</li><li>超级管理员账户创建或登录以后，先切换到一个新的项目集合中，再在该集合下创建其他不同权限的用户。</li></ol><p>创建超级管理员账户代码：</p><pre><code>use admin
db.createUser(
  {
    user:&quot;superuser&quot;,
    pwd:&quot;Xxxxxx&quot;,
    roles:[
      {
        role:&quot;root&quot;,
        db:&quot;admin&quot;
      }
    ]
  }
)
</code></pre><p>请注意一定要认真核对 上述命令中的 字段、括号、号码，确保都是正确匹配的，若不小心某些地方拼写错误，则会创建管理员失败，收到以下信息：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>uncaught exception: SyntaxError: missing ) after argument list :</span></span>
<span class="line"><span>@(shell):1:36</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>若是创建成功，则收到以下信息：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Successfully added user: {</span></span>
<span class="line"><span>	&quot;user&quot; : &quot;superuser&quot;,</span></span>
<span class="line"><span>	&quot;roles&quot; : [</span></span>
<span class="line"><span>		{</span></span>
<span class="line"><span>			&quot;role&quot; : &quot;root&quot;,</span></span>
<span class="line"><span>			&quot;db&quot; : &quot;admin&quot;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>	]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建项目管理员账户" tabindex="-1"><a class="header-anchor" href="#创建项目管理员账户"><span>创建项目管理员账户</span></a></h4><p>首先以超级管理员账户连接并登录 mongod 数据库中。</p><pre><code>mongo --username superuser --password Xxxxxx --authenticationDatabase admin --host 127.0.0.1:xxxx
</code></pre><p>连接成功之后，可以开始创建项目管理员账户。</p><p>假设项目对应的数据库名为 students、集合(collection)名为 mycollection，给该集合的管理员分配的角色身份为 dbOwner，用户名 admin。</p><blockquote><p>事实上集合名 mycollection 并不是必须现在就要创建的，重点是先创建数据库 students，至于集合名等到需要添加数据时再自动创建也可以。</p></blockquote><p>对应创建项目管理员代码如下：</p><pre><code>use mycollection
db.createUser(
  {
    user:&quot;admin&quot;,
    pwd:&quot;Xxxx&quot;,
    roles:[
      {
        role:&quot;dbOwner&quot;,
        db:&quot;students&quot;
      }
    ]
  }
)
</code></pre><p>此时若退出超级用户，使用新创建的 admin 登录连接数据库。</p><pre><code>mongo --username admin --password Xxxx --authenticationDatabase students --host 127.0.0.1:xxxx
</code></pre><p>进去之后，执行 show dbs，只会列出 students 这个集合，也就意味着该用户只能操作 students 这个集合，整个 MongoDB 的其他集合该用户都不可见。</p><h4 id="mongodb内置的不同权限级别的角色身份" tabindex="-1"><a class="header-anchor" href="#mongodb内置的不同权限级别的角色身份"><span>MongoDB内置的不同权限级别的角色身份</span></a></h4><p>1.数据库用户角色：read、readWrite<br> 2.数据库管理角色：dbAdmin、dbOwner、userAdmin<br> 3.集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager； 4.备份恢复角色：backup、restore<br> 5.所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase<br> 6.超级用户角色：root<br> 7.内部角色：__system(该角色是供内部不同复制集使用的，不要将该角色赋予人工管理账户)</p><blockquote><p>注意：再给用户设定角色时，尽可能只给最小权限的角色。</p></blockquote><h2 id="忘记密码" tabindex="-1"><a class="header-anchor" href="#忘记密码"><span>忘记密码</span></a></h2><h4 id="忘记普通管理账户密码" tabindex="-1"><a class="header-anchor" href="#忘记普通管理账户密码"><span>忘记普通管理账户密码</span></a></h4><p>可以通过最高权限管理账户，删除原有普通管理账户，重新添加。</p><h4 id="忘记最高管理者账户密码" tabindex="-1"><a class="header-anchor" href="#忘记最高管理者账户密码"><span>忘记最高管理者账户密码</span></a></h4><p>没有办法找回密码，只能重置账户和密码。</p><p>第1步：停止 mongod 服务：killall -9 mongod</p><p>第2步：取消密码登录 (删除或注释 mongod.conf 中的 security:authorization: enabled)</p><p>第3步：启动 mongod 服务：mongod -f mongod.conf</p><p>第4步：进入 admin 文档中，查看、删除 root 权限的账户</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>use admin</span></span>
<span class="line"><span>db.system.users.find()</span></span>
<span class="line"><span>db.system.users.remove({})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上面代码中 remove({}) 并没有设定查询条件，导致会将所有用户都删除。</p><p>正确的做法应该是 db.system.users.find() 查看所有账户信息，找到确认要删除的root权限账户的 &quot;user&quot;:&quot;xxxx&quot;，然后再执行精准删除：db.system.users.remove({&quot;user&quot;:&quot;xxxx&quot;})</p></blockquote><p>第5步：重新添加总管理员账户，db.createUser(...)</p><p>第6步：重新启用 mongod 账户认证 (添加或取消注释 mongod.conf 中的 security:authorization: enabled)</p><p>第7步：停止 mongod 服务：killall -9 mongod</p><p>第8步：启动 mongod 服务：mongod -f mongod.conf</p><blockquote><p>第7、8步骤 和 第1、3步骤是相同的。</p></blockquote><h2 id="在centos系统中-登录后提示的错误警告" tabindex="-1"><a class="header-anchor" href="#在centos系统中-登录后提示的错误警告"><span>在CentOS系统中，登录后提示的错误警告</span></a></h2><p>使用 mongo root 角色账户登录连接到 mongod 之后，默认会收到一些自动检测警告。</p><p>在本人的腾讯云 CentOS 7.6 中，收到的警告有：</p><ol><li><p>WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine</p></li><li><p>WARNING: You are running this process as the root user, which is not recommended.</p></li><li><p>WARNING: /sys/kernel/mm/transparent_hugepage/enabled is &#39;always&#39;. We suggest setting it to &#39;never&#39;</p></li><li><p>WARNING: /sys/kernel/mm/transparent_hugepage/defrag is &#39;always&#39;. We suggest setting it to &#39;never&#39;</p></li><li><p>WARNING: soft rlimits too low. rlimits set to 15072 processes, 100001 files. Number of processes should be at least</p></li></ol><p>第1条警告：建议系统文件使用 XFS 储存。<br> 第2条警告：不建议使用CentOS的root用户来启动MongoDB。因为root的权限太大，不安全。<br> 第3条和第4条警告：当前Transparent Huge Pages(THP)为开启状态，建议关闭Transparent Huge Pages(THP)。<br> 第5条警告：系统设定软件最大连接数太低，建议调高一些。</p><h4 id="修复这些问题" tabindex="-1"><a class="header-anchor" href="#修复这些问题"><span>修复这些问题</span></a></h4><h5 id="第1条和第2条" tabindex="-1"><a class="header-anchor" href="#第1条和第2条"><span>第1条和第2条</span></a></h5><p>很明确，暂时不作修改。</p><h5 id="第3条和第4条-修复方式" tabindex="-1"><a class="header-anchor" href="#第3条和第4条-修复方式"><span>第3条和第4条，修复方式：</span></a></h5><ol><li>找到 /etc/rc.d/rc.local 文件</li><li>编辑该文件，新增以下内容：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span> if test -f /sys/kernel/mm/transparent_hugepage/enabled; then</span></span>
<span class="line"><span> echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span></span>
<span class="line"><span> fi</span></span>
<span class="line"><span> if test -f /sys/kernel/mm/transparent_hugepage/defrag; then</span></span>
<span class="line"><span> echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span></span>
<span class="line"><span> fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>保存 rc.local</li><li>给该文件赋予可执行权力，执行代码：chmod +x /etc/rc.d/rc.local</li><li>立即重启系统：shutdown -r now</li></ol><p>系统重启之后，再次启动 mongod，再次使用 mongo 登录连接，第3和第4条警告就会消失。</p><h5 id="第5条-修复方式" tabindex="-1"><a class="header-anchor" href="#第5条-修复方式"><span>第5条，修复方式：</span></a></h5><ol><li>找到 /etc/security/limits.conf 文件</li><li>编辑改文件，新增以下内容：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>mongod soft nofile 64000</span></span>
<span class="line"><span>mongod hard nofile 64000</span></span>
<span class="line"><span>mongod soft nproc 32000</span></span>
<span class="line"><span>mongod hard nproc 32000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>保存 limits.conf</li><li>重启 mongod (不需要重启操作系统)</li></ol><blockquote><p>理论上还要看自身服务器的配置，如果配置并不高，那么即使把可用数量调得很高实际意义也不大。</p></blockquote>`,135)]))}const r=e(l,[["render",d]]),p=JSON.parse('{"path":"/nosqldb/mongodb/944ifyqp/","title":"MongoDB安全机制","lang":"zh-CN","frontmatter":{"title":"MongoDB安全机制","createTime":"2025/08/25 14:02:08","permalink":"/nosqldb/mongodb/944ifyqp/"},"readingTime":{"minutes":13.51,"words":4053},"git":{"createdTime":1756736713000},"filePathRelative":"notes/nosqldb/mongodb/MongoDB安全机制.md","headers":[]}');export{r as comp,p as data};

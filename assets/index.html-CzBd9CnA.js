import{a as l,c as i,b as r,o as e}from"./app-ZQgO6-gU.js";const s={};function d(o,t){return e(),i("div",null,t[0]||(t[0]=[r('<p>Redis（Remote Dictionary Server）是一个 <strong>开源的、基于内存的键值对（Key-Value）NoSQL 数据库</strong>，由 Salvatore Sanfilippo 在 2009 年开发。 它以 <strong>高性能、丰富的数据结构、灵活的功能</strong> 而闻名，常用于缓存、消息队列、会话存储、排行榜、实时统计等场景。</p><p>Redis 官方定义它为：</p><ul><li><strong>内存数据库</strong>（数据大部分存放在内存中，支持持久化到磁盘）。</li><li><strong>键值存储</strong>（支持多种数据结构，而不仅仅是字符串）。</li><li><strong>高性能存储</strong>（单机 QPS 可达 10 万级别）。</li></ul><hr><h1 id="二、redis-的特点" tabindex="-1"><a class="header-anchor" href="#二、redis-的特点"><span>二、Redis 的特点</span></a></h1><ol><li><strong>高性能</strong><ul><li>内存存储 + 高效的 IO 模型（单线程 + 多路复用）。</li><li>读写速度非常快，延迟通常在毫秒甚至微秒级。</li></ul></li><li><strong>多数据结构支持</strong><ul><li>不仅是 String，还支持 List、Hash、Set、Sorted Set、Bitmap、HyperLogLog、Stream 等。</li></ul></li><li><strong>丰富的功能</strong><ul><li>发布订阅（Pub/Sub）、事务、Lua 脚本、分布式锁、地理位置计算、消息队列。</li></ul></li><li><strong>持久化机制</strong><ul><li>RDB（快照持久化）</li><li>AOF（追加日志持久化）</li><li>可结合使用，保证高性能与数据安全。</li></ul></li><li><strong>高可用与分布式</strong><ul><li><strong>主从复制</strong>（master-slave）</li><li><strong>哨兵模式</strong>（Sentinel，高可用）</li><li><strong>集群模式</strong>（Cluster，支持水平扩展）。</li></ul></li><li><strong>简单易用</strong><ul><li>命令直观（如 <code>SET key value</code>、<code>GET key</code>）。</li><li>多种客户端支持（Java、Python、Go、C#、Node.js 等）。</li></ul></li></ol><hr><h1 id="三、redis-的数据类型" tabindex="-1"><a class="header-anchor" href="#三、redis-的数据类型"><span>三、Redis 的数据类型</span></a></h1><table><thead><tr><th>数据类型</th><th>描述</th><th>常见应用</th></tr></thead><tbody><tr><td>String</td><td>字符串，最大 512MB</td><td>缓存、计数器、Session</td></tr><tr><td>Hash</td><td>键值对集合（类似小型字典）</td><td>用户信息、对象存储</td></tr><tr><td>List</td><td>双向链表</td><td>消息队列、时间线</td></tr><tr><td>Set</td><td>无序集合，自动去重</td><td>标签系统、好友关系</td></tr><tr><td>Sorted Set (ZSet)</td><td>有序集合，按分数排序</td><td>排行榜、延时队列</td></tr><tr><td>Bitmap</td><td>位存储</td><td>用户签到、状态标记</td></tr><tr><td>HyperLogLog</td><td>基数统计，近似去重</td><td>UV 统计</td></tr><tr><td>Stream</td><td>消息流</td><td>消息队列、日志流</td></tr></tbody></table><hr><h1 id="四、redis-常见应用场景" tabindex="-1"><a class="header-anchor" href="#四、redis-常见应用场景"><span>四、Redis 常见应用场景</span></a></h1><ol><li><strong>缓存系统</strong><ul><li>加快数据库查询响应速度，减轻数据库压力。</li><li>典型例子：热点数据缓存。</li></ul></li><li><strong>会话存储（Session Store）</strong><ul><li>在分布式系统中共享用户登录状态。</li></ul></li><li><strong>计数器/排行榜</strong><ul><li>实时计算网站访问量、视频播放量。</li><li>排行榜应用（如游戏排名）。</li></ul></li><li><strong>分布式锁</strong><ul><li>基于 <code>SETNX</code>、<code>Redlock</code> 算法实现分布式锁，保证数据一致性。</li></ul></li><li><strong>消息队列</strong><ul><li>使用 List、Pub/Sub、Stream 实现轻量级消息队列。</li></ul></li><li><strong>地理位置应用</strong><ul><li>GEO 命令支持经纬度存储和半径查询，用于打车、外卖场景。</li></ul></li></ol><hr><h1 id="五、redis-与其他数据库比较" tabindex="-1"><a class="header-anchor" href="#五、redis-与其他数据库比较"><span>五、Redis 与其他数据库比较</span></a></h1><ul><li><strong>与 MySQL（关系型数据库）</strong><ul><li>MySQL 更适合持久化、复杂查询；</li><li>Redis 适合缓存、高并发、快速存取。</li></ul></li><li><strong>与 Memcached（内存缓存数据库）</strong><ul><li>Memcached 只支持简单的 Key-Value；</li><li>Redis 支持更多数据结构、持久化和高可用集群。</li></ul></li></ul><hr><h1 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结"><span>六、总结</span></a></h1><p>Redis = <strong>内存 + 高速 + 多数据结构 + 高可用 + 可持久化</strong> 它的定位：既可以是 <strong>缓存</strong>，也可以作为 <strong>NoSQL 数据库</strong> 或 <strong>分布式组件</strong>，在现代互联网架构中是核心基础设施。</p>',18)]))}const a=l(s,[["render",d]]),g=JSON.parse('{"path":"/nosqldb/redises/v8rkaugl/","title":"Redis的简介","lang":"zh-CN","frontmatter":{"title":"Redis的简介","createTime":"2025/08/26 10:11:50","permalink":"/nosqldb/redises/v8rkaugl/"},"readingTime":{"minutes":2.63,"words":790},"git":{"createdTime":1756736713000},"filePathRelative":"notes/nosqldb/redises/README.md","headers":[]}');export{a as comp,g as data};

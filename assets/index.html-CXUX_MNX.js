import{a as n,c as a,b as e,o as i}from"./app-ZQgO6-gU.js";const l={};function p(r,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h3 id="_1-int-a-10是原子操作吗" tabindex="-1"><a class="header-anchor" href="#_1-int-a-10是原子操作吗"><span>1.int a=10是原子操作吗？</span></a></h3><p>是的。</p><p>注意点：</p><p>i++(或++i)是非原子操作，i++是一个多步操作，而且是可以被中断的。i++可以被分割成3步，第一步读取i的值，第二步计算i+1；第三部将最终值赋值给i。</p><ul><li>int a = b;不是原子操作。从语法的级别来看，这是也是一条语句，是原子的；但是从实际执行的二进制指令来看，由于现代计算机CPU架构体系的限制，数据不可以直接从内存搬运到另外一块内存，必须借助寄存器中断，这条语句一般对应两条计算机指令，即将变量b的值搬运到某个寄存器（如eax）中，再从该寄存器搬运到变量a的内存地址：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>mov eax, dword ptr b  </span></span>
<span class="line"><span>mov dword ptr a, eax</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>既然是两条指令，那么多个线程在执行这两条指令时，某个线程可能会在第一条指令执行完毕后被剥夺CPU时间片，切换到另外一个线程而产生不确定的情况。</p><h3 id="_2-innodb支持全文索引吗" tabindex="-1"><a class="header-anchor" href="#_2-innodb支持全文索引吗"><span>2.innodb支持全文索引吗？</span></a></h3><p>5.6版本之后InnoDB存储引擎开始支持全文索引，5.7版本之后通过使用ngram插件开始支持中文。之前仅支持英文，因为是通过空格作为分词的分隔符，对于中文来说是不合适的。MySQL允许在char、varchar、text类型上建立全文索引。</p><h3 id="_3-innodb支持表锁吗" tabindex="-1"><a class="header-anchor" href="#_3-innodb支持表锁吗"><span>3.innodb支持表锁吗？</span></a></h3><p>支持，补充：普通的增删改 是表锁，加入索引的增删改是行锁，执行查询时不加任何锁的。</p><h3 id="_4-http短连接怎么变成长连接。" tabindex="-1"><a class="header-anchor" href="#_4-http短连接怎么变成长连接。"><span>4.HTTP短连接怎么变成长连接。</span></a></h3><p>在header中加入 --Connection:keep-alive。</p><h3 id="_5-调用yeild-会阻塞吗" tabindex="-1"><a class="header-anchor" href="#_5-调用yeild-会阻塞吗"><span>5.调用yeild（）会阻塞吗？</span></a></h3><p>阻塞指的是暂停一个线程的执行以等待某个条件发生（如某资源就绪）。</p><p>yield() 方法：yield() 使得线程放弃当前分得的 CPU 时间，但是不使线程阻塞，即线程仍处于可执行状态，随时可能再次分得 CPU 时间。调用 yield() 的效果等价于调度程序认为该线程已执行了足够的时间从而转到另一个线程。yield()只是使当前线程重新回到可执行状态，所以执行yield()的线程有可能在进入到可执行状态后马上又被执行。sleep()可使优先级低的线程得到执行的机会，当然也可以让同优先级和高优先级的线程有执行的机会；yield()只能使同优先级的线程有执行的机会。</p><h3 id="_6-虚拟机栈是线程共享的吗" tabindex="-1"><a class="header-anchor" href="#_6-虚拟机栈是线程共享的吗"><span>6.虚拟机栈是线程共享的吗？</span></a></h3><p>不是。</p><p>JVM初始运行的时候都会分配好 Method Area（方法区） 和Heap（堆） ，而JVM 每遇到一个线程，就为其分配一个 Program Counter Register（程序计数器） , VM Stack（虚拟机栈）和Native Method Stack （本地方法栈）， 当线程终止时，三者（虚拟机栈，本地方法栈和程序计数器）所占用的内存空间也会被释放掉。这也是为什么我把内存区域分为线程共享和非线程共享的原因，非线程共享的那三个区域的生命周期与所属线程相同，而线程共享的区域与JAVA程序运行的生命周期相同，所以这也是系统垃圾回收的场所只发生在线程共享的区域（实际上对大部分虚拟机来说只发生在Heap上）的原因。</p><p>栈区:</p><p>每个线程包含一个栈区，栈中只保存基础数据类型的值（比如int i=1中1就是基础类型的对象）和对象的引用以及基础数据的引用</p><p>每个栈中的数据(基础数据类型和对象引用)都是私有的，其他栈不能访问。</p><p>栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)。</p><p>堆区:</p><p>存储的全部是对象，每个对象都包含一个与之对应的class的信息。(class的目的是得到操作指令) jvm只有一个堆区(heap)被所有线程共享，堆中不存放基本类型和对象引用，只存放对象本身 。</p><p>方法区:</p><p>又叫静态区，跟堆一样，被所有的线程共享。方法区包含所有的class和static变量。</p><p>方法区中包含的都是在整个程序中永远唯一的元素，如class，static变量。（两者区别为堆区存放new出来的对象信息,方法区存放本身就具有的类信息）</p><h3 id="_7-常量存放在jvm的那个区域" tabindex="-1"><a class="header-anchor" href="#_7-常量存放在jvm的那个区域"><span>7.常量存放在JVM的那个区域？</span></a></h3><p>方法区: 又叫静态区，跟堆一样，被所有的线程共享。它用于存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p>window.postMessage() 方法可以安全地实现跨源通信。通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为https），端口号（443为https的默认值），以及主机 (两个页面的模数 Document.domain设置为相同的值) 时，这两个脚本才能相互通信。window.postMessage() 方法提供了一种受控机制来规避此限制，只要正确的使用，这种方法就很安全。</p><h3 id="_8-所有的对象都分配到堆中吗" tabindex="-1"><a class="header-anchor" href="#_8-所有的对象都分配到堆中吗"><span>8.所有的对象都分配到堆中吗？</span></a></h3><p>答：不一定。</p><h3 id="_9-copyonwritearraylist是线程安全的吗" tabindex="-1"><a class="header-anchor" href="#_9-copyonwritearraylist是线程安全的吗"><span>9.CopyOnWriteArrayList是线程安全的吗？</span></a></h3><p>答：是的。</p><p>CopyOnWriteArrayList使用了一种叫写时复制的方法，当有新元素添加到CopyOnWriteArrayList时，先从原有的数组中拷贝一份出来，然后在新的数组做写操作，写完之后，再将原来的数组引用指向到新数组。创建新数组，并往新数组中加入一个新元素,这个时候，array这个引用仍然是指向原数组的。​​​​​​​当元素在新数组添加成功后，将array这个引用指向新数组。</p><p>CopyOnWriteArrayList的整个add操作都是在锁的保护下进行的。这样做是为了避免在多线程并发add的时候，复制出多个副本出来,把数据搞乱了，导致最终的数组数据不是我们期望的。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public boolean add(E e) {</span></span>
<span class="line"><span>    //1、先加锁</span></span>
<span class="line"><span>    final ReentrantLock lock = this.lock;</span></span>
<span class="line"><span>    lock.lock();</span></span>
<span class="line"><span>    try {</span></span>
<span class="line"><span>        Object elements = getArray();</span></span>
<span class="line"><span>        int len = elements.length;</span></span>
<span class="line"><span>        //2、拷贝数组</span></span>
<span class="line"><span>        Object newElements = Arrays.copyOf(elements, len + 1);</span></span>
<span class="line"><span>        //3、将元素加入到新数组中</span></span>
<span class="line"><span>        newElementslen = e;</span></span>
<span class="line"><span>        //4、将array引用指向到新数组</span></span>
<span class="line"><span>        setArray(newElements);</span></span>
<span class="line"><span>        return true;</span></span>
<span class="line"><span>    } finally {</span></span>
<span class="line"><span>        //5、解锁</span></span>
<span class="line"><span>        lock.unlock();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于所有的写操作都是在新数组进行的，这个时候如果有线程并发的写，则通过锁来控制，如果有线程并发的读，则分几种情况：</p><p>如果写操作未完成，那么直接读取原数组的数据；</p><p>如果写操作完成，但是引用还未指向新数组，那么也是读取原数组数据；</p><p>如果写操作完成，并且引用已经指向了新的数组，那么直接从新数组中读取数据。</p><p>可见，CopyOnWriteArrayList的读操作是可以不用加锁的。</p><p>CopyOnWriteArrayList 有几个缺点：</p><p>由于写操作的时候，需要拷贝数组，会消耗内存，</p><p>如果原数组的内容比较多的情况下，可能导致young gc或者full gc</p><p>不能用于实时读的场景，像拷贝数组、新增元素都需要时间，</p><p>所以调用一个set操作后，读取到数据可能还是旧的,</p><p>虽然CopyOnWriteArrayList 能做到最终一致性,但是还是没法满足实时性要求；</p><p>CopyOnWriteArrayList 合适读多写少的场景，不过这类慎用</p><p>因为谁也没法保证CopyOnWriteArrayList 到底要放置多少数据，</p><p>万一数据稍微有点多，每次add/set都要重新复制数组，这个代价实在太高昂了。</p><p>在高性能的互联网应用中，这种操作分分钟引起故障。</p><p>CopyOnWriteArrayList透露的思想</p><p>读写分离，读和写分开 最终一致性 使用另外开辟空间的思路，来解决并发冲突​​​​​​​</p><h3 id="_10-数组越界问题" tabindex="-1"><a class="header-anchor" href="#_10-数组越界问题"><span>10.数组越界问题</span></a></h3><p>一般来讲我们使用时，会用一个线程向容器中添加元素，一个线程来读取元素，而读取的操作往往更加频繁。写操作加锁保证了线程安全，读写分离保证了读操作的效率，简直完美。</p><p>如果这时候有第三个线程进行删除元素操作，读线程去读取容器中最后一个元素，读之前的时候容器大小为i，当去读的时候删除线程突然删除了一个元素，这个时候容器大小变为了i-1，读线程仍然去读取第i个元素，这时候就会发生数组越界。</p><p>测试一下，首先向CopyOnWriteArrayList里面塞10000个测试数据，启动两个线程，一个不断的删除元素，一个不断的读取容器中最后一个数据。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public void test(){</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    for(int i = 0; i&lt;10000; i++){</span></span>
<span class="line"><span>        list.add(&quot;string&quot; + i);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    new Thread(new Runnable() {</span></span>
<span class="line"><span>        @Override</span></span>
<span class="line"><span>        public void run() {</span></span>
<span class="line"><span>            while (true) {</span></span>
<span class="line"><span>                if (list.size() &gt; 0) {</span></span>
<span class="line"><span>                    String content = list.get(list.size() - 1);</span></span>
<span class="line"><span>                }else {</span></span>
<span class="line"><span>                    break;</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }).start();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    new Thread(new Runnable() {</span></span>
<span class="line"><span>        @Override</span></span>
<span class="line"><span>        public void run() {</span></span>
<span class="line"><span>            while (true) {</span></span>
<span class="line"><span>                if(list.size() &lt;= 0){</span></span>
<span class="line"><span>                    break;</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>                list.remove(0);</span></span>
<span class="line"><span>                try {</span></span>
<span class="line"><span>                    Thread.sleep(10);</span></span>
<span class="line"><span>                } catch (InterruptedException e) {</span></span>
<span class="line"><span>                    e.printStackTrace();</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }).start();</span></span>
<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-java接口可以多继承吗" tabindex="-1"><a class="header-anchor" href="#_11-java接口可以多继承吗"><span>11. Java接口可以多继承吗？</span></a></h3><p><strong>答：可以。</strong> Java接口支持多继承，一个接口可以继承多个接口，例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>interface A {}</span></span>
<span class="line"><span>interface B {}</span></span>
<span class="line"><span>interface C extends A, B {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_12-byte-300-byte-100-short-200" tabindex="-1"><a class="header-anchor" href="#_12-byte-300-byte-100-short-200"><span>12. <code>(byte)300 == (byte)100 + (short)200</code>?</span></a></h3><p><strong>答：<code>false</code></strong> 解释：</p><ul><li><code>(byte)300</code> → 300 % 256 = 44</li><li><code>(byte)100 + (short)200</code> → 100 + 200 = 300 → 自动类型提升为 <code>int</code>，300 ≠ 44 所以结果是 <code>false</code>。</li></ul><hr><h3 id="_13-操作系统具有进程管理、存储管理、文件管理和设备管理的功能-下列描述哪项不正确-a" tabindex="-1"><a class="header-anchor" href="#_13-操作系统具有进程管理、存储管理、文件管理和设备管理的功能-下列描述哪项不正确-a"><span>13. 操作系统具有进程管理、存储管理、文件管理和设备管理的功能，下列描述哪项不正确？（A）</span></a></h3><p><strong>答：具体选项未给出，但不正确的描述一般是“操作系统不能管理硬件或不属于OS核心功能”的。</strong> 核心功能包括：进程管理、内存管理、文件系统管理、设备管理和安全管理。</p><hr><h3 id="_14-this-和-super-正确的是-c" tabindex="-1"><a class="header-anchor" href="#_14-this-和-super-正确的是-c"><span>14. <code>this</code> 和 <code>super</code> 正确的是（C）：</span></a></h3><p><strong>答：</strong></p><ul><li><code>this</code> 表示当前对象引用，可用于调用成员变量、方法、构造器。</li><li><code>super</code> 表示父类引用，可用于访问父类被覆盖的变量或方法，也可调用父类构造器。 常见正确用法：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>class Parent {</span></span>
<span class="line"><span>    int a;</span></span>
<span class="line"><span>    void show() {}</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class Child extends Parent {</span></span>
<span class="line"><span>    int a;</span></span>
<span class="line"><span>    void show() {</span></span>
<span class="line"><span>        super.show(); // 调用父类方法</span></span>
<span class="line"><span>        System.out.println(super.a); // 调用父类成员变量</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_15-引用计数法是-jvm-gc-算法吗" tabindex="-1"><a class="header-anchor" href="#_15-引用计数法是-jvm-gc-算法吗"><span>15. 引用计数法是 JVM GC 算法吗？</span></a></h3><p><strong>答：不是。</strong></p><ul><li>JVM 中常用的垃圾回收算法是 <strong>标记-清除</strong>、<strong>标记-整理</strong>、<strong>复制算法</strong>、<strong>分代收集</strong>等。</li><li><strong>引用计数法</strong>存在循环引用问题，不被 HotSpot JVM 使用。</li></ul><hr><h3 id="_16-能在-try-catch-finally-的-finally-中再次抛出异常吗" tabindex="-1"><a class="header-anchor" href="#_16-能在-try-catch-finally-的-finally-中再次抛出异常吗"><span>16. 能在 <code>try{}catch(){}finally{}</code> 的 finally 中再次抛出异常吗？</span></a></h3><p><strong>答：能，但会覆盖 try/catch 中的异常</strong> 示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>try {</span></span>
<span class="line"><span>    int a = 1 / 0;</span></span>
<span class="line"><span>} catch(Exception e) {</span></span>
<span class="line"><span>    System.out.println(&quot;catch&quot;);</span></span>
<span class="line"><span>} finally {</span></span>
<span class="line"><span>    throw new RuntimeException(&quot;finally exception&quot;);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出：程序抛出 finally 的异常，原来的异常被覆盖。</li></ul><hr><h3 id="_17-http-2-新特性" tabindex="-1"><a class="header-anchor" href="#_17-http-2-新特性"><span>17. HTTP/2 新特性</span></a></h3><ul><li>二进制分帧（Binary Framing）</li><li>多路复用（Multiplexing）</li><li>头部压缩（HPACK）</li><li>服务器推送（Server Push）</li><li>请求优先级（Stream Priority）</li></ul><hr><h3 id="_18-索引可以将随机-io-变成顺序-io-吗" tabindex="-1"><a class="header-anchor" href="#_18-索引可以将随机-io-变成顺序-io-吗"><span>18. 索引可以将随机 IO 变成顺序 IO 吗？</span></a></h3><p><strong>答：不能完全转化，但可以优化 IO 访问</strong></p><ul><li>索引可以减少磁盘扫描范围，但数据实际在磁盘上仍可能是随机分布，顺序访问不能保证。</li></ul><hr><h3 id="_19-transient-修饰的变量是临时变量吗" tabindex="-1"><a class="header-anchor" href="#_19-transient-修饰的变量是临时变量吗"><span>19. <code>transient</code> 修饰的变量是临时变量吗？</span></a></h3><p><strong>答：不是临时变量</strong></p><ul><li><code>transient</code> 修饰的变量在序列化时不会被持久化。</li><li>作用是告诉 JVM <strong>不要序列化该字段</strong>。</li></ul><hr><h3 id="_20-高、中、低三级调度" tabindex="-1"><a class="header-anchor" href="#_20-高、中、低三级调度"><span>20. 高、中、低三级调度</span></a></h3><ul><li><strong>高级调度（长程调度）</strong>：决定哪些作业进入内存（Job → Ready Queue）</li><li><strong>中级调度（中程调度）</strong>：在内存与外存之间调度（挂起/唤醒进程）</li><li><strong>低级调度（短程调度）</strong>：CPU 调度，决定哪个进程获得 CPU</li></ul><hr><h3 id="_21-tcp-第四次挥手后为什么要等待-2msl" tabindex="-1"><a class="header-anchor" href="#_21-tcp-第四次挥手后为什么要等待-2msl"><span>21. TCP 第四次挥手后为什么要等待 2MSL？</span></a></h3><ul><li><strong>MSL（Maximum Segment Lifetime）</strong> 是 TCP 报文的最长生存时间</li><li>等待 2MSL 是为了确保 <strong>最后的 ACK 报文能被对方收到</strong>，并保证网络中不存在旧的重复报文影响新连接。</li></ul><hr><h3 id="_22-进程状态及简述" tabindex="-1"><a class="header-anchor" href="#_22-进程状态及简述"><span>22. 进程状态及简述</span></a></h3><p>常见状态：</p><ul><li><strong>新建（New）</strong>：进程正在创建</li><li><strong>就绪（Ready）</strong>：等待 CPU 分配</li><li><strong>运行（Running）</strong>：CPU 正在执行</li><li><strong>阻塞/等待（Blocked/Waiting）</strong>：等待 I/O 或事件</li><li><strong>终止（Terminated）</strong>：进程执行完毕</li></ul><hr><h3 id="_23-创建-nio-客户端代码" tabindex="-1"><a class="header-anchor" href="#_23-创建-nio-客户端代码"><span>23. 创建 NIO 客户端代码</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>import java.net.InetSocketAddress;</span></span>
<span class="line"><span>import java.nio.ByteBuffer;</span></span>
<span class="line"><span>import java.nio.channels.SocketChannel;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class NIOClient {</span></span>
<span class="line"><span>    public static void main(String[] args) throws Exception {</span></span>
<span class="line"><span>        SocketChannel socketChannel = SocketChannel.open();</span></span>
<span class="line"><span>        socketChannel.connect(new InetSocketAddress(&quot;localhost&quot;, 8080));</span></span>
<span class="line"><span>        socketChannel.configureBlocking(false);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        ByteBuffer buffer = ByteBuffer.wrap(&quot;Hello NIO Server&quot;.getBytes());</span></span>
<span class="line"><span>        socketChannel.write(buffer);</span></span>
<span class="line"><span>        buffer.clear();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        socketChannel.close();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_24-获取一个类的-class-实例的方法" tabindex="-1"><a class="header-anchor" href="#_24-获取一个类的-class-实例的方法"><span>24. 获取一个类的 class 实例的方法</span></a></h3><ol><li><strong>通过类名的 <code>.class</code> 获取</strong>：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Class&lt;String&gt; c1 = String.class;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol><li><strong>通过对象的 <code>getClass()</code> 获取</strong>：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>String s = &quot;hello&quot;;</span></span>
<span class="line"><span>Class&lt;?&gt; c2 = s.getClass();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>通过 <code>Class.forName()</code> 获取</strong>：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Class&lt;?&gt; c3 = Class.forName(&quot;java.lang.String&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol><li><strong>通过类加载器获取</strong>：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>ClassLoader loader = Thread.currentThread().getContextClassLoader();</span></span>
<span class="line"><span>Class&lt;?&gt; c4 = loader.loadClass(&quot;java.lang.String&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,119)]))}const t=n(l,[["render",p]]),c=JSON.parse('{"path":"/bigcompany/504kbuwq/","title":"阿里巴巴java工程师","lang":"zh-CN","frontmatter":{"title":"阿里巴巴java工程师","createTime":"2025/08/21 12:40:09","permalink":"/bigcompany/504kbuwq/"},"readingTime":{"minutes":10.8,"words":3240},"git":{"createdTime":1756736713000},"filePathRelative":"notes/bigcompany/company/阿里巴巴java工程师.md","headers":[]}');export{t as comp,c as data};

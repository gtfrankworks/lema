import{a as s,c as e,b as a,o as i}from"./app-ZQgO6-gU.js";const l={};function t(r,n){return i(),e("div",null,n[0]||(n[0]=[a(`<p>Maven 可以理解为 <strong>一个 Java 项目的构建管理工具</strong>，也是目前最常用的构建工具之一（特别是在 Java 后端开发中）。它不仅仅是一个“打包工具”，还涉及 <strong>依赖管理、构建流程自动化、项目生命周期管理</strong> 等。下面我给你分层次介绍。</p><hr><h2 id="一、maven-的介绍" tabindex="-1"><a class="header-anchor" href="#一、maven-的介绍"><span>一、Maven 的介绍</span></a></h2><ul><li><strong>全称</strong>：Apache Maven</li><li><strong>开发者</strong>：Apache 软件基金会</li><li><strong>定位</strong>：一个 <strong>项目管理和构建工具</strong>，主要服务于 Java 项目，但也可以扩展到其他语言。</li><li><strong>配置核心</strong>：<code>pom.xml</code>（Project Object Model，项目对象模型），用来描述项目的基本信息、依赖、插件以及构建配置。</li></ul><hr><h2 id="二、maven-的主要作用" tabindex="-1"><a class="header-anchor" href="#二、maven-的主要作用"><span>二、Maven 的主要作用</span></a></h2><ol><li><p><strong>依赖管理</strong></p><ul><li>项目需要用到第三方库（比如 Spring、MyBatis、JUnit 等），Maven 可以从 <strong>中央仓库</strong> 自动下载，不需要手动找 jar 包。</li><li>可以管理依赖的版本、传递依赖（A 依赖 B，B 依赖 C，Maven 会自动把 C 也下载下来）。</li></ul><p>✅ 示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;3.4.0&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>构建管理</strong></p><ul><li>包括 <strong>编译、测试、打包、部署</strong> 等操作，都可以通过一行命令完成（<code>mvn clean install</code>）。</li><li>解决了开发中 <strong>环境不一致</strong>、手动打包繁琐 的问题。</li></ul></li><li><p><strong>统一项目结构</strong></p><ul><li>Maven 推荐的标准目录结构，使得不同开发者之间的项目更容易理解。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>src/</span></span>
<span class="line"><span>  main/</span></span>
<span class="line"><span>    java/        # Java 源代码</span></span>
<span class="line"><span>    resources/   # 配置文件</span></span>
<span class="line"><span>  test/</span></span>
<span class="line"><span>    java/        # 测试代码</span></span>
<span class="line"><span>target/          # 编译、打包后的文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>项目生命周期管理</strong></p><ul><li>Maven 定义了项目从 <strong>清理 → 编译 → 测试 → 打包 → 安装 → 部署</strong> 的完整流程。</li><li>常用命令： <ul><li><code>mvn clean</code>：清理</li><li><code>mvn compile</code>：编译</li><li><code>mvn test</code>：执行测试</li><li><code>mvn package</code>：打包（生成 jar/war）</li><li><code>mvn install</code>：安装到本地仓库</li><li><code>mvn deploy</code>：部署到远程仓库</li></ul></li></ul></li><li><p><strong>插件机制</strong></p><ul><li>Maven 本身只是个“框架”，具体功能通过插件实现。</li><li>例如： <ul><li><code>maven-compiler-plugin</code> → 负责编译</li><li><code>maven-surefire-plugin</code> → 负责运行测试</li><li><code>spring-boot-maven-plugin</code> → 打包 Spring Boot 可运行 jar</li></ul></li></ul></li><li><p><strong>支持多模块项目</strong></p><ul><li>大型项目常常拆分为多个子模块，Maven 可以集中管理父项目与子模块之间的依赖和版本。</li></ul></li></ol><hr><h2 id="三、总结" tabindex="-1"><a class="header-anchor" href="#三、总结"><span>三、总结</span></a></h2><p>👉 一句话概括： <strong>Maven 是 Java 项目的“全能管家”，它帮你管 jar 包、管项目结构、管构建流程，让开发者专注于写业务代码，而不是花时间在环境配置和打包上。</strong></p>`,10)]))}const d=s(l,[["render",t]]),p=JSON.parse('{"path":"/tools/maven/","title":"Maven的介绍","lang":"zh-CN","frontmatter":{"title":"Maven的介绍","createTime":"2025/08/20 13:03:07","permalink":"/tools/maven/"},"readingTime":{"minutes":2.09,"words":626},"git":{"createdTime":1756736713000},"filePathRelative":"notes/tools/maven/README.md","headers":[]}');export{d as comp,p as data};

import{a as e,c as s,b as p,o as i}from"./app-ZQgO6-gU.js";const n={};function t(l,a){return i(),s("div",null,a[0]||(a[0]=[p(`<p>标签（空格分隔）： Java面试题</p><hr><h3 id="jdbc编程有哪些不足之处-mybatis是如何解决这些问题的" tabindex="-1"><a class="header-anchor" href="#jdbc编程有哪些不足之处-mybatis是如何解决这些问题的"><span>JDBC编程有哪些不足之处，MyBatis是如何解决这些问题的？</span></a></h3><p>① 数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。 解决：在SqlMapConfig.xml中配置数据链接池，使用连接池管理数据库链接。</p><p>② Sql语句写在代码中造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。 解决：将Sql语句配置在XXXXmapper.xml文件中与java代码分离。</p><p>③ 向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。 解决： Mybatis自动将java对象映射至sql语句。</p><p>④ 对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。 解决：Mybatis自动将sql执行结果映射至java对象。</p><h3 id="mybatis编程步骤是什么样的" tabindex="-1"><a class="header-anchor" href="#mybatis编程步骤是什么样的"><span>MyBatis编程步骤是什么样的？</span></a></h3><p>① 创建SqlSessionFactory ② 通过SqlSessionFactory创建SqlSession ③ 通过sqlsession执行数据库操作 ④ 调用session.commit()提交事务 ⑤ 调用session.close()关闭会话</p><h3 id="mybatis与hibernate有哪些不同" tabindex="-1"><a class="header-anchor" href="#mybatis与hibernate有哪些不同"><span>MyBatis与Hibernate有哪些不同？</span></a></h3><p>Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句，不过mybatis可以通过XML或注解方式灵活配置要运行的sql语句，并将java对象和sql语句映射生成最终执行的sql，最后将sql执行的结果再映射生成java对象。</p><p>Mybatis学习门槛低，简单易学，程序员直接编写原生态sql，可严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，例如互联网软件、企业运营类软件等，因为这类软件需求变化频繁，一但需求变化要求成果输出迅速。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件则需要自定义多套sql映射文件，工作量大。</p><p>Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件（例如需求固定的定制化软件）如果用hibernate开发可以节省很多代码，提高效率。但是Hibernate的缺点是学习门槛高，要精通门槛更高，而且怎么设计O/R映射，在性能和对象模型之间如何权衡，以及怎样用好Hibernate需要具有很强的经验和能力才行。 总之，按照用户的需求在有限的资源环境下只要能做出维护性、扩展性良好的软件架构都是好架构，所以框架只有适合才是最好。</p><h3 id="使用mybatis的mapper接口调用时有哪些要求" tabindex="-1"><a class="header-anchor" href="#使用mybatis的mapper接口调用时有哪些要求"><span>使用MyBatis的mapper接口调用时有哪些要求？</span></a></h3><p>① Mapper接口方法名和mapper.xml中定义的每个sql的id相同 ② Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同 ③ Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同 ④ Mapper.xml文件中的namespace即是mapper接口的类路径。 5.SqlMapConfig.xml中配置有哪些内容？ SqlMapConfig.xml中配置的内容和顺序如下： properties（属性） settings（配置） typeAliases（类型别名） typeHandlers（类型处理器） objectFactory（对象工厂） plugins（插件） environments（环境集合属性对象） environment（环境子属性对象） transactionManager（事务管理） dataSource（数据源） mappers（映射器）</p><h3 id="简单的说一下mybatis的一级缓存和二级缓存" tabindex="-1"><a class="header-anchor" href="#简单的说一下mybatis的一级缓存和二级缓存"><span>简单的说一下MyBatis的一级缓存和二级缓存？</span></a></h3><p>Mybatis首先去缓存中查询结果集，如果没有则查询数据库，如果有则从缓存取出返回结果集就不走数据库。Mybatis内部存储缓存使用一个HashMap，key为hashCode+sqlId+Sql语句。value为从查询出来映射生成的java对象</p><p>Mybatis的二级缓存即查询缓存，它的作用域是一个mapper的namespace，即在同一个namespace中查询sql可以从缓存中获取数据。二级缓存是可以跨SqlSession的。</p><h3 id="mapper编写有哪几种方式" tabindex="-1"><a class="header-anchor" href="#mapper编写有哪几种方式"><span>Mapper编写有哪几种方式？</span></a></h3><p>①接口实现类继承SqlSessionDaoSupport 使用此种方法需要编写mapper接口，mapper接口实现类、mapper.xml文件</p><p>1、在sqlMapConfig.xml中配置mapper.xml的位置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>&lt;mappers&gt;</span></span>
<span class="line"><span>    &lt;mapper resource=&quot;mapper.xml文件的地址&quot; /&gt;</span></span>
<span class="line"><span>    &lt;mapper resource=&quot;mapper.xml文件的地址&quot; /&gt;</span></span>
<span class="line"><span>&lt;/mappers&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、定义mapper接口</p><p>3、实现类集成SqlSessionDaoSupport</p><p>mapper方法中可以this.getSqlSession()进行数据增删改查。</p><p>4、spring 配置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>&lt;bean id=&quot; &quot; class=&quot;mapper接口的实现&quot;&gt;</span></span>
<span class="line"><span>    &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;</span></span>
<span class="line"><span>&lt;/bean&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②使用org.mybatis.spring.mapper.MapperFactoryBean</p><p>1、在sqlMapConfig.xml中配置mapper.xml的位置</p><p>如果mapper.xml和mappre接口的名称相同且在同一个目录，这里可以不用配置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>&lt;mappers&gt;</span></span>
<span class="line"><span>    &lt;mapper resource=&quot;mapper.xml文件的地址&quot; /&gt;</span></span>
<span class="line"><span>    &lt;mapper resource=&quot;mapper.xml文件的地址&quot; /&gt;</span></span>
<span class="line"><span>&lt;/mappers&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、定义mapper接口</p><p>注意</p><p>1、mapper.xml中的namespace为mapper接口的地址</p><p>2、mapper接口中的方法名和mapper.xml中的定义的statement的id保持一致</p><p>3、 Spring中定义</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>&lt;bean id=&quot;&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</span></span>
<span class="line"><span>    &lt;property name=&quot;mapperInterface&quot;   value=&quot;mapper接口地址&quot; /&gt; </span></span>
<span class="line"><span>    &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot; /&gt; </span></span>
<span class="line"><span>&lt;/bean&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③使用mapper扫描器</p><p>1、mapper.xml文件编写</p><blockquote><p>注意： mapper.xml中的namespace为mapper接口的地址 mapper接口中的方法名和mapper.xml中的定义的statement的id保持一致 如果将mapper.xml和mapper接口的名称保持一致则不用在sqlMapConfig.xml中进行配置</p></blockquote><p>2、定义mapper接口</p><blockquote><p>注意mapper.xml的文件名和mapper的接口名称保持一致，且放在同一个目录</p></blockquote><p>3、配置mapper扫描器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span></span>
<span class="line"><span>    &lt;property name=&quot;basePackage&quot; value=&quot;mapper接口包地址&quot;&gt;&lt;/property&gt;</span></span>
<span class="line"><span>    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt; </span></span>
<span class="line"><span>&lt;/bean&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、使用扫描器后从spring容器中获取mapper的实现对象扫描器将接口通过代理方法生成实现对象，要spring容器中自动注册，名称为mapper 接口的名称。</p>`,45)]))}const m=e(n,[["render",t]]),d=JSON.parse('{"path":"/bigcompany/njrr6ide/","title":"mybatis","lang":"zh-CN","frontmatter":{"title":"mybatis","createTime":"2025/08/25 17:27:56","permalink":"/bigcompany/njrr6ide/"},"readingTime":{"minutes":5.04,"words":1513},"git":{"createdTime":1756736713000},"filePathRelative":"notes/bigcompany/mianshiti/mybatis.md","headers":[]}');export{m as comp,d as data};

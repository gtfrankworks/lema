import{a as e,c as p,b as s,o as n}from"./app-ZQgO6-gU.js";const r={};function h(i,a){return n(),p("div",null,a[0]||(a[0]=[s('<p>关系数据库是一种用于存储相互关联的数据点并提供数据点访问的数据库。它采用关系模型，直接、直观地在表中展示数据。在关系数据库中，表中的每一行都代表一条记录，每条记录都具有一个唯一的 ID（又被称为键），而表中的列则用于存储数据的属性 — 每条记录的每一个属性通常都有一个值。籍此，用户可以轻松在数据点之间建立关联。</p><h2 id="一、什么是关系数据库管理系统-rdbms" tabindex="-1"><a class="header-anchor" href="#一、什么是关系数据库管理系统-rdbms"><span>一、什么是关系数据库管理系统（RDBMS）</span></a></h2><p>虽然关系数据库基于关系数据模型组织数据，但关系数据库管理系统（RDBMS）更具体地指的是使用户能够维护底层数据库的软件。这些程序允许用户创建、更新、插入或删除系统中的数据，并提供：</p><ul><li><p>Data structure 数据结构</p></li><li><p>Multi-user access 多用户访问</p></li><li><p>Privilege control 权限控制</p></li><li><p>Network access 网络访问 流行的关系数据库管理系统（RDBMS）示例包括 MySQL、PostgreSQL 和 IBM DB2。此外，关系数据库系统与基本数据库管理系统（DBMS）的不同之处在于，前者将数据存储在表格中，而后者将信息存储为文件。</p></li></ul><h2 id="二、关系型数据库的简史" tabindex="-1"><a class="header-anchor" href="#二、关系型数据库的简史"><span>二、关系型数据库的简史</span></a></h2><p>在关系数据库出现之前，公司使用了一种具有树状结构的层次数据库系统来存储数据表。这些早期的数据库管理系统（DBMS）使用户能够组织大量数据。然而，它们非常复杂，通常只适用于特定的应用程序，并且在揭示数据方面存在局限性。这些局限性最终促使 IBM 研究员埃德加·F·科德在 1970 年发表了一篇题为《大型共享数据库的数据关系模型》的论文，该论文提出了关系数据库模型的理论。在这个提出的模型中，信息可以在无需专业计算机知识的情况下被检索。他建议根据有意义的关系将数据组织为元组，即属性-值对。元组的集合被称为关系，这最终使得跨表合并数据成为可能。</p><p>1973 年，圣何塞研究实验室——现称为阿尔马登研究中心——开始了一个名为 System R（R 代表关系）的项目，旨在用其所谓的“工业级实现”来验证这一关系理论。最终，它也成为了 SQL 的试验场，使其在短时间内得到了更广泛的采用。然而，Oracle 采用 SQL 也并未损害其在数据库管理员中的流行度。</p><p>到 1983 年，IBM 推出了 DB2 系列关系型数据库，该系列名称源于它是 IBM 的第二款数据库管理软件。如今，它是 IBM 最成功的产品之一，每天都在云基础设施上处理数十亿笔交易，并为机器学习应用奠定了基础层。</p><h2 id="三、关系型数据库与非关系型数据库" tabindex="-1"><a class="header-anchor" href="#三、关系型数据库与非关系型数据库"><span>三、关系型数据库与非关系型数据库</span></a></h2><p>虽然关系型数据库将数据结构化为表格格式，但非关系型数据库的数据库模式并不那么严格。事实上，非关系型数据库根据数据库类型的不同，以不同的方式组织数据。无论非关系型数据库的类型如何，它们都旨在解决关系模型中固有的灵活性和可扩展性问题，而这些模型并不适合非结构化数据格式，如文本、视频和图像。这类数据库包括：</p><p>键值存储：这种无模式的数据模型组织成键值对字典，每个项目都有一个键和一个值。键可能类似于 SQL 数据库中找到的东西，比如购物车 ID，而值是数据数组，比如该用户购物车中的每个单独项目。它通常用于缓存和存储用户会话信息，例如购物车。但是，当你需要一次性拉取多条记录时，它并不理想。Redis 和 Memcached 是具有这种数据模型的开源数据库示例。</p><p>文档存储：顾名思义，文档数据库将数据存储为文档。它们在管理半结构化数据方面很有帮助，数据通常以 JSON、XML 或 BSON 格式存储。这确保了在应用程序中使用数据时数据保持完整，减少了使用数据所需的转换量。由于数据模式不需要在文档之间匹配（例如，name 与 first_name），开发人员也获得了更大的灵活性。然而，这对于复杂的交易来说可能是个问题，会导致数据损坏。文档数据库的常见用例包括内容管理系统和用户配置文件。一个文档导向型数据库的例子是 MongoDB，它是 MEAN 技术栈的数据库组件。</p><p>宽列存储：这类数据库按列存储信息，允许用户仅访问所需特定列，而无需为无关数据分配额外内存。这种数据库试图弥补键值存储和文档存储的不足，但由于其管理可能更为复杂，不建议用于新团队和项目。Apache HBase 和 Apache Cassandra 是开源宽列数据库的例子。Apache HBase 建立在 Hadoop 分布式文件系统之上，该系统提供了一种存储稀疏数据集的方法，这在许多大数据应用中常用。另一方面，Apache Cassandra 被设计用于跨多台服务器和多数据中心集群管理大量数据。它已被用于各种用例，如社交网站和实时数据分析。</p><p>NoSQL 数据库同样优先考虑可用性而非一致性。当计算机在网络中运行时，它们通常需要决定优先考虑一致性结果（即每个答案始终相同）还是高可用性，即所谓的&quot;可用性&quot;。这被称为&quot;CAP 理论&quot;，代表一致性（Consistency）、可用性（Availability）或分区容错性（Partition Tolerance）。关系型数据库确保信息始终同步且一致。一些 NoSQL 数据库，如 Redis，倾向于始终提供响应。这意味着你从查询中获取的信息可能存在几秒钟的延迟——可能长达半分钟。在社交媒体网站上，这意味着看到一张较旧的头像，而最新头像实际上只有几秒钟前才更新。另一种选择可能是超时或错误。另一方面，在银行和金融交易中，错误后重试可能比显示旧信息更可取。</p><h2 id="四、关系数据库的优势" tabindex="-1"><a class="header-anchor" href="#四、关系数据库的优势"><span>四、关系数据库的优势</span></a></h2><p>关系数据库方法的主要优势在于能够通过连接表来创建有意义的信息。连接表使你能够理解数据之间的关系，或了解表之间的连接方式。SQL 包括计数、求和、分组以及组合查询的能力。SQL 可以执行基本数学运算和子总计功能，以及逻辑转换。分析师可以按日期、名称或任何列对结果进行排序。这些功能使关系方法成为当今商业中最受欢迎的查询工具。</p><p>与其它数据库格式相比，关系型数据库具有以下几个优势</p><h3 id="_1、易用性" tabindex="-1"><a class="header-anchor" href="#_1、易用性"><span>1、易用性</span></a></h3><p>凭借其产品生命周期，关系型数据库周围拥有更庞大的社区，这也部分解释了其持续使用的原因。SQL 还使得从多个表中检索数据集以及执行简单的转换（如过滤和聚合）变得容易。关系型数据库中使用索引也允许它们快速定位这些信息，而无需搜索选定表中的每一行。</p><h3 id="_2、减少冗余" tabindex="-1"><a class="header-anchor" href="#_2、减少冗余"><span>2、减少冗余</span></a></h3><p>关系型数据库可以通过两种方式消除冗余。关系模型本身通过一个称为规范化的过程来减少数据冗余。如前所述，客户表应该只记录唯一的客户信息记录，而不是为多个交易重复这些信息。 存储过程也有助于减少重复性工作。例如，如果数据库访问仅限于某些角色、功能或团队，存储过程可以帮助管理访问控制。这些可重用的函数让宝贵的应用程序开发人员有时间处理高影响的工作。</p><h3 id="_3、备份和灾难恢复的便捷性" tabindex="-1"><a class="header-anchor" href="#_3、备份和灾难恢复的便捷性"><span>3、备份和灾难恢复的便捷性</span></a></h3><p>关系型数据库是事务性的——它们保证在任何时刻整个系统的状态都是一致的。大多数关系型数据库提供便捷的导出和导入选项，使得备份和恢复变得非常简单。这些导出操作可以在数据库运行时进行，从而在发生故障时轻松恢复。现代云关系型数据库可以进行持续镜像，使得在恢复时数据丢失的时间可以控制在秒级或更短。大多数云管理服务允许你创建只读副本，例如 IBM Cloud® Databases for PostgreSQL。这些只读副本使你能够在云数据中心存储数据的只读副本。副本也可以被提升为读写实例，用于灾难恢复。</p><h2 id="五、关系数据库示例" tabindex="-1"><a class="header-anchor" href="#五、关系数据库示例"><span>五、关系数据库示例</span></a></h2><p>通过以下简单的关系数据库示例，您可以了解小企业如何使用两个表来处理产品订单。第一个表是客户信息表，其中每一条记录都包含一位客户的姓名、地址、货运和账单信息、电话号码以及其他联系信息。信息的每一位（每个属性）则位于自己的列中，每一行（即每一条记录）都将由数据库分配一个唯一的 ID（键）。第二个表是客户订单表，其中每一条记录都包含下单的客户的 ID、所订购的产品、数量、大小和颜色等，但不包含客户的姓名和联系信息。</p><p>这两个表只有一个共同点：标识列（key）。基于这一公共列，关系数据库可以在这两个表之间创建关系。随后，当企业的订单处理应用向数据库提交订单时，数据库将转到客户订单表，提取关于产品订单的正确信息，然后使用该表中的客户 ID 在客户信息表中查找客户的帐单和货运信息。这样，仓库就可以正确提取产品，客户就可以及时收到货物，企业就可以受到货款。</p><h2 id="六、关系数据库的结构" tabindex="-1"><a class="header-anchor" href="#六、关系数据库的结构"><span>六、关系数据库的结构</span></a></h2><p>在关系模型中，逻辑数据结构（数据表、视图和索引）与物理存储结构是分离的。这种分离意味着，数据库管理员可以在不影响基于逻辑结构的数据的访问的前提下管理物理数据存储。例如，当对数据库文件重命名时，文件中表的名称不会发生改变。</p><p>这一特点同样也适用于数据库操作，一种经过明确定义，可驱使应用对数据库中数据和结构进行<a href="https://www.oracle.com/cn/database/what-is-data-management/" target="_blank" rel="noopener noreferrer">操作</a>的操作。逻辑操作允许应用指定其所需的内容，物理操作则可确定如何访问该数据然后执行任务。</p><p>为了确保数据始终准确、可访问，关系数据库应当遵循特定的完整性规则，例如“禁止在表中复制行，避免错误信息进入数据库”。</p><h2 id="七、关系模型" tabindex="-1"><a class="header-anchor" href="#七、关系模型"><span>七、关系模型</span></a></h2><p>在数据库的早期年代，每个应用都按照自己独特的结构存储数据。为此，开发人员需要深入了解数据结构才能找到和使用所需数据。大多数时候，这些数据结构都效率低下、难以维护、难以优化，无法支撑和实现良好的应用性能。关系数据库模型就是为解决数据结构随意、混乱的问题而出现的。</p><p>关系数据模型提供了标准化的数据展现和查询方法，可确保所有应用都能轻松访问和使用所需数据。事实上，开发人员从一开始就意识到了关系数据库模型的主要优势在于表。利用表，他们可以直观、高效、灵活地存储和访问结构化信息。</p><p>此外，随着开发人员开始使用结构化查询语言 (SQL) 在数据库中写入和查询数据，关系模型的另一项优势也逐渐开始显现。多年以来，SQL 被广泛用作数据库查询语言。它以关系代数为基础，提供了一种内部一致的数学语言，可以更轻松地提升所有数据库查询的性能。相比之下，其他方式都需要开发人员对查询进行定义。</p><h2 id="八、关系数据库管理系统的优势" tabindex="-1"><a class="header-anchor" href="#八、关系数据库管理系统的优势"><span>八、关系数据库管理系统的优势</span></a></h2><p>如今，各种类型和规模的企业都使用简单而强大的关系模型来满足各种信息需求，使用关系数据库执行库存跟踪、电子商务事务处理、大量的任务关键型客户信息管理等工作。而这一切都源于关系数据库能够帮助企业安全、基于规则、一致地管理信息，出色满足所有数据点相互关联的信息的需求。</p><p>自 20 世纪 70 年代出现以来，关系模型凭借独特的优势一路发展，成为了今天市场接受最广泛的数据库模型。</p><h2 id="关系模型和数据一致性" tabindex="-1"><a class="header-anchor" href="#关系模型和数据一致性"><span>关系模型和数据一致性</span></a></h2><p>关系模型可充分保证各个应用和数据库副本（又被称为实例）之间数据的一致性。例如，当一名客户在 ATM 上存钱结束后，在手机上查看账户余额时，他希望看到这笔存款立即出现在最新的账户余额中。在这一方面，关系数据库能够确保数据库的多个实例中的数据始终一致，表现非常出色。</p><p>相比之下，其他类型的数据库很难在面对大量数据时提供这种及时的一致性。即使是一些最新的数据库（例如 NoSQL），也只能提供“最终一致性”。换言之，在扩展数据库或多个用户同时访问同一数据时，数据需要一些时间才能更新至“最新状态”。最终一致性在某些使用场景中是可接受的，例如产品目录清单维护。但对于关键业务操作（例如购物车交易），关系数据库仍然是当前的黄金标准。</p><h2 id="九、提交和原子性" tabindex="-1"><a class="header-anchor" href="#九、提交和原子性"><span>九、提交和原子性</span></a></h2><p>关系数据库可非常细粒度地处理业务规则和策略，并具有严格的提交策略（即永久更改数据库）。例如，某库存数据库跟踪 3 个始终需协同使用的部件，当从库存中提取某一个部件时，也必须同时提取另外两个部件；如果 3 个部件中的任意一个不可用，则 3 个部件都无法提取。换言之，在数据库做出任何提交操作前，所有 3 个部件都必须处于可用状态才能提取。而在明确可以提交所有 3 个部件前，关系数据库不会就任何一个部件执行提交。这种多方面提交功能被称为原子性。对于确保数据库中数据准确以及符合业务规则、法规和政策，原子性至为关键。</p><h2 id="十、-acid-属性和-rdbms" tabindex="-1"><a class="header-anchor" href="#十、-acid-属性和-rdbms"><span>十、 ACID 属性和 RDBMS</span></a></h2><p>原子性、一致性、隔离性和持久性是定义关系数据库事务的四个关键属性，常缩写为 ACID。</p><ul><li><strong>原子性</strong>定义构成完整数据库事务的所有要素。</li><li><strong>一致性</strong>确保事务结束后数据点处于正确状态。</li><li><strong>隔离性</strong>指一项事务在被提交之前不会对其他事务产生影响，可避免混淆。</li><li><strong>持久性</strong>可确保所有对数据的修改在事务提交后都是永久的。</li></ul><h2 id="十一存储过程和关系数据库" tabindex="-1"><a class="header-anchor" href="#十一存储过程和关系数据库"><span>十一存储过程和关系数据库</span></a></h2><p>许多数据访问都涉及重复性操作。例如，即使是从数据表中获取信息这种简单查询，也可能需要重复数百或数千次才能获得所需结果。通常来说，这类访问需要特定类型的代码予以实现。然而，开发人员并不希望在每个新应用中都为此编写新的代码。对此，关系数据库支持存储过程，允许开发人员通过简单的应用调用来访问特定的代码块。例如，开发人员可通过一个存储过程，面向多个应用的用户实现一致的记录标记。此外，存储过程还可以帮助开发人员确保以特定方式在应用中实现特定数据函数。</p><h2 id="十二、数据库锁定和并发性" tabindex="-1"><a class="header-anchor" href="#十二、数据库锁定和并发性"><span>十二、数据库锁定和并发性</span></a></h2><p>当多个用户或应用同时尝试更改同一数据时，数据库中可能会发生冲突。对此，锁定和并发技术可在保证数据完整性的同时减少冲突的发生。</p><p>数据库锁定可防止其他用户和应用在数据更新期间访问数据。在某些数据库中，锁定作用于整个表，可能对应用性能产生负面影响。而在另外一些数据库（例如 Oracle 关系数据库）中，锁定仅限于特定记录，换言之表中其他未锁定的记录仍然可用，这有助于实现更强的应用性能。</p><p>当多个用户或应用同时在同一数据库中调用查询时，并发性将执行活动管理，根据定义的数据控制策略确保用户和应用正确访问。</p><h2 id="十三、如何选择关系数据库" tabindex="-1"><a class="header-anchor" href="#十三、如何选择关系数据库"><span>十三、如何选择关系数据库？</span></a></h2><p>关系数据库管理系统 (RDBMS) 可帮助您高效存储、管理、查询和检索关系数据库中的数据。它能够在用户、应用和数据库之间提供一个接口和一系列数据存储、访问和性能管理功能。</p><p>在选择数据库类型和关系数据库产品时，您需要考虑多种因素，合理决策。同时，如何选择 RDBMS 也取决于您的具体业务需求。做决策前，请首先回答以下问题：</p><ul><li>数据准确性：数据存储和准确性是否依赖业务逻辑？数据对准确性是否有严格的要求（例如财务数据和政府报告）？</li><li>可扩展性：数据规模有多大？预计数据增长速度如何？数据库模型是否需要支持镜像数据库副本（作为独立实例）以提高可扩展性？如果需要，能否在实例间保持数据一致性？</li><li>并发性：是否会有多个用户和应用同时访问数据？数据库软件是否支持并发性，是否能够可靠保护数据？</li><li>性能和可靠性：是否需要高性能和高可靠性？对查询响应性能有哪些需求？供应商对服务界别协议 (SLA) 和计划外停机有什么承诺？</li></ul><h2 id="十四关系数据库的未来-自主驾驶数据库" tabindex="-1"><a class="header-anchor" href="#十四关系数据库的未来-自主驾驶数据库"><span>十四关系数据库的未来：自主驾驶数据库</span></a></h2><p>经过多年发展，如今关系数据库已变得更加强大，不仅性能更强，运行速度更快，而且还更加易于使用。然而，与此同时，它们也日渐变得复杂 — 长期以来都需要专人负责数据库管理。为了优化数据库性能，开发人员不得不将大部分时间投入到管理活动上，而不是运用专业知识来开发应用，为企业创造价值。</p><p>如今，自主技术充分利用关系模型、云数据库]技术和[机器学习的优势，打造出了全新的关系数据库。这就是自主驾驶数据库（也称为自主数据库）。它既拥有关系模型的强大功能和优势，同时又能运用人工智能 (AI)、机器学习和自动化技术来监视和改善查询性能以及管理任务。例如，为了改善查询性能，自主驾驶数据库可以自行对索引进行假设和测试，从而加快查询速度，将优选查询推入生产环境。而且，自主数据库还可以持续进行改进，不需要您进行任何干预。</p><p>自主]技术可以让开发人员摆脱繁琐的数据库管理任务。例如，他们无需再预先确定对基础设施的需求，可以按需添加存储和计算资源，灵活满足数据库增长需求。最后，开发人员只需简单几个步骤，就可以轻松创建一个自主关系数据库，大大加快应用开发。</p>',59)]))}const d=e(r,[["render",h]]),c=JSON.parse('{"path":"/db/base/xe1mjq22/","title":"SQL DB - 什么是关系数据库","lang":"zh-CN","frontmatter":{"title":"SQL DB - 什么是关系数据库","createTime":"2025/08/07 15:23:12","permalink":"/db/base/xe1mjq22/"},"readingTime":{"minutes":17.98,"words":5393},"git":{"createdTime":1756736713000},"filePathRelative":"notes/db/base/SQL DB - 什么是关系数据库.md","headers":[]}');export{d as comp,c as data};

import{a as g,c as b,b as d,e,f as s,d as n,w as t,r as m,o as y}from"./app-ZQgO6-gU.js";const f="/lema/images/mybatisflex/apt.png",x="/lema/images/mybatisflex/import.png",h={};function T(k,a){const p=m("groupId"),r=m("artifactId"),o=m("version"),l=m("target"),i=m("annotationProcessorPaths"),c=m("configuration"),u=m("plugin");return y(),b("div",null,[a[18]||(a[18]=d('<p>MyBatis-Flex APT 配置 MyBatis-Flex 使用了 APT（Annotation Processing Tool）技术，在项目编译的时候，会自动根据 Entity 类定义的字段帮你生成 &quot;ACCOUNT&quot; 类以及 Entity 对应的 Mapper 类， 通过开发工具构建项目（如下图），或者执行 maven 编译命令: mvn clean package 都可以自动生成。这个原理和 lombok 一致。</p><figure><img src="'+f+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从1.1.9版本开始，APT默认不生成 Mapper 类文件。如需开启，参考下方配置选项。</p><p>配置文件和选项 要对 MyBatis-Flex 的 APT 细节选项进行配置，你需要在项目的 根目录 （ pom.xml 所在的目录）下创建名为 mybatis-flex.config 的文件。</p><p>支持的配置选项如下：</p><p>属性名 含义 约束 默认值 processor.enable 全局启用apt开关 true/false true processor.stopBubbling 是否停止向上级合并配 true/false false processor.genPath APT 代码生成路径 合法的绝对或相对路径 target/generated-sources/annotations processor.charset APT 代码生成文件字符集 合法的字符集 UTF-8 processor.allInTables.enable 是否所有的类都生成在 Tables 类里 true/false false processor.allInTables.package Tables 包名 合法的包名 \${entityPackage}.table processor.allInTables.className Tables 类名 合法的类名 Tables processor.mapper.generateEnable 开启 Mapper 自动生成 true/false false processor.mapper.annotation 开启 @Mapper 注解 true/false false processor.mapper.baseClass 自定义 Mapper 的父类 全路径类名 com.mybatisflex.core.BaseMapper processor.mapper.package 自定义 Mapper 生成的包名 合法的包名 \${entityPackage}.mapper processor.tableDef.package 生成辅助类的包名 合法的包名 \${entityPackage}.table processor.tableDef.propertiesNameStyle 生成辅助类的字段风格 upperCase, lowerCase upperCamelCase, lowerCamelCase upperCase processor.tableDef.instanceSuffix 生成的表对应的变量后缀 string 空字符串 processor.tableDef.classSuffix 生成的 TableDef 类的后缀 string TableDef processor.tableDef.ignoreEntitySuffixes 过滤 Entity 后缀 string - 对于示例中的包名表达式，说明如下：</p><p>仅支持以下配置项使用表达式 text processor.allInTables.package processor.mapper.package processor.tableDef.package <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>t</mi><mi>y</mi><mi>P</mi><mi>a</mi><mi>c</mi><mi>k</mi><mi>a</mi><mi>g</mi><mi>e</mi></mrow><mo>:</mo><mtext>表示</mtext><mi>E</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>t</mi><mi>y</mi><mtext>类所在的包名</mtext></mrow><annotation encoding="application/x-tex">{entityPackage}: 表示 Entity 类所在的包名 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">ka</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">表示</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord cjk_fallback">类所在的包名</span></span></span></span>{entityPackage.parent}: 表示 Entity 类所在的上一级包名 parent 参数的数量没有限制，但如果超出了可能的层级，则会导致异常 示例配置:</p><p>假设 Example 类的全限定类名为 com.mybatisflex.entity.Example</p><p>配置内容如下:</p><p>properties processor.allInTables.package=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>t</mi><mi>y</mi><mi>P</mi><mi>a</mi><mi>c</mi><mi>k</mi><mi>a</mi><mi>g</mi><mi>e</mi></mrow><mi mathvariant="normal">.</mi><mi>t</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>p</mi><mi>r</mi><mi>o</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>o</mi><mi>r</mi><mi mathvariant="normal">.</mi><mi>m</mi><mi>a</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi mathvariant="normal">.</mi><mi>p</mi><mi>a</mi><mi>c</mi><mi>k</mi><mi>a</mi><mi>g</mi><mi>e</mi><mo>=</mo></mrow><annotation encoding="application/x-tex">{entityPackage}.table processor.mapper.package=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">ka</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span></span><span class="mord">.</span><span class="mord mathnormal">t</span><span class="mord mathnormal">ab</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">rocessor</span><span class="mord">.</span><span class="mord mathnormal">ma</span><span class="mord mathnormal">pp</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord">.</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">ka</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span></span></span></span>{entityPackage.parent}.mapper processor.tableDef.package=\${entityPackage.parent.parent}.table 生成类的全限定类名如下:</p><p>text com.mybatisflex.entity.table.Tables com.mybatisflex.mapper.ExampleMapper com.table.ExampleTableDef APT 代码生成路径 默认在 Entity 类所在的 maven 项目的 target/generated-sources/annotations 目录下， 如果 Entity 是 test/ 目录下的测试代码，APT 生成的代码则放在 target/generated-test-sources/test-annotations 目录下。</p><p>如果我们不想让生成的代码放在这些目录，这可以添加如下配置：</p><p>properties processor.genPath=your-path genPath 可以是绝对路径，也可以是相对路径，如果填写的是相对路径，那么则是相对 Maven 根模块的目录。</p><p>APT 生成的 Tables 类名和包名 默认情况下， APT 生成的类名为 &quot;Tables&quot;，而包名为 entity 的包添加上 &quot;.table&quot;，假设 Account. 的包名为 &quot;com.mybatisflex.entity&quot;，那么生成的包名则为 &quot;com.mybatisflex.entity.table&quot;。</p><p>添加如下配置，自定义生成的类名和包名。</p><p>properties processor.allInTables.enable=true processor.allInTables.package=com.your-package processor.allInTables.className=your-class-name 自定义 TableDef 的字段风格 默认情况下，APT 生成的 TableDef 生成的默认内容如下：</p><p>public class AccountTableDef extends TableDef {</p><pre><code>public static final AccountTableDef ACCOUNT = new AccountTableDef(&quot;&quot;, &quot;tb_account&quot;);

public QueryColumn ID = new QueryColumn(this, &quot;id&quot;);
public QueryColumn USER_NAME = new QueryColumn(this, &quot;user_name&quot;);

public QueryColumn ALL_COLUMNS = new QueryColumn(this, &quot;*&quot;);
public QueryColumn[] DEFAULT_COLUMNS = new QueryColumn[]{ID, USER_NAME};

public AccountTableDef(String schema, String tableName) {
    super(schema, tableName);
}
</code></pre><p>} 在生成的内容中，ACCOUNT、ID、USER_NAME 等都是 &quot;大写 + 下划线&quot; 的风格，修改风格需要添加入配置：</p><p>properties #upperCase, lowerCase, upperCamelCase, lowerCamelCase processor.tableDef.propertiesNameStyle=upperCase 风格支持 4 种配置，默认（未配置时）为 upperCase，支持的配置分别为：</p><p>upperCase：大写 + 下划线，例如：USER_NAME lowerCase：小写 + 下划线，例如：user_name upperCamelCase：首字母大写的驼峰命名，例如：UserName lowerCamelCase：首字母小写的驼峰命名，例如：userName APT 过滤 Entity 后缀 在某些情况下，Entity 类可能会有某些通用的后缀，比如 AccountModel 或者 AccountDto 等，我们希望生成的代码， 不包含 Model Dto 等后缀，可以添加如下的配置：</p><p>properties processor.tableDef.ignoreEntitySuffixes=Model, Dto APT 开启 Mapper 生成 从 v1.1.9 开始， APT 的 Mapper 功能是关闭的，若需要开启 Mapper 的自动生成功能，需要添加以下配置。</p><p>properties processor.mapper.generateEnable=true 以上的配置，会开启整个项目的 APT 生成，若我们想关闭某一个 Entity 的 APT 生成，那么可以通过配置注解 @Table(mapperGenerateEnable = false) 进行关闭。</p><p>APT 生成的 Mapper 包名 默认情况下， APT 生成的 Mapper 类名为 &quot;***Mapper&quot;，而包名为 entity 的包添加上 &quot;.mapper&quot;，假设 Account. 的包名为 &quot;com.mybatisflex.entity&quot;，那么生成的 Mapper 类为 &quot;com.mybatisflex.mapper.AccountMapper&quot;。</p><p>添加如下配置，自定义 Mapper 生成的包名。</p><p>properties processor.mapper.package=com.your-package 自定义 Mapper 的父类 默认情况下，生成的所有 Mapper 是都继承 com.mybatisflex.core.BaseMapper 接口，但是在某些场景下（比如：新增更多的通用方法等），用户可以自定义自己的 BaseMapper，然后通过 APT 配置生成。</p><p>properties processor.mapper.baseClass=com.domain.mapper.MyBaseMapper 实体类不在一个包中 有时候可能会遇到实体类不在同一个包中的情况，例如：</p><p>txt com.example.entityPackage1 └─ Entity1 com.example.entityPackage2 └─ Entity2 此时的辅助类会生成在对应的包下，例如：</p><p>txt com.example.entityPackage1.table └─ Entity1TableDef com.example.entityPackage2.table └─ Entity2TableDef 但是，如果您设置了 processor.allInTables.enable 的话，Tables 文件将会生成在最后一个包中，例如：</p><p>txt com.example.entityPackage2.table └─ Tables 所以，如果您的实体类在多个包中，又指定了 processor.allInTables.enable = true 选项，推荐设置 Tables 文件的位置，例如：</p><p>properties processor.allInTables.enable=true processor.allInTables.package=com.example.entity.table 和 Lombok、Mapstruct 整合 在很多项目中，用到了 Lombok 帮我们减少代码编写，同时用到 Mapstruct 进行 bean 转换。使用到 Lombok 和 Mapstruct 时，其要求我们在 pom.xml 添加 annotationProcessorPaths 配置， 此时，我们也需要把 MyBatis-Flex 的 annotation 添加到 annotationProcessorPaths 配置里去，如下图所示：</p><p>xml</p>`,32)),e(u,null,{default:t(()=>[e(p,null,{default:t(()=>a[0]||(a[0]=[s("org.apache.maven.plugins",-1)])),_:1,__:[0]}),e(r,null,{default:t(()=>a[1]||(a[1]=[s("maven-compiler-plugin",-1)])),_:1,__:[1]}),e(o,null,{default:t(()=>a[2]||(a[2]=[s("3.8.1",-1)])),_:1,__:[2]}),e(c,null,{default:t(()=>[a[16]||(a[16]=n("source",null,null,-1)),a[17]||(a[17]=s("1.8 ",-1)),e(l,null,{default:t(()=>a[3]||(a[3]=[s("1.8",-1)])),_:1,__:[3]}),e(i,null,{default:t(()=>[n("path",null,[e(p,null,{default:t(()=>a[4]||(a[4]=[s("org.projectlombok",-1)])),_:1,__:[4]}),e(r,null,{default:t(()=>a[5]||(a[5]=[s("lombok",-1)])),_:1,__:[5]}),e(o,null,{default:t(()=>a[6]||(a[6]=[s("${org.projectlombok.version}",-1)])),_:1,__:[6]})]),n("path",null,[e(p,null,{default:t(()=>a[7]||(a[7]=[s("org.projectlombok",-1)])),_:1,__:[7]}),e(r,null,{default:t(()=>a[8]||(a[8]=[s("lombok-mapstruct-binding",-1)])),_:1,__:[8]}),e(o,null,{default:t(()=>a[9]||(a[9]=[s("${lombok-mapstruct-binding.version}",-1)])),_:1,__:[9]})]),n("path",null,[e(p,null,{default:t(()=>a[10]||(a[10]=[s("org.mapstruct",-1)])),_:1,__:[10]}),e(r,null,{default:t(()=>a[11]||(a[11]=[s("mapstruct-processor",-1)])),_:1,__:[11]}),e(o,null,{default:t(()=>a[12]||(a[12]=[s("${org.mapstruct.version}",-1)])),_:1,__:[12]})]),n("path",null,[e(p,null,{default:t(()=>a[13]||(a[13]=[s("com.mybatis-flex",-1)])),_:1,__:[13]}),e(r,null,{default:t(()=>a[14]||(a[14]=[s("mybatis-flex-processor",-1)])),_:1,__:[14]}),e(o,null,{default:t(()=>a[15]||(a[15]=[s("${mybatis-flex.version}",-1)])),_:1,__:[15]})])]),_:1})]),_:1,__:[16,17]})]),_:1}),a[19]||(a[19]=s(" Gradle 编译配置 当使用 Gradle 编译的情况下，需要添加 annotationProcessor 配置: ",-1)),a[20]||(a[20]=n("p",null,"dependencies { ... annotationProcessor 'com.mybatis-flex:mybatis-flex-processor:1.11.1' } 开发工具无法导入生成的代码？ 如下图所示，点击项目目录（注意是项目的根目录），右键 > Maven：",-1)),a[21]||(a[21]=n("p",null,[s("1、 先点击 Generate Sources and Update Folders。 2、 再点击 Reload project。 "),n("img",{src:x,alt:"",loading:"lazy"})],-1))])}const M=g(h,[["render",T]]),_=JSON.parse('{"path":"/framework/mybatisflex/ad/vkwebb37/","title":"MyBatis-Flex APT配置","lang":"zh-CN","frontmatter":{"title":"MyBatis-Flex APT配置","createTime":"2025/08/27 10:04:58","permalink":"/framework/mybatisflex/ad/vkwebb37/"},"readingTime":{"minutes":5.28,"words":1584},"git":{"createdTime":1756736713000},"filePathRelative":"notes/framework/mybatisflex/ad/MyBatis-Flex的APT配置.md","headers":[]}');export{M as comp,_ as data};

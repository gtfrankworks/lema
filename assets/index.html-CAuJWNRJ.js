import{a as l,c as i,b as t,o as e}from"./app-ZQgO6-gU.js";const s={};function r(n,a){return e(),i("div",null,a[0]||(a[0]=[t(`<h2 id="_1-描述一下-jvm-加载-class-文件的原理机制" tabindex="-1"><a class="header-anchor" href="#_1-描述一下-jvm-加载-class-文件的原理机制"><span>1. 描述一下 JVM 加载 Class 文件的原理机制</span></a></h2><p>Java 中的所有类都需要由类加载器装载到 JVM 中才能运行。类加载器本身也是一个类，它负责将 class 文件从硬盘读取到内存中。通常情况下，类的加载是隐式的，只有在特殊用法（如反射）下才需要显式加载类。</p><p>Java 的类加载是动态的，并不会一次性加载所有类。程序运行时，基础类（如核心库类）先加载到 JVM，其它类则在需要时才加载，以节省内存开销。</p><h3 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器"><span>类加载器</span></a></h3><p>Java 的类加载器有三种：</p><table><thead><tr><th>类加载器</th><th>作用</th></tr></thead><tbody><tr><td>Bootstrap Loader</td><td>加载系统类（内置类，如 String）</td></tr><tr><td>ExtClassLoader</td><td>加载扩展类（扩展库、实现类）</td></tr><tr><td>AppClassLoader</td><td>加载应用类（程序员自定义类）</td></tr></tbody></table><h3 id="委托模型机制" tabindex="-1"><a class="header-anchor" href="#委托模型机制"><span>委托模型机制</span></a></h3><p>类加载器之间遵循委托机制：</p><ol><li>子类加载器收到加载请求时，先委托父加载器加载。</li><li>父加载器无法加载时，子加载器才会尝试加载自己的类。</li></ol><p>这种机制保证基础类由根加载器加载，提升安全性，防止恶意类覆盖基础类。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>ClassLoader loader = ClassName.class.getClassLoader();</span></span>
<span class="line"><span>ClassLoader parentLoader = loader.getParent();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：Bootstrap Loader 在 Java 中没有实体，它是用 C++ 实现的，打印其内容会得到 <code>null</code>。</p></blockquote><h3 id="类加载流程" tabindex="-1"><a class="header-anchor" href="#类加载流程"><span>类加载流程</span></a></h3><ol><li><strong>装载</strong>：查找并导入 class 文件。</li><li><strong>连接</strong>：包括检查、准备和解析。 <ul><li>检查：验证 class 文件正确性。</li><li>准备：为静态变量分配存储空间。</li><li>解析：将符号引用转换成直接引用（可选）。</li></ul></li><li><strong>初始化</strong>：初始化静态变量和静态代码块。</li></ol><p>类的静态方法（如 <code>main()</code>）会触发类加载。</p><hr><h2 id="_2-什么是类加载器" tabindex="-1"><a class="header-anchor" href="#_2-什么是类加载器"><span>2. 什么是类加载器？</span></a></h2><p>类加载器是负责加载类文件的类。Java 源代码通过 <code>javac</code> 编译成 class 文件，然后 JVM 执行字节码。类加载器可从文件系统、网络或其他来源加载类文件。</p><hr><h2 id="_3-类加载器类型" tabindex="-1"><a class="header-anchor" href="#_3-类加载器类型"><span>3. 类加载器类型</span></a></h2><ol><li><strong>Bootstrap 类加载器</strong><ul><li>加载 JDK 内置类（rt.jar）。</li><li>父加载器为 <code>null</code>。</li></ul></li><li><strong>Extension 类加载器</strong><ul><li>先委托父加载器（Bootstrap）加载类。</li><li>若失败，从 <code>jre/lib/ext</code> 或 <code>java.ext.dirs</code> 加载。</li></ul></li><li><strong>Application 类加载器</strong><ul><li>加载 classpath 中的应用类。</li><li>是 Extension 类加载器的子加载器。</li></ul></li></ol><hr><h2 id="_4-tomcat-类加载机制" tabindex="-1"><a class="header-anchor" href="#_4-tomcat-类加载机制"><span>4. Tomcat 类加载机制</span></a></h2><p>Tomcat 启动时会创建几种类加载器：</p><table><thead><tr><th>加载器</th><th>作用</th><th>路径</th></tr></thead><tbody><tr><td>Bootstrap</td><td>加载 JVM 启动所需类和标准扩展类</td><td>jre/lib/ext</td></tr><tr><td>System</td><td>加载 Tomcat 启动类（bootstrap.jar）</td><td>CATALINA_HOME/bin</td></tr><tr><td>Common</td><td>加载 Tomcat 通用类</td><td>CATALINA_HOME/lib</td></tr><tr><td>Webapp</td><td>每个应用独立类加载器</td><td>WEB-INF/classes &amp; WEB-INF/lib</td></tr></tbody></table><p>类加载顺序：</p><ol><li>Bootstrap</li><li>System</li><li>Webapp（WEB-INF/classes）</li><li>Webapp（WEB-INF/lib）</li><li>Common（CATALINA_HOME/lib）</li></ol><hr><h2 id="_5-类加载器双亲委派模型" tabindex="-1"><a class="header-anchor" href="#_5-类加载器双亲委派模型"><span>5. 类加载器双亲委派模型</span></a></h2><p><strong>原理</strong>：子类加载器收到加载请求，先委托父类加载器处理，父类无法加载时再由子类加载。</p><p><strong>优点</strong>：</p><ul><li>安全：保证核心类由根加载器加载，防止恶意类替换核心类。</li><li>层次清晰：系统类和自定义类加载有序。</li></ul><hr><h2 id="_6-java-内存分配" tabindex="-1"><a class="header-anchor" href="#_6-java-内存分配"><span>6. Java 内存分配</span></a></h2><ul><li>每个 JVM 进程唯一对应一个堆，每个线程有私有栈。</li><li>对象实例在堆上分配，引用在栈上分配。</li><li>堆：存储对象本身及数组</li><li>栈：存储基本类型和对象引用</li><li>方法区（静态区）：存储类信息和 static 变量</li></ul><hr><h2 id="_7-java-堆结构" tabindex="-1"><a class="header-anchor" href="#_7-java-堆结构"><span>7. Java 堆结构</span></a></h2><ul><li><strong>年轻代</strong>（Young Generation）：存储新对象，快速回收短生命周期对象。包括 Eden、两个 Survivor 区。</li><li><strong>年老代</strong>（Old Generation）：存储经历多次 GC 的长生命周期对象。</li><li><strong>持久代 / 元空间（Permanent Generation / MetaSpace）</strong>：存储类信息和静态数据。JDK 1.8 后改为 MetaSpace，占用本地内存。</li></ul><hr><h2 id="_8-内存区域变化" tabindex="-1"><a class="header-anchor" href="#_8-内存区域变化"><span>8. 内存区域变化</span></a></h2><ul><li>方法区从永久代变为 MetaSpace（Java 8+）。</li><li>String 从永久代移入堆中。</li></ul><hr><h2 id="_9-各个区域作用" tabindex="-1"><a class="header-anchor" href="#_9-各个区域作用"><span>9. 各个区域作用</span></a></h2><table><thead><tr><th>区域</th><th>作用</th></tr></thead><tbody><tr><td>程序计数器</td><td>当前线程执行字节码行号指示器</td></tr><tr><td>虚拟机栈</td><td>方法执行的内存模型，局部变量、操作栈</td></tr><tr><td>本地方法栈</td><td>支持 native 方法执行</td></tr><tr><td>堆</td><td>存放对象实例，线程共享</td></tr><tr><td>方法区</td><td>存储类信息、常量、静态变量、即时编译器代码</td></tr></tbody></table><hr><h2 id="_10-java-内存泄漏" tabindex="-1"><a class="header-anchor" href="#_10-java-内存泄漏"><span>10. Java 内存泄漏</span></a></h2><p>Java 有垃圾回收机制，但仍可能出现内存泄漏：</p><ul><li>可达但无用对象无法被 GC 回收</li><li>例：Hibernate 的一级缓存对象未关闭或清空</li></ul><hr><h2 id="_11-java-类加载过程" tabindex="-1"><a class="header-anchor" href="#_11-java-类加载过程"><span>11. Java 类加载过程</span></a></h2><ol><li>装载（Load）</li><li>连接（Link）：检查、准备、解析</li><li>初始化（Initialization）</li></ol><hr><h2 id="_12-什么是-gc-为什么要有-gc" tabindex="-1"><a class="header-anchor" href="#_12-什么是-gc-为什么要有-gc"><span>12. 什么是 GC？为什么要有 GC？</span></a></h2><p>GC（Garbage Collection）即垃圾回收：</p><ul><li>自动管理内存，回收无用对象</li><li>避免内存泄漏和 OutOfMemoryError</li><li>提升开发效率，减少手动管理内存的复杂性</li></ul><hr><h2 id="_13-java-垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#_13-java-垃圾回收机制"><span>13. Java 垃圾回收机制</span></a></h2><ul><li>JVM 通过分代回收机制管理对象</li><li>年轻代使用 Minor GC，快速回收短生命周期对象</li><li>老年代使用 Major / Full GC，回收长期存活对象</li><li>回收策略包括标记-清除、标记-整理、复制算法等</li></ul><hr><h2 id="_14-如何判断一个对象是否存活" tabindex="-1"><a class="header-anchor" href="#_14-如何判断一个对象是否存活"><span>14. 如何判断一个对象是否存活？</span></a></h2><ul><li>对象可通过引用访问，则为存活</li><li>GC 判断对象不可达，则可回收</li></ul><hr><h2 id="_15-垃圾回收优点与原理" tabindex="-1"><a class="header-anchor" href="#_15-垃圾回收优点与原理"><span>15. 垃圾回收优点与原理</span></a></h2><ul><li><strong>优点</strong>：自动内存管理，避免内存泄漏，提高安全性</li><li><strong>原理</strong>： <ol><li>标记-清除（Mark-Sweep）</li><li>复制算法（Copying）</li></ol></li></ul><hr><h2 id="_16-深拷贝与浅拷贝" tabindex="-1"><a class="header-anchor" href="#_16-深拷贝与浅拷贝"><span>16. 深拷贝与浅拷贝</span></a></h2><ul><li><strong>浅拷贝</strong>：复制对象的引用，原对象和新对象共享数据</li><li><strong>深拷贝</strong>：复制对象及其引用对象的所有数据，完全独立</li></ul><hr><h2 id="_17-什么是分布式垃圾回收-dgc-它是如何工作的" tabindex="-1"><a class="header-anchor" href="#_17-什么是分布式垃圾回收-dgc-它是如何工作的"><span>17. 什么是分布式垃圾回收（DGC）？它是如何工作的？</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><p>分布式垃圾回收（Distributed Garbage Collection, DGC）用于管理分布式系统中跨 JVM 或跨机器的对象生命周期。传统的垃圾回收只管理单 JVM 内存，而 DGC 可以处理网络传输中的远程对象引用，确保不再使用的远程对象被回收。</p><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h3><ol><li><strong>引用计数（Reference Counting）</strong><ul><li>每个远程对象维护一个引用计数器</li><li>当远程引用创建或销毁时，计数器递增或递减</li><li>计数器为 0 时，对象可被回收</li><li>问题：循环引用无法回收</li></ul></li><li><strong>标记-清除（Mark-Sweep）</strong><ul><li>DGC 定期扫描远程对象引用图</li><li>标记可达对象</li><li>回收不可达对象</li><li>可结合心跳机制避免误回收</li></ul></li><li><strong>租约机制（Lease / Time-based）</strong><ul><li>每个远程引用有租约时间</li><li>客户端定期续租</li><li>未续租的对象被认为不可用，DGC 回收</li></ul></li></ol><h3 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h3><ul><li>理解 DGC 目的是解决 <strong>远程对象生命周期管理</strong></li><li>关注 DGC 的挑战： <ul><li>网络延迟</li><li>客户端断开连接</li><li>循环引用</li></ul></li><li>掌握常用实现机制：引用计数、标记-清除、租约机制</li><li>实际应用：RMI、分布式缓存、微服务远程对象管理</li></ul>`,75)]))}const o=l(s,[["render",r]]),h=JSON.parse('{"path":"/bigcompany/d2u8unqy/","title":"携程-Java高级","lang":"zh-CN","frontmatter":{"title":"携程-Java高级","createTime":"2025/08/21 14:06:22","permalink":"/bigcompany/d2u8unqy/"},"readingTime":{"minutes":5.8,"words":1741},"git":{"createdTime":1756736713000},"filePathRelative":"notes/bigcompany/company/携程-Java高级.md","headers":[]}');export{o as comp,h as data};

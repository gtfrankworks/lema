import{a as s,c as a,b as n,o as i}from"./app-ZQgO6-gU.js";const l={};function r(t,e){return i(),a("div",null,e[0]||(e[0]=[n(`<h2 id="基础查询" tabindex="-1"><a class="header-anchor" href="#基础查询"><span>基础查询</span></a></h2><p>在 MyBatis-Flex 的 <code>BaseMapper</code> 中，提供了如下的功能用于查询数据库的数据：</p><ul><li><strong><code>selectOneById(id)</code></strong>：根据主键查询数据。</li><li><strong><code>selectOneByEntityId(entity)</code></strong>：根据实体主键查询数据，便于对复合主键实体类的查询。</li><li><strong><code>selectOneByMap(whereConditions)</code></strong>：根据 Map 构建的条件来查询数据。</li><li><strong><code>selectOneByCondition(whereConditions)</code></strong>：根据查询条件查询数据。</li><li><strong><code>selectOneByQuery(queryWrapper)</code></strong>：根据查询条件来查询 1 条数据。</li><li><strong><code>selectOneByQueryAs(queryWrapper, asType)</code></strong>：根据查询条件来查询 1 条数据。</li><li><strong><code>selectOneWithRelationsByMap(whereConditions)</code></strong>：根据 Map 构建的条件来查询 1 条数据。</li><li><strong><code>selectOneWithRelationsByCondition(whereConditions)</code></strong>：根据查询条件查询 1 条数据。</li><li><strong><code>selectOneWithRelationsByQuery(queryWrapper)</code></strong>：根据查询条件来查询 1 条数据。</li><li><strong><code>selectOneWithRelationsByQueryAs(queryWrapper, asType)</code></strong>：根据查询条件来查询 1 条数据。</li><li><strong><code>selectListByIds(ids)</code></strong>：根据多个主键来查询多条数据。</li><li><strong><code>selectListByMap(whereConditions)</code></strong>：根据 Map 来构建查询条件，查询多条数据。</li><li><strong><code>selectListByMap(whereConditions, count)</code></strong>：根据 Map 来构建查询条件，查询多条数据。</li><li><strong><code>selectListByCondition(whereConditions)</code></strong>：根据查询条件查询多条数据。</li><li><strong><code>selectListByCondition(whereConditions, count)</code></strong>：根据查询条件查询多条数据。</li><li><strong><code>selectListByQuery(queryWrapper)</code></strong>：根据查询条件查询数据列表。</li><li><strong><code>selectListByQuery(queryWrapper, consumers)</code></strong>：根据查询条件查询数据列表。</li><li><strong><code>selectCursorByQuery(queryWrapper)</code></strong>：根据查询条件查询游标数据，该方法必须在事务中才能正常使用，非事务下无法获取数据。</li><li><strong><code>selectRowsByQuery(queryWrapper)</code></strong>：根据查询条件查询 Row 数据。</li><li><strong><code>selectListByQueryAs(queryWrapper, asType)</code></strong>：根据查询条件查询数据列表，要求返回的数据为 asType。这种场景一般用在 left join 时，有多出了实体类本身的字段内容，可以转换为 dto、vo 等场景。</li><li><strong><code>selectListByQueryAs(queryWrapper, asType, consumers)</code></strong>：根据查询条件查询数据列表，要求返回的数据为 asType 类型。</li><li><strong><code>selectListWithRelationsByQuery(queryWrapper)</code></strong>：查询实体类及其 Relation 注解字段。</li><li><strong><code>selectListWithRelationsByQueryAs(queryWrapper, asType)</code></strong>：查询实体类及其 Relation 注解字段。</li><li><strong><code>selectListWithRelationsByQueryAs(queryWrapper, asType, consumers)</code></strong>：查询实体类及其 Relation 注解字段。</li><li><strong><code>selectAll()</code></strong>：查询全部数据。</li><li><strong><code>selectAllWithRelations()</code></strong>：查询全部数据，及其 Relation 字段内容。</li><li><strong><code>selectObjectByQuery(queryWrapper)</code></strong>：查询第一列返回的数据，QueryWrapper 执行的结果应该只有 1 列，例如：<code>QueryWrapper.create().select(ACCOUNT.id).where(...);</code></li><li><strong><code>selectObjectByQueryAs(queryWrapper, asType)</code></strong>：查询第一列返回的数据，QueryWrapper 执行的结果应该只有 1 列，例如：<code>QueryWrapper.create().select(ACCOUNT.id).where(...);</code></li><li><strong><code>selectObjectListByQuery(queryWrapper)</code></strong>：查询第一列返回的数据集合，QueryWrapper 执行的结果应该只有 1 列，例如：<code>QueryWrapper.create().select(ACCOUNT.id).where(...);</code></li><li><strong><code>selectObjectListByQueryAs(queryWrapper, asType)</code></strong>：查询第一列返回的数据集合，QueryWrapper 执行的结果应该只有 1 列，例如：<code>QueryWrapper.create().select(ACCOUNT.id).where(...);</code></li><li><strong><code>selectCountByQuery(queryWrapper)</code></strong>：查询数据量。</li><li><strong><code>selectCountByCondition(whereConditions)</code></strong>：根据条件查询数据总量。</li></ul><p><strong>select..As 使用注意事项：</strong></p><p>假设项目中有 <code>User.java</code> 的 Entity 类以及 <code>UserVo.java</code> 两个类。而 <code>User.java</code> 的代码如下</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class User {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Column(typeHandler=xxxHandler.class)</span></span>
<span class="line"><span>    private String attr1;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //getter setter</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>User.java</code> 的 <code>attr1</code> 属性配置了 <code>typeHandler</code>，当我们通过 <code>userMapper.select...As(UserVo.class)</code> 查询得到 <code>UserVo</code> 的时候， 也同样需要在 <code>UserVo</code> 的 <code>attr1</code> 属性中也配置上 <code>@Column(typeHandler=xxxHandler.class)</code>，两者才能得到相同的结果。</p><h2 id="游标查询" tabindex="-1"><a class="header-anchor" href="#游标查询"><span>游标查询</span></a></h2><p>我们对大量数据进行处理时，为防止方法内存泄漏情况，应该使用游标（Cursor）方式进行数据查询并处理数据。 在 <code>BaseMapper</code> 中，存在如下的游标查询方法：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Cursor&lt;T&gt; selectCursorByQuery(QueryWrapper queryWrapper);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其使用方法如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Db.tx(() -&gt; {</span></span>
<span class="line"><span>    Cursor&lt;Account&gt; accounts = accountMapper.selectCursorByQuery(query);</span></span>
<span class="line"><span>    for (Account account : accounts) {</span></span>
<span class="line"><span>        System.out.println(account);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    return true;</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的示例中，数据库并<strong>不是</strong>把所有的数据一次性返回给应用，而是每循环 1 次才会去数据库里拿 1 条数据，这样，就算有 100w 级数据，也不会导致我们应用内存溢出，同时，在 for 循环中， 我们可以随时终止数据读取。</p><p>但由于游标查询是在 for 循环的时候，才去数据库拿数据。因此必须保证 <code>selectCursorByQuery</code> 方法及其处理必须是在事务中进行，才能保证其链接并未与数据库断开。</p><p><strong>以下场景经常需要用到游标查询功能：</strong></p><ul><li>1、数据查询并写入到缓存</li><li>2、Excel 导出等</li></ul><p>你还可以使用 Mybatis-Flex-Reactor （flex 响应式拓展包），内部将游标操作封装成了 Flux 对象，可以有更好的游标操作体验。 详情可见： <a href="https://gitee.com/goxiaogle/mybatis-flex-reactor" target="_blank" rel="noopener noreferrer">Gitee</a><a href="https://github.com/Goxiaogle/mybatis-flex-reactor" target="_blank" rel="noopener noreferrer">Github</a></p><h2 id="查询-map-集合" tabindex="-1"><a class="header-anchor" href="#查询-map-集合"><span>查询 Map 集合</span></a></h2><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>List&lt;Row&gt; selectRowsByQuery(QueryWrapper queryWrapper);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="relations-注解查询" tabindex="-1"><a class="header-anchor" href="#relations-注解查询"><span>Relations 注解查询</span></a></h2><p>Relations 注解查询指的是用于查询带有注解 <code>@RelationOneToOne</code>，<code>@RelationOneToMany</code>，<code>@RelationManyToOne</code>，<code>@RelationManyToMany</code> 的查询。</p><ul><li><strong><code>selectOneWithRelationsByMap(whereConditions)</code></strong>：根据 Map 构建的条件来查询 1 条数据。</li><li><strong><code>selectOneWithRelationsByCondition(whereConditions)</code></strong>：根据查询条件查询 1 条数据。</li><li><strong><code>selectOneWithRelationsByQuery(queryWrapper)</code></strong>：根据查询条件来查询 1 条数据。</li><li><strong><code>selectOneWithRelationsByQueryAs(queryWrapper, asType)</code></strong>：根据查询条件来查询 1 条数据。</li><li><strong><code>selectListWithRelationsByQuery(queryWrapper)</code></strong>：查询实体类及其 Relation 注解字段。</li><li><strong><code>selectListWithRelationsByQueryAs(queryWrapper, asType)</code></strong>：查询实体类及其 Relation 注解字段。</li><li><strong><code>selectListWithRelationsByQueryAs(queryWrapper, asType, consumers)</code></strong>：查询实体类及其 Relation 注解字段。</li><li><strong><code>selectAllWithRelations()</code></strong>：查询全部数据，及其 Relation 字段内容。</li><li><strong><code>paginateWithRelations(pageNumber, pageSize, queryWrapper)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginateWithRelations(pageNumber, pageSize, whereConditions)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginateWithRelations(pageNumber, pageSize, totalRow, queryWrapper)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginateWithRelations(pageNumber, pageSize, totalRow, whereConditions)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginateWithRelations(page, queryWrapper)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginateWithRelations(page, queryWrapper, consumers)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginateWithRelationsAs(pageNumber, pageSize, queryWrapper, asType)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginateWithRelationsAs(pageNumber, pageSize, totalRow, queryWrapper, asType)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginateWithRelationsAs(page, queryWrapper, asType)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginateWithRelationsAs(page, queryWrapper, asType, consumers)</code></strong>：分页查询，及其 Relation 字段内容。</li></ul><h2 id="多表查询-关联查询" tabindex="-1"><a class="header-anchor" href="#多表查询-关联查询"><span>多表查询（关联查询）</span></a></h2><p>在 <code>BaseMapper</code> 中，提供了 <code>selectOneByQueryAs</code>、<code>selectListByQueryAs</code> 、<code>paginateAs</code> 等方法，用于处理关联查询的场景。</p><p>假设有 <code>tb_account</code> 用户表和 <code>tb_article</code> 文章表，他们的字段分别如下：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>CREATE TABLE IF NOT EXISTS \`tb_account\`</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>    \`id\`        INTEGER PRIMARY KEY auto_increment,</span></span>
<span class="line"><span>    \`user_name\` VARCHAR(100),</span></span>
<span class="line"><span>    \`age\`       Integer,</span></span>
<span class="line"><span>    \`birthday\`  DATETIME</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE TABLE IF NOT EXISTS \`tb_article\`</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>    \`id\`         INTEGER PRIMARY KEY auto_increment,</span></span>
<span class="line"><span>    \`account_id\` Integer,</span></span>
<span class="line"><span>    \`title\`      VARCHAR(100),</span></span>
<span class="line"><span>    \`content\`    text</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们进行关联查询时，可以通过如下 3 种方式进行。</p><h3 id="方式-1" tabindex="-1"><a class="header-anchor" href="#方式-1"><span>方式 1</span></a></h3><p>1、定义 <code>ArticleDTO</code> 类，<code>ArticleDTO</code> 里定义 <code>tb_account</code> 表的字段映射。</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class ArticleDTO {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private Long id;</span></span>
<span class="line"><span>    private Long accountId;</span></span>
<span class="line"><span>    private String title;</span></span>
<span class="line"><span>    private String content;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //以下用户相关字段</span></span>
<span class="line"><span>    private String userName;</span></span>
<span class="line"><span>    private int age;</span></span>
<span class="line"><span>    private Date birthday;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、使用 <code>QueryWrapper</code> 构建 <code>left join</code> 查询，查询结果通过 <code>ArticleDTO</code> 类型接收。</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>QueryWrapper query = QueryWrapper.create()</span></span>
<span class="line"><span>        .select(ARTICLE.ALL_COLUMNS)</span></span>
<span class="line"><span>        .select(ACCOUNT.USER_NAME,ACCOUNT.AGE,ACCOUNT.BIRTHDAY)</span></span>
<span class="line"><span>        .from(ARTICLE)</span></span>
<span class="line"><span>        .leftJoin(ACCOUNT).on(ARTICLE.ACCOUNT_ID.eq(ACCOUNT.ID))</span></span>
<span class="line"><span>        .where(ACCOUNT.ID.ge(0));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>List&lt;ArticleDTO&gt; results = mapper.selectListByQueryAs(query, ArticleDTO.class);</span></span>
<span class="line"><span>System.out.println(results);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方式-2" tabindex="-1"><a class="header-anchor" href="#方式-2"><span>方式 2</span></a></h3><p>假设 <code>ArticleDTO</code> 定义的属性和 SQL 查询的字段不一致时，例如：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class ArticleDTO {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  private Long id;</span></span>
<span class="line"><span>  private Long accountId;</span></span>
<span class="line"><span>  private String title;</span></span>
<span class="line"><span>  private String content;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  //以下用户字段 和 用户表定义的列不一致，表定义的列为 user_name</span></span>
<span class="line"><span>  private String authorName;</span></span>
<span class="line"><span>  private int authorAge;</span></span>
<span class="line"><span>  private Date birthday;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么， <code>QueryWrapper</code> 需要添加 <code>as</code>，修改如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>QueryWrapper query = QueryWrapper.create()</span></span>
<span class="line"><span>    .select(ARTICLE.ALL_COLUMNS)</span></span>
<span class="line"><span>    .select(ACCOUNT.USER_NAME.as(ArticleDTO::getAuthorName)</span></span>
<span class="line"><span>            ,ACCOUNT.AGE.as(ArticleDTO::getAuthorAge)</span></span>
<span class="line"><span>            ,ACCOUNT.BIRTHDAY</span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>    .from(ARTICLE)</span></span>
<span class="line"><span>    .leftJoin(ACCOUNT).on(ARTICLE.ACCOUNT_ID.eq(ACCOUNT.ID))</span></span>
<span class="line"><span>    .where(ACCOUNT.ID.ge(0));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>List&lt;ArticleDTO&gt; results = mapper.selectListByQueryAs(query, ArticleDTO.class);</span></span>
<span class="line"><span>System.out.println(results);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方式-3-v1-3-3" tabindex="-1"><a class="header-anchor" href="#方式-3-v1-3-3"><span>方式 3 ^ v1.3.3</span></a></h3><p>1、定义 <code>ArticleDTO</code> 类， 在 <code>ArticleDTO</code> 定义 <code>Account</code> 实体类属性。 例如：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class ArticleDTO {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private Long id;</span></span>
<span class="line"><span>    private Long accountId;</span></span>
<span class="line"><span>    private String title;</span></span>
<span class="line"><span>    private String content;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //直接定义 Account 对象</span></span>
<span class="line"><span>    private Account account;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、使用 <code>QueryWrapper</code> 构建 <code>left join</code> 查询，查询结果通过 <code>ArticleDTO</code> 类型接收。</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>QueryWrapper query = QueryWrapper.create()</span></span>
<span class="line"><span>        .select(ARTICLE.ALL_COLUMNS)</span></span>
<span class="line"><span>        .select(ACCOUNT.USER_NAME,ACCOUNT.AGE,ACCOUNT.BIRTHDAY)</span></span>
<span class="line"><span>        .from(ARTICLE)</span></span>
<span class="line"><span>        .leftJoin(ACCOUNT).on(ARTICLE.ACCOUNT_ID.eq(ACCOUNT.ID))</span></span>
<span class="line"><span>        .where(ACCOUNT.ID.ge(0));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>List&lt;ArticleDTO&gt; results = mapper.selectListByQueryAs(query, ArticleDTO.class);</span></span>
<span class="line"><span>System.out.println(results);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>其他注意事项：</strong></p><blockquote><p>关联查询（<code>selectOneByQueryAs</code>、<code>selectListByQueryAs</code> 、<code>paginateAs</code> 等方法）中的 <code>asType</code> 参数类型（比如：<code>ArticleDTO</code>）， 一样支持使用 <code>@Column</code>、<code>@ColumnMask</code> 注解以及 <code>@Table</code> 的 <code>onInsert</code>、<code>onUpdate</code>、<code>onSet</code> 配置。</p></blockquote><h2 id="分页查询" tabindex="-1"><a class="header-anchor" href="#分页查询"><span>分页查询</span></a></h2><p>在 MyBatis-Flex 的 BaseMapper 中，提供了如下的分页查询功能：</p><ul><li><strong><code>paginate(pageNumber, pageSize, queryWrapper)</code></strong>：分页查询。</li><li><strong><code>paginateWithRelations(pageNumber, pageSize, queryWrapper)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginate(pageNumber, pageSize, whereConditions)</code></strong>：分页查询。</li><li><strong><code>paginateWithRelations(pageNumber, pageSize, whereConditions)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginate(pageNumber, pageSize, totalRow, queryWrapper)</code></strong>：分页查询。</li><li><strong><code>paginateWithRelations(pageNumber, pageSize, totalRow, queryWrapper)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginate(pageNumber, pageSize, totalRow, whereConditions)</code></strong>：分页查询。</li><li><strong><code>paginateWithRelations(pageNumber, pageSize, totalRow, whereConditions)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginate(page, queryWrapper)</code></strong>：分页查询。</li><li><strong><code>paginate(page, queryWrapper, consumers)</code></strong>：分页查询。</li><li><strong><code>paginateWithRelations(page, queryWrapper)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginateWithRelations(page, queryWrapper, consumers)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginateAs(pageNumber, pageSize, queryWrapper, asType)</code></strong>：分页查询。</li><li><strong><code>paginateAs(pageNumber, pageSize, totalRow, queryWrapper, asType)</code></strong>：分页查询。</li><li><strong><code>paginateAs(page, queryWrapper, asType)</code></strong>：分页查询。</li><li><strong><code>paginateAs(page, queryWrapper, asType, consumers)</code></strong>：分页查询。</li><li><strong><code>paginateWithRelationsAs(pageNumber, pageSize, queryWrapper, asType)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginateWithRelationsAs(pageNumber, pageSize, totalRow, queryWrapper, asType)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginateWithRelationsAs(page, queryWrapper, asType)</code></strong>：分页查询，及其 Relation 字段内容。</li><li><strong><code>paginateWithRelationsAs(page, queryWrapper, asType, consumers)</code></strong>：分页查询，及其 Relation 字段内容。</li></ul><p><strong>参数说明：</strong></p><ul><li>pageNumber： 当前页码，从 1 开始</li><li>pageSize： 每 1 页的数据量</li><li>totalRow： 非必须值，若传入该值，mybatis-flex 则不再去查询总数据量（若传入小于 0 的数值，也会去查询总量）。</li><li>queryWrapper： 查询条件</li><li>queryCondition： 查询条件</li></ul><p>totalRow 的说明</p><p>在一般的分页场景中，只有第一页的时候有必要去查询数据总量，第二页以后是没必要的（因为第一页已经拿到总量了），因此， 第二页的时候，我们可以带入 <code>totalRow</code>，这样能提高程序的查询效率。</p><p>paginate 的返回值为 Page 对象，Page 类的定义如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class Page&lt;T&gt; implements Serializable {</span></span>
<span class="line"><span>    private List&lt;T&gt; records;                // list result of this page</span></span>
<span class="line"><span>    private int pageNumber;              // page number</span></span>
<span class="line"><span>    private int pageSize;                // result amount of this page</span></span>
<span class="line"><span>    private long totalPage;              // total page</span></span>
<span class="line"><span>    private long totalRow;               // total row</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,65)]))}const c=s(l,[["render",r]]),o=JSON.parse('{"path":"/framework/mybatisflex/base/134zvil0/","title":"MyBatis-Flex 的查询和分页","lang":"zh-CN","frontmatter":{"title":"MyBatis-Flex 的查询和分页","createTime":"2025/08/26 17:18:25","permalink":"/framework/mybatisflex/base/134zvil0/"},"readingTime":{"minutes":7.83,"words":2348},"git":{"createdTime":1756736713000},"filePathRelative":"notes/framework/mybatisflex/base/MyBatis-Flex 的查询和分页.md","headers":[]}');export{c as comp,o as data};

import{a as s,c as a,b as n,o as e}from"./app-ZQgO6-gU.js";const t={};function p(l,i){return e(),a("div",null,i[0]||(i[0]=[n(`<figure><img src="https://i.loli.net/2020/11/18/X5GxW3w6OH9pijR.png" alt="composite-title.png" tabindex="0" loading="lazy"><figcaption>composite-title.png</figcaption></figure><h1 id="聊聊自己理想的-知识" tabindex="-1"><a class="header-anchor" href="#聊聊自己理想的-知识"><span>聊聊自己理想的“知识”</span></a></h1><h2 id="知识该怎么分享" tabindex="-1"><a class="header-anchor" href="#知识该怎么分享"><span>知识该怎么分享</span></a></h2><p>周末的时候去了图书馆，去计算机技术区域想找一些书看，于是翻到了一本《零基础读懂云计算》，我发现我和作者的心态非常相似，他所谈及的就是因为“云计算”被太多太多的人去层层定义，结果导致人们对“云计算”这个词语已经开始有了一些丢失本质的理解了。他站在了“云计算”的本身出发，去掉了对它的层层包装，让读者真正的明白了什么是“云计算”（通过自己的思考），而不是将“云计算”给你定义一个什么什么高大上的名词来让你觉得很神奇的一种姿态来讲，字里行间也流露着他书名的意图。至少我看了之后，可以拨开很多营销或应用谈及的“云计算”虚伪的面纱，如果某人给我说哪个应用是怎么怎么利用“云计算”来完成的某个什么什么业务的时候，我也知道该怎么去追问他然后去判断到底他是不是应用了“云计算”。</p><p>我写下的，记录的这个设计模式系列文章《和 lvgo 一起学习设计模式》也是这个初衷。我希望能把每个设计模式也当成一个单纯的“套路”记录下来，然后希望自己以后复习和现在正在阅读的你都能自己去思考其中具体的内容。而不是走马观花或<strong>强行应用某种模式</strong>写一个案例来对自己甚至是正在阅读的你来一个“<strong>洗脑式</strong>”学习。</p><p>想要掌握一个知识，一门技术，一定要有自己的理解在其中，保持着怀疑的态度可以学到更多。因为你想知道的更多，随着你知道的越多，你不知道的就越多。<strong>但要注意这个过程是一个体系的深入，而不是发散，不然你会发现自己“虚胖”。</strong></p><figure><img src="https://i.loli.net/2020/11/18/cUJtwMWhu84FZxV.gif" alt="timg.gif" tabindex="0" loading="lazy"><figcaption>timg.gif</figcaption></figure><h2 id="知识该怎么学习" tabindex="-1"><a class="header-anchor" href="#知识该怎么学习"><span>知识该怎么学习</span></a></h2><p>网络中的知识多如牛毛，很多内容大多都是每篇文章作者自己的理解写出来的，还有一些利用“原型模式“写出来的，无关怎么写的，作为读者的我们都应该具备一些内容虚实辨别能力，多去抽象的理解，抛开层层包装，看其本质。而不是”双兔傍地走，安能辨我是雌雄“。举个不恰当就像你怎么辨别一个人是男人还是女人，无关他穿什么衣服，是否化妆，是否整容，是不是长发，等等等等这些外在的包装。（如果是分辨正常人，一定有一个非常准确的办法，我不说你也知道）</p><h1 id="组合模式" tabindex="-1"><a class="header-anchor" href="#组合模式"><span>组合模式</span></a></h1><blockquote><p>将对象组合成树形结构以表示“部分 -整体”的层次结构。组合使得用户对单个对象和组合对象的使用具有一致性</p></blockquote><p>今天要学习的东西有点意思，因为我看到了很多有意思的内容，也在这里记录分享给现在正在阅读的你。</p><p>被拉来图书馆，电脑马上扛不住了，搞快。</p><figure><img src="https://i.loli.net/2020/11/14/sMd83J2oN79yTFt.png" alt="image-20201114112656175" tabindex="0" loading="lazy"><figcaption>image-20201114112656175</figcaption></figure><h2 id="如何理解" tabindex="-1"><a class="header-anchor" href="#如何理解"><span>如何理解</span></a></h2><p>上面的定义是 **Gang Of Four 在《可复用面向对象软件的基础》**中对组合模式的意图阐述的内容。</p><p>不兜圈子，我先说下我是怎么理解这个设计模式的：<strong>把对象以树形结构放在一起，想要用的时候，操作组合（抽象）对象和操作任意一个对象是一样一样的。</strong></p><p>在学习组合模式之前，我认为它就是把多个对象组装放在一起变成一个更大的对象，这就是我对组合模式最初的理解。但当我自己亲手使用组合模式来编写一段代码的时候我发现，实际情况和我所理解的还是有所差别的。当然这其中的差别只是在于具体的实现上，如果你对组合模式的理解停留在 A + B = C，我觉得这也是正确的。不过还有一个关键的内容，就是 <strong>操作组合对象和操作任意一个对象是一样一样的</strong>。</p><p>在这过程中，我问了身边的几个小伙伴，大家都说了组合模式是一个树结构。这也说明了 A + B = C 的形式体现是以树结构形式体现的，后来又在攀谈中聊到了具体的应用，比如：应用的菜单、组织架构，还有 <strong>pom</strong>（这里的 pom 要站在maven角度来看，而不是站在 xml 这种树结构来看）。</p><h3 id="树形结构" tabindex="-1"><a class="header-anchor" href="#树形结构"><span>树形结构</span></a></h3><p>上面的内容说到了 <strong>组合</strong> 模式的一个关键的定义内容，就是它的表现形式是以树形结构来呈现的，这里还想在墨迹一点东西就是组合模式只是利用了树结构这种形式的结构。</p><h3 id="一致的访问" tabindex="-1"><a class="header-anchor" href="#一致的访问"><span>一致的访问</span></a></h3><p>至于后半段的定义，<code>对单个对象和组合对象的使用具有一致性</code> 理解成对树形结构当中的根节点、子节点、叶节点的访问方式都是一样的。</p><p><strong>放一张图</strong></p><figure><img src="https://i.loli.net/2020/11/18/ix4bmnCvVeZt1WB.png" alt="composite-tree.png" tabindex="0" loading="lazy"><figcaption>composite-tree.png</figcaption></figure><blockquote><p>图片来源 <a href="http://c.biancheng.net/view/1373.html" target="_blank" rel="noopener noreferrer">http://c.biancheng.net/view/1373.html</a></p></blockquote><h2 id="组合模式类图-📌" tabindex="-1"><a class="header-anchor" href="#组合模式类图-📌"><span>组合模式类图 📌</span></a></h2><figure><img src="https://i.loli.net/2020/11/18/IBSMYHvNkALojDb.png" alt="composite-UML.png" tabindex="0" loading="lazy"><figcaption>composite-UML.png</figcaption></figure><h2 id="让我们一起利用它做点事" tabindex="-1"><a class="header-anchor" href="#让我们一起利用它做点事"><span>让我们一起利用它做点事</span></a></h2><blockquote><p>这个案例的想法来自<code>傅哥</code>火遍全网的《重学设计模式》中组合模式的案例</p></blockquote><p>现在有一个需求，新注册的用户要进行关键信息的填写，性别、年龄。然后在首页根据用户信息进行一些商品的推送。拿到这个需求的时候是不是想着一顿 if else 猛如虎的操作来完成呢？当然我一开始也是这样想的哦，但谁知道产品经理哪天头皮发痒再给我来一个职业、地区、消费能力。。。为了满足产品未来的欲望，我想到了这个。</p><figure><img src="https://i.loli.net/2020/11/18/PRYgzetrOd1uB9p.png" alt="composite-code" tabindex="0" loading="lazy"><figcaption>composite-code</figcaption></figure><p>通过代码实现以上结构后，</p><blockquote><p>篇幅原因完整代码关注回复“<strong>源码</strong>”获取</p></blockquote><figure><img src="https://i.loli.net/2020/11/18/o7aBkLicKZWnz6G.png" alt="composite-code1.png" tabindex="0" loading="lazy"><figcaption>composite-code1.png</figcaption></figure><p>核心代码</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> /**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * 决策</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     *</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@param</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> user</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 用户信息</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@return</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 决策结果</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    protected</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> DecisionComponent </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">decision</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">User user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">judge</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">            logger</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">进入 {} 决策分支</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">DecisionComponent</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> decisionComponent</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> :</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> decisionComponents</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">decisionComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">judge</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">                    return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> decisionComponent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">decision</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入参数：男性、35岁</p><p>输出结果：</p><figure><img src="https://i.loli.net/2020/11/18/ZRQotEphMvnbeL8.png" alt="composite-test-result.png" tabindex="0" loading="lazy"><figcaption>composite-test-result.png</figcaption></figure><h2 id="还有个内容要知道" tabindex="-1"><a class="header-anchor" href="#还有个内容要知道"><span>还有个内容要知道</span></a></h2><p><strong>透明方式和已知（安全）方式</strong></p><p>关于组合模式除了树形结构、一致的访问，还有一个就是它具体的呈现方式，这个呈现方式指的是对于 <strong>客户端</strong> 也就是高层模块，呈现方式有两种</p><ul><li>透明的，高层模块不需要去区分是子节点还是叶子节点，一样的去使用，但是对于叶子节点，某些功能可能会失效或出现一些特殊的情况</li><li>已知（安全）的，需要高层模块自己对子节点或是叶子节点的使用进行选择。</li></ul><p>对于透明和已知再通过一个 UML 类图和上面的类图对比加以说明</p><p><strong>透明的组合模式类图</strong></p><figure><img src="https://i.loli.net/2020/11/18/IBSMYHvNkALojDb.png" alt="composite-UML.png" tabindex="0" loading="lazy"><figcaption>composite-UML.png</figcaption></figure><p>透明的组合模式希望各个节点（子节点、叶节点）行为与抽象节点一致，这样即高层模块无需关心是否是子节点还是叶节点，方法一样的使用，但是对于子节点，因为其没有继续的分支，所以一些方法是没有具体的实现的，这就导致这些“空方法”高层模块是不知情的，所以称为透明的。</p><p><strong>已知的组合模式类图</strong></p><figure><img src="https://i.loli.net/2020/11/18/Sy2Ed9eG6LOlbZz.png" alt="composite-safe-UML" tabindex="0" loading="lazy"><figcaption>composite-safe-UML</figcaption></figure><p>这个已知的名字是我起的，书上大多说的是安全方式。要表达的意思就是高层模块需要知道自己调用的节点是子节点还是叶子节点。</p><h2 id="发现身边的组合模式-📚" tabindex="-1"><a class="header-anchor" href="#发现身边的组合模式-📚"><span>发现身边的组合模式 📚</span></a></h2><p>相信大家都用过 maven 来管理多模块项目，maven的结构主要分为三类，继承、聚合、依赖，以下这些命令在 root 模块执行的时候，就可以将整个项目完成对应的操作，当你在单个模块中使用的时候，他也只会影响单个模块或该模块以下的模块。</p><figure><img src="https://i.loli.net/2020/11/18/J67uzqmg8YcAPUd.png" alt="maven-lifecycle.png" tabindex="0" loading="lazy"><figcaption>maven-lifecycle.png</figcaption></figure><h1 id="再墨迹一点" tabindex="-1"><a class="header-anchor" href="#再墨迹一点"><span>再墨迹一点</span></a></h1><p><em>设计模式这东西，我最早的理解就是武功秘籍，一招一式都是固定的。丢了一招半式可能就没用了，就像《武状元苏乞儿》中“星爷”饰演的苏乞儿最后来与赵无极那里，降龙十八掌少一掌都打不赢。而后又有无名的无名剑法、张三丰的太极剑法，万变不离其宗、无招胜有招。武学的真正奥义实为融会贯通，设计模式其便是技术这片江湖的一本绝世武功秘籍，幸运的是现在的武功秘籍人手一本。</em></p>`,56)]))}const r=s(t,[["render",p]]),k=JSON.parse('{"path":"/design/e76agzix/","title":"组合模式","lang":"zh-CN","frontmatter":{"title":"组合模式","createTime":"2025/08/27 23:16:28","permalink":"/design/e76agzix/"},"readingTime":{"minutes":7.8,"words":2340},"git":{"createdTime":1756736713000},"filePathRelative":"notes/design/组合模式.md","headers":[]}');export{r as comp,k as data};

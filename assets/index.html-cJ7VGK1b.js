import{a as e,c as n,b as a,o as t}from"./app-ZQgO6-gU.js";const l={};function i(d,s){return t(),n("div",null,s[0]||(s[0]=[a(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>在 mybatis-flex 中，有了一个名称为 <code>mybatis-flex-codegen</code> 的模块，提供了可以通过数据库表，生成代码的功能。当我们把数据库表设计完成后， 就可以使用其快速生成 Entity、 Mapper、 Service、 Controller 等产物。</p><p>除此之外，我们还可以通过扩展生成更多的产物，文档参考 <a href="https://mybatis-flex.com/zh/others/codegen.html#%E6%B7%BB%E5%8A%A0%E5%85%B6%E4%BB%96%E4%BA%A7%E7%89%A9%E7%9A%84%E7%94%9F%E6%88%90" target="_blank" rel="noopener noreferrer">#添加其他产物的生成</a>。</p><h3 id="ai-代码生成功能" tabindex="-1"><a class="header-anchor" href="#ai-代码生成功能"><span>AI 代码生成功能</span></a></h3><blockquote><p>另外：MyBatis-Flex 也提供了一个在线的 AI 代码生成器，可以通过您的产品（或项目）需求描述，自动帮你生成完整的 SpringBoot + MyBatisFlex 项目代码以及 SQL 脚本，下载导入到开发工具即可使用。</p><p>内测地址：<a href="https://ai.mybatis-flex.com/" target="_blank" rel="noopener noreferrer">https://ai.mybatis-flex.com</a></p></blockquote><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始"><span>快速开始</span></a></h2><p>在使用之前，我们需要先添加 <code>mybatis-flex-codegen</code> 的 Maven 依赖：</p><p>xml</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;com.mybatis-flex&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;mybatis-flex-codegen&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;1.11.1&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时需要添加数据源的 Maven 依赖和 jdbc 驱动依赖：</p><p>xml</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;4.0.3&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;com.mysql&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;8.0.32&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，编写一个任意带有 main 方法的类，如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class Codegen {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        //配置数据源</span></span>
<span class="line"><span>        HikariDataSource dataSource = new HikariDataSource();</span></span>
<span class="line"><span>        dataSource.setJdbcUrl(&quot;jdbc:mysql://127.0.0.1:3306/your-database?characterEncoding=utf-8&quot;);</span></span>
<span class="line"><span>        dataSource.setUsername(&quot;root&quot;);</span></span>
<span class="line"><span>        dataSource.setPassword(&quot;******&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //创建配置内容，两种风格都可以。</span></span>
<span class="line"><span>        GlobalConfig globalConfig = createGlobalConfigUseStyle1();</span></span>
<span class="line"><span>        //GlobalConfig globalConfig = createGlobalConfigUseStyle2();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //通过 datasource 和 globalConfig 创建代码生成器</span></span>
<span class="line"><span>        Generator generator = new Generator(dataSource, globalConfig);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //生成代码</span></span>
<span class="line"><span>        generator.generate();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static GlobalConfig createGlobalConfigUseStyle1() {</span></span>
<span class="line"><span>        //创建配置内容</span></span>
<span class="line"><span>        GlobalConfig globalConfig = new GlobalConfig();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //设置根包</span></span>
<span class="line"><span>        globalConfig.setBasePackage(&quot;com.test&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //设置表前缀和只生成哪些表</span></span>
<span class="line"><span>        globalConfig.setTablePrefix(&quot;tb_&quot;);</span></span>
<span class="line"><span>        globalConfig.setGenerateTable(&quot;tb_account&quot;, &quot;tb_account_session&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //设置生成 entity 并启用 Lombok</span></span>
<span class="line"><span>        globalConfig.setEntityGenerateEnable(true);</span></span>
<span class="line"><span>        globalConfig.setEntityWithLombok(true);</span></span>
<span class="line"><span>        //设置项目的JDK版本，项目的JDK为14及以上时建议设置该项，小于14则可以不设置</span></span>
<span class="line"><span>        globalConfig.setEntityJdkVersion(17);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //设置生成 mapper</span></span>
<span class="line"><span>        globalConfig.setMapperGenerateEnable(true);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //可以单独配置某个列</span></span>
<span class="line"><span>        ColumnConfig columnConfig = new ColumnConfig();</span></span>
<span class="line"><span>        columnConfig.setColumnName(&quot;tenant_id&quot;);</span></span>
<span class="line"><span>        columnConfig.setLarge(true);</span></span>
<span class="line"><span>        columnConfig.setVersion(true);</span></span>
<span class="line"><span>        globalConfig.setColumnConfig(&quot;tb_account&quot;, columnConfig);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        return globalConfig;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static GlobalConfig createGlobalConfigUseStyle2() {</span></span>
<span class="line"><span>        //创建配置内容</span></span>
<span class="line"><span>        GlobalConfig globalConfig = new GlobalConfig();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //设置根包</span></span>
<span class="line"><span>        globalConfig.getPackageConfig()</span></span>
<span class="line"><span>                .setBasePackage(&quot;com.test&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //设置表前缀和只生成哪些表，setGenerateTable 未配置时，生成所有表</span></span>
<span class="line"><span>        globalConfig.getStrategyConfig()</span></span>
<span class="line"><span>                .setTablePrefix(&quot;tb_&quot;)</span></span>
<span class="line"><span>                .setGenerateTable(&quot;tb_account&quot;, &quot;tb_account_session&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //设置生成 entity 并启用 Lombok</span></span>
<span class="line"><span>        globalConfig.enableEntity()</span></span>
<span class="line"><span>                .setWithLombok(true)</span></span>
<span class="line"><span>                .setJdkVersion(17);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //设置生成 mapper</span></span>
<span class="line"><span>        globalConfig.enableMapper();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //可以单独配置某个列</span></span>
<span class="line"><span>        ColumnConfig columnConfig = new ColumnConfig();</span></span>
<span class="line"><span>        columnConfig.setColumnName(&quot;tenant_id&quot;);</span></span>
<span class="line"><span>        columnConfig.setLarge(true);</span></span>
<span class="line"><span>        columnConfig.setVersion(true);</span></span>
<span class="line"><span>        globalConfig.getStrategyConfig()</span></span>
<span class="line"><span>                .setColumnConfig(&quot;tb_account&quot;, columnConfig);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        return globalConfig;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：由于 MyBatis-Flex 的 APT 功能会自动帮我们生成了 Mapper 的 Java 类，如果我们在代码生成器中选择生成 Mapper， 则建议把 APT 的 Mapper 生成功能给关闭掉，否则系统中会存在两份一样功能的 Mapper。</p><p>关闭 APT 的 Mapper 类文件生成，请参考：<a href="https://mybatis-flex.com/zh/others/apt.html" target="_blank" rel="noopener noreferrer">APT 设置章节</a></p><h2 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍"><span>功能介绍</span></a></h2><p>在 Mybatis-Flex 的代码生成器中，支持如下 8 种类型的的产物生成：</p><ul><li>Entity 实体类</li><li>Mapper 映射类</li><li>TableDef 表定义辅助类</li><li>Service 服务类</li><li>ServiceImpl 服务实现类</li><li>Controller 控制类</li><li>MapperXml 文件</li><li>package-info. 文件</li></ul><blockquote><p>除此之外，我们可以添加扩展生成更多类型的产物，文档参考 <a href="https://mybatis-flex.com/zh/others/codegen.html#%E6%B7%BB%E5%8A%A0%E5%85%B6%E4%BB%96%E4%BA%A7%E7%89%A9%E7%9A%84%E7%94%9F%E6%88%90" target="_blank" rel="noopener noreferrer">#添加其他产物的生成</a>。</p></blockquote><p>启用或关闭某种类型产物的生成，代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>// 开启 Entity 的生成</span></span>
<span class="line"><span>globalConfig.enableEntity();</span></span>
<span class="line"><span>// 关闭 Entity 的生成</span></span>
<span class="line"><span>globalConfig.disableEntity();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有方法均支持链式调用配置，代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>// 设置生成 Entity 并启用 Lombok、设置父类</span></span>
<span class="line"><span>globalConfig.enableEntity()</span></span>
<span class="line"><span>        .setWithLombok(true)</span></span>
<span class="line"><span>        .setSuperClass(BaseEntity.class);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="全局配置-globalconfig" tabindex="-1"><a class="header-anchor" href="#全局配置-globalconfig"><span>全局配置 <code>GlobalConfig</code></span></a></h2><h3 id="详细配置" tabindex="-1"><a class="header-anchor" href="#详细配置"><span>详细配置</span></a></h3><table><thead><tr><th style="text-align:left;">获取配置</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">getJavadocConfig()</td><td style="text-align:left;">注释配置</td></tr><tr><td style="text-align:left;">getPackageConfig()</td><td style="text-align:left;">包配置</td></tr><tr><td style="text-align:left;">getStrategyConfig()</td><td style="text-align:left;">策略配置</td></tr><tr><td style="text-align:left;">getTemplateConfig()</td><td style="text-align:left;">模板配置</td></tr><tr><td style="text-align:left;">getEntityConfig()</td><td style="text-align:left;">Entity 生成配置</td></tr><tr><td style="text-align:left;">getMapperConfig()</td><td style="text-align:left;">Mapper 生成配置</td></tr><tr><td style="text-align:left;">getServiceConfig()</td><td style="text-align:left;">Service 生成配置</td></tr><tr><td style="text-align:left;">getServiceImplConfig()</td><td style="text-align:left;">ServiceImpl 生成配置</td></tr><tr><td style="text-align:left;">getControllerConfig()</td><td style="text-align:left;">Controller 生成配置</td></tr><tr><td style="text-align:left;">getTableDefConfig()</td><td style="text-align:left;">TableDef 生成配置</td></tr><tr><td style="text-align:left;">getMapperXmlConfig()</td><td style="text-align:left;">MapperXml 生成配置</td></tr></tbody></table><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>globalConfig.getPackageConfig()</span></span>
<span class="line"><span>        .setSourceDir(&quot;D://files/&quot;)</span></span>
<span class="line"><span>        .setBasePackage(&quot;com.your.domain&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">启用生成</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">enableEntity()</td><td style="text-align:left;">启用 Entity 生成</td></tr><tr><td style="text-align:left;">enableMapper()</td><td style="text-align:left;">启用 Mapper 生成</td></tr><tr><td style="text-align:left;">enableService()</td><td style="text-align:left;">启用 Service 生成</td></tr><tr><td style="text-align:left;">enableServiceImpl()</td><td style="text-align:left;">启用 ServiceImpl 生成</td></tr><tr><td style="text-align:left;">enableController()</td><td style="text-align:left;">启用 Controller 生成</td></tr><tr><td style="text-align:left;">enableTableDef()</td><td style="text-align:left;">启用 TableDef 生成</td></tr><tr><td style="text-align:left;">enableMapperXml()</td><td style="text-align:left;">启用 MapperXml 生成</td></tr></tbody></table><p>启用生成之后可以继续链式进行配置，例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>// 设置生成 Entity 并启用 Lombok、设置父类</span></span>
<span class="line"><span>globalConfig.enableEntity()</span></span>
<span class="line"><span>        .setWithLombok(true)</span></span>
<span class="line"><span>        .setSuperClass(BaseEntity.class);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注释配置-javadocconfig" tabindex="-1"><a class="header-anchor" href="#注释配置-javadocconfig"><span>注释配置 <code>JavadocConfig</code></span></a></h2><table><thead><tr><th style="text-align:left;">配置</th><th style="text-align:left;">描述</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">setAuthor(String)</td><td style="text-align:left;">作者（可填写日期、版本号等，设置为 <code>&quot;&quot;</code> 则不添加 <code>@author</code>）</td><td style="text-align:left;">System.getProperty(&quot;user.name&quot;)</td></tr><tr><td style="text-align:left;">setSince(String)</td><td style="text-align:left;">自（可填写日期、版本号等，设置为 <code>&quot;&quot;</code> 则不添加 <code>@since</code>）</td><td style="text-align:left;"><code>yyyy-MM-dd</code> 格式的日期</td></tr><tr><td style="text-align:left;">setTableCommentFormat(Function)</td><td style="text-align:left;">表注释格式化</td><td style="text-align:left;">原表注释</td></tr><tr><td style="text-align:left;">setColumnCommentFormat(Function)</td><td style="text-align:left;">字段注释格式化</td><td style="text-align:left;">原字段注释</td></tr><tr><td style="text-align:left;">setEntityPackage(String)</td><td style="text-align:left;">Entity 包注释</td><td style="text-align:left;">&quot;实体类层（Entity）软件包。&quot;</td></tr><tr><td style="text-align:left;">setMapperPackage(String)</td><td style="text-align:left;">Mapper 包注释</td><td style="text-align:left;">&quot;映射层（Mapper）软件包。&quot;</td></tr><tr><td style="text-align:left;">setServicePackage(String)</td><td style="text-align:left;">Service 包注释</td><td style="text-align:left;">&quot;服务层（Service）软件包。&quot;</td></tr><tr><td style="text-align:left;">setServiceImplPackage(String)</td><td style="text-align:left;">ServiceImpl 包注释</td><td style="text-align:left;">&quot;服务层实现（ServiceImpl）软件包。&quot;</td></tr><tr><td style="text-align:left;">setControllerPackage(String)</td><td style="text-align:left;">Controller 包注释</td><td style="text-align:left;">&quot;控制层（Controller）软件包。&quot;</td></tr><tr><td style="text-align:left;">setTableDefPackage(String)</td><td style="text-align:left;">TableDef 包注释</td><td style="text-align:left;">&quot;表定义层（TableDef）软件包。&quot;</td></tr></tbody></table><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>globalConfig.getJavadocConfig()</span></span>
<span class="line"><span>        .setAuthor(&quot;Your Name&quot;)</span></span>
<span class="line"><span>        .setSince(&quot;1.0.1&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="包配置-packageconfig" tabindex="-1"><a class="header-anchor" href="#包配置-packageconfig"><span>包配置 <code>PackageConfig</code></span></a></h2><table><thead><tr><th style="text-align:left;">配置</th><th style="text-align:left;">描述</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">setSourceDir(String)</td><td style="text-align:left;">文件输出目录</td><td style="text-align:left;">System.getProperty(&quot;user.dir&quot;) + &quot;/src/main/&quot;</td></tr><tr><td style="text-align:left;">setBasePackage(String)</td><td style="text-align:left;">根包名</td><td style="text-align:left;">&quot;com.mybatisflex&quot;</td></tr><tr><td style="text-align:left;">setEntityPackage(String)</td><td style="text-align:left;">Entity 包名</td><td style="text-align:left;">getBasePackage() + &quot;.entity&quot;</td></tr><tr><td style="text-align:left;">setMapperPackage(String)</td><td style="text-align:left;">Mapper 包名</td><td style="text-align:left;">getBasePackage() + &quot;.mapper&quot;</td></tr><tr><td style="text-align:left;">setServicePackage(String)</td><td style="text-align:left;">Service 包名</td><td style="text-align:left;">getBasePackage() + &quot;.service&quot;</td></tr><tr><td style="text-align:left;">setServiceImplPackage(String)</td><td style="text-align:left;">ServiceImpl 包名</td><td style="text-align:left;">getBasePackage() + &quot;.service.impl&quot;</td></tr><tr><td style="text-align:left;">setControllerPackage(String)</td><td style="text-align:left;">Controller 包名</td><td style="text-align:left;">getBasePackage() + &quot;.controller&quot;</td></tr><tr><td style="text-align:left;">setTableDefPackage(String)</td><td style="text-align:left;">TableDef 包名</td><td style="text-align:left;">getEntityPackage() + &quot;.tables&quot;</td></tr><tr><td style="text-align:left;">setMapperXmlPath(String)</td><td style="text-align:left;">MapperXml 路径</td><td style="text-align:left;">System.getProperty(&quot;user.dir&quot;) + &quot;/src/main/resources/mapper&quot;</td></tr></tbody></table><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>globalConfig.getPackageConfig()</span></span>
<span class="line"><span>        .setSourceDir(&quot;D:\\\\files\\\\&quot;)</span></span>
<span class="line"><span>        .setBasePackage(&quot;com.your.domain&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="策略配置-strategyconfig" tabindex="-1"><a class="header-anchor" href="#策略配置-strategyconfig"><span>策略配置 <code>StrategyConfig</code></span></a></h2><table><thead><tr><th style="text-align:left;">配置</th><th style="text-align:left;">描述</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">setTablePrefix(String)</td><td style="text-align:left;">数据库表前缀，多个前缀用英文逗号（,） 隔开</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">setLogicDeleteColumn(String)</td><td style="text-align:left;">逻辑删除的默认字段名称</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">setVersionColumn(String)</td><td style="text-align:left;">乐观锁的字段名称</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">setGenerateForView(boolean)</td><td style="text-align:left;">是否生成视图映射</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">setTableConfig(TableConfig)</td><td style="text-align:left;">单独为某张表添加独立的配置</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">setColumnConfig(ColumnConfig)</td><td style="text-align:left;">设置某个列的全局配置</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">setGenerateSchema(String)</td><td style="text-align:left;">生成哪个schema下的表</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">setGenerateTables(String...)</td><td style="text-align:left;">生成哪些表，白名单</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">setUnGenerateTables(String...)</td><td style="text-align:left;">不生成哪些表，黑名单</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">setIgnoreColumns(String...)</td><td style="text-align:left;">需要忽略的列，父类定义的字段</td><td style="text-align:left;">null</td></tr></tbody></table><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>globalConfig.getStrategyConfig()</span></span>
<span class="line"><span>        .setGenerateSchema(&quot;schema&quot;)</span></span>
<span class="line"><span>        .setTablePrefix(&quot;sys_&quot;)</span></span>
<span class="line"><span>        .setGenerateTables(&quot;sys_user&quot;,&quot;sys_dept&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>setGenerateTables</code> 和 <code>setUnGenerateTables</code> 未配置时，生成所有表。</p></blockquote><h2 id="模板配置-templateconfig" tabindex="-1"><a class="header-anchor" href="#模板配置-templateconfig"><span>模板配置 <code>TemplateConfig</code></span></a></h2><table><thead><tr><th style="text-align:left;">配置</th><th style="text-align:left;">描述</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">setTemplate(ITemplate)</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">setEntity(String)</td><td style="text-align:left;">Entity 模板路径</td><td style="text-align:left;">&quot;/templates/enjoy/entity.tpl&quot;</td></tr><tr><td style="text-align:left;">setMapper(String)</td><td style="text-align:left;">Mapper 模板路径</td><td style="text-align:left;">&quot;/templates/enjoy/mapper.tpl&quot;</td></tr><tr><td style="text-align:left;">setService(String)</td><td style="text-align:left;">Service 模板路径</td><td style="text-align:left;">&quot;/templates/enjoy/service.tpl&quot;</td></tr><tr><td style="text-align:left;">setServiceImpl(String)</td><td style="text-align:left;">ServiceImpl 模板路径</td><td style="text-align:left;">&quot;/templates/enjoy/serviceImpl.tpl&quot;</td></tr><tr><td style="text-align:left;">setController(String)</td><td style="text-align:left;">Controller 模板路径</td><td style="text-align:left;">&quot;/templates/enjoy/controller.tpl&quot;</td></tr><tr><td style="text-align:left;">setTableDef(String)</td><td style="text-align:left;">TableDef 模板路径</td><td style="text-align:left;">&quot;/templates/enjoy/tableDef.tpl&quot;</td></tr><tr><td style="text-align:left;">setMapperXml(String)</td><td style="text-align:left;">MapperXml 模板路径</td><td style="text-align:left;">&quot;/templates/enjoy/mapperXml.tpl&quot;</td></tr></tbody></table><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>globalConfig.getTemplateConfig()</span></span>
<span class="line"><span>        .setTemplate(new FreeMarkerTemplate())</span></span>
<span class="line"><span>        .setEntity(&quot;D:\\\\your-template-file\\\\my-entity.tpl&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="entity-生成配置-entityconfig" tabindex="-1"><a class="header-anchor" href="#entity-生成配置-entityconfig"><span>Entity 生成配置 <code>EntityConfig</code></span></a></h2><table><thead><tr><th style="text-align:left;">配置</th><th style="text-align:left;">描述</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">setEntityWithBaseClassEnable(boolean)</td><td style="text-align:left;">当开启这个配置后，Entity 会生成两个类，自动生成的 getter setter 字段等都在 Base 类里，而开发者可以在 Account. 中添加自己的业务代码</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">setClassPrefix(String)</td><td style="text-align:left;">Entity 类的前缀</td><td style="text-align:left;">&quot;&quot;</td></tr><tr><td style="text-align:left;">setClassSuffix(String)</td><td style="text-align:left;">Entity 类的后缀</td><td style="text-align:left;">&quot;&quot;</td></tr><tr><td style="text-align:left;">setSuperClass(Class)</td><td style="text-align:left;">Entity 类的父类，可以自定义一些 BaseEntity 类</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">setSuperClassFactory(Function&lt;Table, Class&gt;)</td><td style="text-align:left;">Entity 类的父类工厂，可以用于对特定的 Class 设置父类，而非全部 Entity 的父类</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">setOverwriteEnable(boolean)</td><td style="text-align:left;">是否覆盖之前生成的文件</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">setEntityBaseOverwriteEnable(boolean)</td><td style="text-align:left;">生成Base类时是否覆盖之前生成的文件</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">setImplInterfaces(Class[])</td><td style="text-align:left;">Entity 默认实现的接口</td><td style="text-align:left;">Serializable.class</td></tr><tr><td style="text-align:left;">setWithLombok(boolean)</td><td style="text-align:left;">Entity 是否使用 Lombok 注解</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">lombokNoArgsConstructorEnable(boolean)</td><td style="text-align:left;">当开启 Lombok 注解且不使用 Active Record 时，是否生成 Entity @NoArgsConstructor 注解</td><td style="text-align:left;">true</td></tr><tr><td style="text-align:left;">lombokAllArgsConstructorEnable(boolean)</td><td style="text-align:left;">当开启 Lombok 注解且不使用 Active Record 时，是否生成 Entity @AllArgsConstructor 注解</td><td style="text-align:left;">true</td></tr><tr><td style="text-align:left;">setWithSwagger(boolean)</td><td style="text-align:left;">Entity 是否使用 Swagger 注解</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">setSwaggerVersion(EntityConfig.SwaggerVersion)</td><td style="text-align:left;">Swagger 注解版本</td><td style="text-align:left;">SwaggerVersion.FOX</td></tr><tr><td style="text-align:left;">setWithActiveRecord(boolean)</td><td style="text-align:left;">是否生成 Active Record 模式的 Entity</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">setDataSource(String)</td><td style="text-align:left;">统一使用的数据源</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">setJdkVersion(int)</td><td style="text-align:left;">设置项目的jdk版本</td><td style="text-align:left;">0</td></tr></tbody></table><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>globalConfig.getEntityConfig()</span></span>
<span class="line"><span>        .setWithLombok(true)</span></span>
<span class="line"><span>        .setClassPrefix(&quot;My&quot;)</span></span>
<span class="line"><span>        .setClassSuffix(&quot;Entity&quot;)</span></span>
<span class="line"><span>        .setSuperClass(BaseEntity.class);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> <code>setSuperClassFactory(Function&lt;Table, Class&gt;)</code> 的优先级要大于 <code>setSuperClass(Class)</code>，当两者同时配置时，<code>setSuperClass(Class)</code> 的配置无效。</p><p><strong>setEntitySuperClassFactory</strong> 示例代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>globalConfig.setEntitySuperClassFactory(table -&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 在这里，可以通过 table 来指定对应 SuperClass</span></span>
<span class="line"><span>    // 返回 null，则表示不需要设置父类</span></span>
<span class="line"><span>    return null;</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mapper-生成配置-mapperconfig" tabindex="-1"><a class="header-anchor" href="#mapper-生成配置-mapperconfig"><span>Mapper 生成配置 <code>MapperConfig</code></span></a></h2><table><thead><tr><th style="text-align:left;">配置</th><th style="text-align:left;">描述</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">setClassPrefix(String)</td><td style="text-align:left;">Mapper 类的前缀</td><td style="text-align:left;">&quot;&quot;</td></tr><tr><td style="text-align:left;">setClassSuffix(String)</td><td style="text-align:left;">Mapper 类的后缀</td><td style="text-align:left;">&quot;Mapper&quot;</td></tr><tr><td style="text-align:left;">setSuperClass(Class)</td><td style="text-align:left;">Mapper 类的父类</td><td style="text-align:left;">BaseMapper.class</td></tr><tr><td style="text-align:left;">setOverwriteEnable(boolean)</td><td style="text-align:left;">是否覆盖之前生成的文件</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">setMapperAnnotation(boolean)</td><td style="text-align:left;">是否生成 @Mapper 注解</td><td style="text-align:left;">false</td></tr></tbody></table><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>globalConfig.getMapperConfig()</span></span>
<span class="line"><span>        .setClassPrefix(&quot;My&quot;)</span></span>
<span class="line"><span>        .setClassSuffix(&quot;Mapper&quot;)</span></span>
<span class="line"><span>        .setSuperClass(BaseMapper.class);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="service-生成配置-serviceconfig" tabindex="-1"><a class="header-anchor" href="#service-生成配置-serviceconfig"><span>Service 生成配置 <code>ServiceConfig</code></span></a></h2><table><thead><tr><th style="text-align:left;">配置</th><th style="text-align:left;">描述</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">setClassPrefix(String)</td><td style="text-align:left;">Service 类的前缀</td><td style="text-align:left;">&quot;&quot;</td></tr><tr><td style="text-align:left;">setClassSuffix(String)</td><td style="text-align:left;">Service 类的后缀</td><td style="text-align:left;">&quot;Service&quot;</td></tr><tr><td style="text-align:left;">setSuperClass(Class)</td><td style="text-align:left;">Service 类的父类</td><td style="text-align:left;">IService.class</td></tr><tr><td style="text-align:left;">setOverwriteEnable(boolean)</td><td style="text-align:left;">是否覆盖之前生成的文件</td><td style="text-align:left;">false</td></tr></tbody></table><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>globalConfig.getServiceConfig()</span></span>
<span class="line"><span>        .setClassPrefix(&quot;My&quot;)</span></span>
<span class="line"><span>        .setClassSuffix(&quot;Service&quot;)</span></span>
<span class="line"><span>        .setSuperClass(IService.class);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="serviceimpl-生成配置-serviceimplconfig" tabindex="-1"><a class="header-anchor" href="#serviceimpl-生成配置-serviceimplconfig"><span>ServiceImpl 生成配置 <code>ServiceImplConfig</code></span></a></h2><table><thead><tr><th style="text-align:left;">配置</th><th style="text-align:left;">描述</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">setClassPrefix(String)</td><td style="text-align:left;">ServiceImpl 类的前缀</td><td style="text-align:left;">&quot;&quot;</td></tr><tr><td style="text-align:left;">setClassSuffix(String)</td><td style="text-align:left;">ServiceImpl 类的后缀</td><td style="text-align:left;">&quot;ServiceImpl&quot;</td></tr><tr><td style="text-align:left;">setSuperClass(Class)</td><td style="text-align:left;">ServiceImpl 类的父类</td><td style="text-align:left;">ServiceImpl.class</td></tr><tr><td style="text-align:left;">setOverwriteEnable(boolean)</td><td style="text-align:left;">是否覆盖之前生成的文件</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">setCacheExample(boolean)</td><td style="text-align:left;">是否添加缓存示例代码</td><td style="text-align:left;">false</td></tr></tbody></table><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>globalConfig.getServiceImplConfig()</span></span>
<span class="line"><span>        .setClassPrefix(&quot;My&quot;)</span></span>
<span class="line"><span>        .setClassSuffix(&quot;ServiceImpl&quot;)</span></span>
<span class="line"><span>        .setSuperClass(ServiceImpl.class);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="controller-生成配置-controllerconfig" tabindex="-1"><a class="header-anchor" href="#controller-生成配置-controllerconfig"><span>Controller 生成配置 <code>ControllerConfig</code></span></a></h2><table><thead><tr><th style="text-align:left;">配置</th><th style="text-align:left;">描述</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">setClassPrefix(String)</td><td style="text-align:left;">Controller 类的前缀</td><td style="text-align:left;">&quot;&quot;</td></tr><tr><td style="text-align:left;">setControllerRequestMappingPrefix(String)</td><td style="text-align:left;">@RequestMapping注解的前缀</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">setClassSuffix(String)</td><td style="text-align:left;">Controller 类的后缀</td><td style="text-align:left;">&quot;Controller&quot;</td></tr><tr><td style="text-align:left;">setSuperClass(Class)</td><td style="text-align:left;">Controller 类的父类</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">setOverwriteEnable(boolean)</td><td style="text-align:left;">是否覆盖之前生成的文件</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">setRestStyle(boolean)</td><td style="text-align:left;">REST 风格的 Controller</td><td style="text-align:left;">true</td></tr></tbody></table><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>globalConfig.getControllerConfig()</span></span>
<span class="line"><span>        .setClassPrefix(&quot;My&quot;)</span></span>
<span class="line"><span>        .setClassSuffix(&quot;Controller&quot;)</span></span>
<span class="line"><span>        .setSuperClass(BaseController.class);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tabledef-生成配置-tabledefconfig" tabindex="-1"><a class="header-anchor" href="#tabledef-生成配置-tabledefconfig"><span>TableDef 生成配置 <code>TableDefConfig</code></span></a></h2><table><thead><tr><th style="text-align:left;">配置</th><th style="text-align:left;">描述</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">setClassPrefix(String)</td><td style="text-align:left;">TableDef 类的前缀</td><td style="text-align:left;">&quot;&quot;</td></tr><tr><td style="text-align:left;">setClassSuffix(String)</td><td style="text-align:left;">TableDef 类的后缀</td><td style="text-align:left;">&quot;TableDef&quot;</td></tr><tr><td style="text-align:left;">setOverwriteEnable(boolean)</td><td style="text-align:left;">是否覆盖之前生成的文件</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">setPropertiesNameStyle(TableDefConfig.NameStyle)</td><td style="text-align:left;">生成辅助类的字段风格</td><td style="text-align:left;">TableDefConfig.NameStyle.LOWER_CAMEL_CASE</td></tr><tr><td style="text-align:left;">setInstanceSuffix(String)</td><td style="text-align:left;">生成辅助类常量对应的变量后缀</td><td style="text-align:left;">&quot;&quot;</td></tr></tbody></table><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>globalConfig.getTableDefConfig()</span></span>
<span class="line"><span>        .setClassPrefix(&quot;My&quot;)</span></span>
<span class="line"><span>        .setClassSuffix(&quot;Def&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mapperxml-生成配置-mapperxmlconfig" tabindex="-1"><a class="header-anchor" href="#mapperxml-生成配置-mapperxmlconfig"><span>MapperXml 生成配置 <code>MapperXmlConfig</code></span></a></h2><table><thead><tr><th style="text-align:left;">配置</th><th style="text-align:left;">描述</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">setFilePrefix(String)</td><td style="text-align:left;">MapperXml 文件的前缀</td><td style="text-align:left;">&quot;&quot;</td></tr><tr><td style="text-align:left;">setFileSuffix(String)</td><td style="text-align:left;">MapperXml 文件的后缀</td><td style="text-align:left;">&quot;Mapper&quot;</td></tr><tr><td style="text-align:left;">setOverwriteEnable(boolean)</td><td style="text-align:left;">是否覆盖之前生成的文件</td><td style="text-align:left;">false</td></tr></tbody></table><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>globalConfig.getMapperXmlConfig()</span></span>
<span class="line"><span>        .setFilePrefix(&quot;My&quot;)</span></span>
<span class="line"><span>        .setFileSuffix(&quot;Mapper&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="表配置-tableconfig" tabindex="-1"><a class="header-anchor" href="#表配置-tableconfig"><span>表配置 <code>TableConfig</code></span></a></h2><p>TableConfig 支持的配置如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class TableConfig {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 表名。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String tableName;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 数据库的 schema（模式）。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String schema;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 默认为 驼峰属性 转换为 下划线字段。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private Boolean camelToUnderline;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 监听 entity 的 insert 行为。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private Class&lt;? extends InsertListener&gt; insertListenerClass;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 监听 entity 的 update 行为。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private Class&lt;? extends UpdateListener&gt; updateListenerClass;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 监听 entity 的查询数据的 set 行为。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private Class&lt;? extends SetListener&gt; setListenerClass;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 对应列的配置。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private Map&lt;String, ColumnConfig&gt; columnConfigMap;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 是否开启 Mapper 生成。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private Boolean mapperGenerateEnable = Boolean.TRUE;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="列配置-columnconfig" tabindex="-1"><a class="header-anchor" href="#列配置-columnconfig"><span>列配置 <code>ColumnConfig</code></span></a></h2><p>ColumnConfig 支持的配置如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class ColumnConfig implements Serializable {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 字段名称。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String columnName;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * insert 的时候默认值，这个值会直接被拼接到 sql 而不通过参数设置。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String onInsertValue;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * update 的时候自动赋值，这个值会直接被拼接到 sql 而不通过参数设置。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String onUpdateValue;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 是否是大字段，大字段 APT 不会生成到 DEFAULT_COLUMNS 里。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private Boolean isLarge;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 是否是逻辑删除字段，一张表中只能存在 1 一个逻辑删除字段。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private Boolean isLogicDelete;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 是否为乐观锁字段。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private Boolean version;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 配置的 jdbcType。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private JdbcType jdbcType;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * &lt;p&gt;属性的类型。</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * &lt;p&gt;原始类型直接写类型名称，例如：int/long/float/double/boolean&lt;br/&gt;</span></span>
<span class="line"><span>     * 对象类型请写对应类的全限定名，例如：.lang.String/com.example.enums.Gender</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String propertyType;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 属性的默认值，例如：long 类型默认值：0L，枚举类型默认值：Gender.MALE。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String propertyDefaultValue;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 自定义 TypeHandler。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private Class&lt;? extends TypeHandler&gt; typeHandler;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 脱敏方式。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String mask;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 字段是否为主键。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private boolean isPrimaryKey = false;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * ID 生成策略。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private KeyType keyType;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * ID 生成器值。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String keyValue;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * sequence 序列执行顺序。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private Boolean keyBefore;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 是否是租户 ID。</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private Boolean tenantId;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义-entity-的属性类型" tabindex="-1"><a class="header-anchor" href="#自定义-entity-的属性类型"><span>自定义 Entity 的属性类型</span></a></h2><p><strong>方式 1：通过 JdbcTypeMapping</strong></p><p>MyBatis-Flex 内置了一个名为：<code>JdbcTypeMapping</code> 的 类，我们可以用其配置映射 Jdbc 驱动的数据类型为自定义的 数据类型，在开始生成代码之前，可以先调用其进行配置，例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>JdbcTypeMapping.registerMapping(LocalDateTime.class, Date.class);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那么，当我们生成代码的时候，发现 JDBC 驱动的数据类型为 <code>LocalDateTime</code>，则 Entity 对应的属性类型为 <code>Date</code>。</p><p><strong>方式 2：通过 JdbcTypeMapper</strong></p><p>示例代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>JdbcTypeMapping.setTypeMapper(new JdbcTypeMapping.JdbcTypeMapper() {</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public String getType(String jdbcType, Table table, Column column) {</span></span>
<span class="line"><span>        if (table.getName().equals(&quot;tb_sys_permission&quot;)</span></span>
<span class="line"><span>            &amp;&amp; column.getName().equals(&quot;type&quot;)){</span></span>
<span class="line"><span>            return PermissionType.class.getName();</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        return null;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以上的示例中，如果表名为 <code>tb_sys_permission</code> 且 列名为 <code>type</code>，生成的 Entity 的属性类型为 <code>PermissionType</code>；</p><blockquote><p>注意，通过 JdbcTypeMapper 设置的优先级要高于 <code>JdbcTypeMapping.registerMapping</code> 设置的内容。</p></blockquote><p><strong>方式 3：使用 ColumnConfig 定义</strong></p><p>如下方示例代码所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>ColumnConfig columnConfig = new ColumnConfig();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//定义该属性的类型为 .util.List&lt;String&gt;</span></span>
<span class="line"><span>columnConfig.setPropertyType(&quot;.util.List&lt;String&gt;&quot;);</span></span>
<span class="line"><span>columnConfig.setTypeHandler(CommaSplitTypeHandler.class);</span></span>
<span class="line"><span>columnConfig.setColumnName(&quot;your_column_name&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>GlobalConfig globalConfig = new GlobalConfig();</span></span>
<span class="line"><span>globalConfig.setColumnConfig(&quot;your_table_name&quot;, columnConfig);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Generator generator = new Generator(dataSource, globalConfig);</span></span>
<span class="line"><span>generator.generate();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义代码模板" tabindex="-1"><a class="header-anchor" href="#自定义代码模板"><span>自定义代码模板</span></a></h2><p>通过 <code>GlobalConfig</code>（全局配置）的 <code>setTemplateEngine()</code> 方法，可以配置自己的模板引擎以及模板，以下是内置的 <code>EnjoyTemplate</code> 的代码示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class EnjoyTemplate implements ITemplate {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private Engine engine;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public EnjoyTemplate() {</span></span>
<span class="line"><span>        Engine engine = Engine.use(engineName);</span></span>
<span class="line"><span>        if (engine == null) {</span></span>
<span class="line"><span>            engine = Engine.create(engineName, e -&gt; {</span></span>
<span class="line"><span>                e.addSharedStaticMethod(StringUtil.class);</span></span>
<span class="line"><span>                e.setSourceFactory(new FileAndClassPathSourceFactory());</span></span>
<span class="line"><span>            });</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        this.engine = engine;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 以下配置将支持 user.girl 表达式去调用 user 对象的 boolean isGirl() 方法</span></span>
<span class="line"><span>        Engine.addFieldGetterToFirst(new FieldGetters.IsMethodFieldGetter());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void generate(Map&lt;String, Object&gt; params, String templateFilePath, File generateFile) {</span></span>
<span class="line"><span>        if (!generateFile.getParentFile().exists() &amp;&amp; !generateFile.getParentFile().mkdirs()) {</span></span>
<span class="line"><span>            throw new IllegalStateException(&quot;Can not mkdirs by dir: &quot; + generateFile.getParentFile());</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        // 开始生成文件</span></span>
<span class="line"><span>        try (FileOutputStream fileOutputStream = new FileOutputStream(generateFile)) {</span></span>
<span class="line"><span>            engine.getTemplate(templateFilePath).render(params, fileOutputStream);</span></span>
<span class="line"><span>        } catch (Exception e) {</span></span>
<span class="line"><span>            e.printStackTrace();</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义数据方言" tabindex="-1"><a class="header-anchor" href="#自定义数据方言"><span>自定义数据方言</span></a></h2><p>在 MyBatis-Flex 的代码生成器中，已经内置了 4 种方言，他们分别是：</p><ul><li>默认方言</li><li>MySQL 方言</li><li>Oracle 方言</li><li>SQLite 方言</li></ul><p>方言可以通过如下的方式进行使用：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Generator generator = new Generator(dataSource</span></span>
<span class="line"><span>    , globalConfig</span></span>
<span class="line"><span>    , IDialect.ORACLE); //使用哪个方言</span></span>
<span class="line"><span></span></span>
<span class="line"><span>generator.generate();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不传入方言的情况下，使用默认方言。</p></blockquote><p>针对不同的数据库，我们也可以通过自定义方言来实现代码生成，例如：</p><p>MyDialect.</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>class MyDialect implements IDialect {</span></span>
<span class="line"><span>   //重写相关构建方法</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开始使用 MyDialect</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Generator generator = new Generator(dataSource</span></span>
<span class="line"><span>    , globalConfig</span></span>
<span class="line"><span>    , new MyDialect()); //使用哪个方言</span></span>
<span class="line"><span></span></span>
<span class="line"><span>generator.generate();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="添加其他产物的生成" tabindex="-1"><a class="header-anchor" href="#添加其他产物的生成"><span>添加其他产物的生成</span></a></h2><p>通过实现 <code>IGenerator</code> 来实现，比如 Entity 实体类的代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class EntityGenerator implements IGenerator {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private String templatePath = &quot;/templates/enjoy/entity.tpl&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void generate(Table table, GlobalConfig globalConfig) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        if (!globalConfig.isEntityGenerateEnable()) {</span></span>
<span class="line"><span>            return;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        PackageConfig packageConfig = globalConfig.getPackageConfig();</span></span>
<span class="line"><span>        EntityConfig entityConfig = globalConfig.getEntityConfig();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        String entityPackagePath = packageConfig.getEntityPackage().replace(&quot;.&quot;, &quot;/&quot;);</span></span>
<span class="line"><span>        File entityJavaFile = new File(packageConfig.getSourceDir(), entityPackagePath + &quot;/&quot; +</span></span>
<span class="line"><span>                table.buildEntityClassName() + &quot;.&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>        if (entityJavaFile.exists() &amp;&amp; !entityConfig.isOverwriteEnable()) {</span></span>
<span class="line"><span>            return;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>        Map&lt;String, Object&gt; params = new HashMap&lt;&gt;(4);</span></span>
<span class="line"><span>        params.put(&quot;table&quot;, table);</span></span>
<span class="line"><span>        params.put(&quot;entityConfig&quot;, entityConfig);</span></span>
<span class="line"><span>        params.put(&quot;packageConfig&quot;, packageConfig);</span></span>
<span class="line"><span>        params.put(&quot;docConfig&quot;, globalConfig.getJavadocConfig());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        globalConfig.getTemplateConfig().getTemplate().generate(params, templatePath, entityJavaFile);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想生成其他产物，比如 <code>html</code> ，可以通过编写自己的类，来实现 IGenerator 接口，例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class HtmlGenerator implements IGenerator {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void generate(Table table, GlobalConfig globalConfig) {</span></span>
<span class="line"><span>        //在这里生成 html 代码</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，通过 <code>GeneratorFactory</code> 来注册 <code>HtmlGenerator</code> 即可：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>GeneratorFactory.registerGenerator(&quot;html&quot;,new HtmlGenerator());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项！！！</span></a></h2><p>在 MySQL 或者 Oracle 的某些版本中，代码生成器可能无法获取 <code>表</code> 或者 <code>字段</code> 的注释内容，我们在数据源配置时，注意添加如下的配置信息：</p><p><strong>MySQL</strong></p><p>JdbcUrl 上注意添加 <code>useInformationSchema=true</code> 配置，如下代码所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>HikariDataSource dataSource = new HikariDataSource();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//注意：url 需添加上 useInformationSchema=true 才能正常获取表的注释</span></span>
<span class="line"><span>dataSource.setJdbcUrl(&quot;jdbc:mysql://127.0.0.1:3306/db?useInformationSchema=true&amp;characterEncoding=utf-8&quot;);</span></span>
<span class="line"><span>dataSource.setUsername(&quot;username&quot;);</span></span>
<span class="line"><span>dataSource.setPassword(&quot;password&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Oracle</strong></p><p>JdbcUrl 上注意添加 <code>remarksReporting=true</code> 配置，如下代码所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>HikariDataSource dataSource = new HikariDataSource();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//注意：url 需添加上 remarksReporting=true 才能正常获取表的注释</span></span>
<span class="line"><span>dataSource.setJdbcUrl(&quot;jdbc:oracle:thin:@localhost:1521:orcl?remarksReporting=true&quot;);</span></span>
<span class="line"><span>dataSource.setUsername(&quot;username&quot;);</span></span>
<span class="line"><span>dataSource.setPassword(&quot;password&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,116)]))}const r=e(l,[["render",i]]),c=JSON.parse('{"path":"/framework/mybatisflex/ad/gbhudtk0/","title":"MyBatis-Flex代码生成器","lang":"zh-CN","frontmatter":{"title":"MyBatis-Flex代码生成器","createTime":"2025/08/27 10:03:23","permalink":"/framework/mybatisflex/ad/gbhudtk0/"},"readingTime":{"minutes":12.14,"words":3643},"git":{"createdTime":1756736713000},"filePathRelative":"notes/framework/mybatisflex/ad/MyBatis-Flex代码生成器.md","headers":[]}');export{r as comp,c as data};

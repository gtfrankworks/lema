import{a as e,c as a,b as i,o as n}from"./app-ZQgO6-gU.js";const l={};function r(d,s){return n(),a("div",null,s[0]||(s[0]=[i(`<p>SQL 审计是一项非常重要的工作，是企业数据安全体系的重要组成部分，通过 SQL 审计功能为数据库请求进行全程记录，为事后追溯溯源提供了一手的信息，同时可以通过可以对恶意访问及时警告管理员，为防护策略优化提供数据支撑。</p><p>同时、提供 SQL 访问日志长期存储，满足等保合规要求。</p><h2 id="开启审计功能-1-0-5" tabindex="-1"><a class="header-anchor" href="#开启审计功能-1-0-5"><span>开启审计功能^1.0.5</span></a></h2><p>Mybaits-Flex 的 SQL 审计功能，默认是关闭的，若开启审计功能，需添加如下配置。</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>AuditManager.setAuditEnable(true)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>默认情况下，Mybaits-Flex 的审计消息（日志）只会输出到控制台，如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>&gt;&gt;&gt;&gt;&gt;&gt;Sql Audit: {platform=&#39;mybatis-flex&#39;, module=&#39;null&#39;, url=&#39;null&#39;, user=&#39;null&#39;, userIp=&#39;null&#39;, hostIp=&#39;192.168.3.24&#39;, query=&#39;SELECT * FROM \`tb_account\` WHERE \`id\` = ?&#39;, queryParams=[1], queryTime=1679991024523, elapsedTime=1}</span></span>
<span class="line"><span>&gt;&gt;&gt;&gt;&gt;&gt;Sql Audit: {platform=&#39;mybatis-flex&#39;, module=&#39;null&#39;, url=&#39;null&#39;, user=&#39;null&#39;, userIp=&#39;null&#39;, hostIp=&#39;192.168.3.24&#39;, query=&#39;SELECT * FROM \`tb_account\` WHERE \`id\` = ?&#39;, queryParams=[1], queryTime=1679991024854, elapsedTime=3}</span></span>
<span class="line"><span>&gt;&gt;&gt;&gt;&gt;&gt;Sql Audit: {platform=&#39;mybatis-flex&#39;, module=&#39;null&#39;, url=&#39;null&#39;, user=&#39;null&#39;, userIp=&#39;null&#39;, hostIp=&#39;192.168.3.24&#39;, query=&#39;SELECT * FROM \`tb_account\` WHERE \`id\` = ?&#39;, queryParams=[1], queryTime=1679991025100, elapsedTime=2}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mybaits-Flex 消息包含了如下内容：</p><ul><li><strong>platform</strong>：平台，或者是运行的应用</li><li><strong>module</strong>：应用模块</li><li><strong>url</strong>：执行这个 SQL 涉及的 URL 地址</li><li><strong>user</strong>：执行这个 SQL 涉及的 平台用户</li><li><strong>userIp</strong>：执行这个 SQL 的平台用户 IP 地址</li><li><strong>hostIp</strong>：执行这个 SQL 的服务器 IP 地址</li><li><strong>query</strong>：SQL 内容</li><li><strong>queryParams</strong>：SQL 参数</li><li><strong>queryTime</strong>：SQL 执行的时间点（当前时间）</li><li><strong>elapsedTime</strong>：SQL 执行的消耗时间（毫秒）</li><li><strong>metas</strong>：其他扩展元信息</li></ul><p>提示</p><p>通过以上的消息内容可知：每个 SQL 的执行，都包含了：哪个访问用户、哪个 IP 地址访问，访问的是哪个 URL 地址，这个 SQL 的参数是什么，执行的时间是什么，执行 花费了多少时间等等。这样，通过 MyBatis-flex 的 SQL 审计功能，我们能全盘了解到每个 SQL 的执行情况。</p><h2 id="自定义-sql-审计内容" tabindex="-1"><a class="header-anchor" href="#自定义-sql-审计内容"><span>自定义 SQL 审计内容</span></a></h2><p>MyBatis-Flex 内置了一个名为 <code>MessageFactory</code> 的接口，我们只需实现该接口，并为 <code>AuditManager</code> 配置新的 <code>MessageFactory</code> 即可，如下所示：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class MyMessageFactory implements MessageFactory {</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public AuditMessage create() {</span></span>
<span class="line"><span>        AuditMessage message = new AuditMessage();</span></span>
<span class="line"><span>       </span></span>
<span class="line"><span>        // 在这里</span></span>
<span class="line"><span>        // 设置 message 的基础内容，包括 platform、module、url、user、userIp、hostIp 内容</span></span>
<span class="line"><span>        // 剩下的 query、queryParams、queryCount、queryTime、elapsedTime 为 mybatis-flex 设置</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>        return message;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并为 <code>AuditManager</code> 配置新写的 <code>MyMessageFactory</code>：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>MessageFactory creator = new MyMessageFactory();</span></span>
<span class="line"><span>AuditManager.setMessageFactory(creator);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义-messagereporter" tabindex="-1"><a class="header-anchor" href="#自定义-messagereporter"><span>自定义 MessageReporter</span></a></h2><p><code>MessageReporter</code> 负责把 Mybaits-Flex 收集的 SQL 审计日志发送到指定位置，在 MyBatis-Flex 中只内置两个 <code>MessageReporter</code>，他们分别是：</p><ul><li><code>ConsoleMessageReporter</code> 用于把 SQL 审计日志发送到控制台。</li><li><code>HttpMessageReporter</code> 用于把 SQL 审计日志发动到指定服务器。</li></ul><p><code>ConsoleMessageReporter</code> 代码如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class ConsoleMessageReporter implements MessageReporter {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void sendMessages(List&lt;AuditMessage&gt; messages) {</span></span>
<span class="line"><span>        for (AuditMessage message : messages) {</span></span>
<span class="line"><span>            System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;Sql Audit: &quot; + message.toString());</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以自己去实现 <code>MessageReporter</code> 接口，示例代码如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class MyMessageReporter implements MessageReporter {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void sendMessages(List&lt;AuditMessage&gt; messages) {</span></span>
<span class="line"><span>        //在这里把 messages 审计日志发送到指定位置</span></span>
<span class="line"><span>        //比如 </span></span>
<span class="line"><span>        // 1、通过 http 协议发送到指定服务器</span></span>
<span class="line"><span>        // 2、通过日志工具发送到日志平台</span></span>
<span class="line"><span>        // 3、通过 Kafka 等 MQ 发送到指定平台</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写好 <code>MyMessageReporter</code> ，在应用启动的时候，为 <code>AuditManager</code> 配置新的 <code>MessageReporter</code>，示例如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>MessageReporter reporter = new MyMessageReporter();</span></span>
<span class="line"><span>AuditManager.setMessageReporter(reporter);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义-messagecollector" tabindex="-1"><a class="header-anchor" href="#自定义-messagecollector"><span>自定义 MessageCollector</span></a></h2><p>MyBatis-Flex 内置了两个 Collector，他们分别是：</p><ul><li><strong>ScheduledMessageCollector</strong> 定时把消息通过 MessageReporter 发送到指定位置。</li><li><strong>ConsoleMessageCollector</strong> 使用其把消息输出到控制台。</li></ul><p>提示</p><p><code>ConsoleMessageCollector</code> 和 <code>ConsoleMessageReporter</code> 都能把 SQL 审计日志发送到控制台打印， 区别是 <code>ConsoleMessageCollector</code> 是实时打印；<code>ConsoleMessageReporter</code> 是通过 <code>ScheduledMessageCollector</code> 进行定时打印（默认情况下：每 10s 打印一次日志）。</p><h2 id="sql-调试输出" tabindex="-1"><a class="header-anchor" href="#sql-调试输出"><span>SQL 调试输出</span></a></h2><p>使用 <code>ConsoleMessageCollector</code> 实时输出 SQL 日志，代码如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>MessageCollector collector = new ConsoleMessageCollector();</span></span>
<span class="line"><span>AuditManager.setMessageCollector(collector);</span></span>
<span class="line"><span>AuditManager.setAuditEnable(true);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上代码，配置 <code>AuditManager</code> 的 <code>MessageCollector</code> 为 <code>ConsoleMessageCollector</code> 后， 每次执行 sql 请求，控制台将输入内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Flex exec sql took 2 ms &gt;&gt;&gt;  SELECT * FROM \`tb_account\` WHERE \`id\` = 1</span></span>
<span class="line"><span>Flex exec sql took 3 ms &gt;&gt;&gt;  INSERT INTO \`tb_account\`(\`user_name\`, \`age\`, \`birthday\`)  VALUES (&#39;lisi&#39;, 22, &#39;2023-04-07 15:28:46&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,42)]))}const p=e(l,[["render",r]]),c=JSON.parse('{"path":"/framework/mybatisflex/ad/w5qz49qf/","title":"MyBatis-Flex的SQL审计","lang":"zh-CN","frontmatter":{"title":"MyBatis-Flex的SQL审计","createTime":"2025/08/27 09:50:45","permalink":"/framework/mybatisflex/ad/w5qz49qf/"},"readingTime":{"minutes":3.42,"words":1027},"git":{"createdTime":1756736713000},"filePathRelative":"notes/framework/mybatisflex/ad/SQL审计.md","headers":[]}');export{p as comp,c as data};

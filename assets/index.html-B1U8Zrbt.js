import{a as l,c as i,b as r,o as n}from"./app-ZQgO6-gU.js";const t={};function o(s,a){return n(),i("div",null,a[0]||(a[0]=[r('<h2 id="一、java-概述" tabindex="-1"><a class="header-anchor" href="#一、java-概述"><span>一、Java 概述</span></a></h2><p>Java 是一种 <strong>面向对象的编程语言</strong>，由 Sun Microsystems 于 1995 年发布，目前由 <strong>Oracle 公司</strong>维护与发展。 它以 <strong>一次编写，到处运行（Write Once, Run Anywhere, WORA）</strong> 的理念著称，主要通过 <strong>JVM（Java Virtual Machine，Java 虚拟机）</strong> 实现跨平台能力。</p><hr><h2 id="二、java-的主要特性" tabindex="-1"><a class="header-anchor" href="#二、java-的主要特性"><span>二、Java 的主要特性</span></a></h2><ol><li><strong>跨平台性</strong><ul><li>Java 程序编译后生成字节码（.class 文件），运行在 JVM 上，而不是直接运行在操作系统上。</li><li>JVM 作为中间层，保证了 Java 程序可以在不同平台（Windows、Linux、MacOS、Android 等）上无缝运行。</li></ul></li><li><strong>面向对象（OOP）</strong><ul><li>Java 支持类、继承、多态、封装等 OOP 特性，适合构建大型、可扩展的应用。</li></ul></li><li><strong>内存管理 &amp; 垃圾回收（GC）</strong><ul><li>Java 通过自动垃圾回收机制（Garbage Collector）管理内存，减少内存泄漏和指针错误。</li></ul></li><li><strong>安全性</strong><ul><li>Java 通过字节码校验、类加载机制、沙箱模型等方式提供较高的安全性。</li></ul></li><li><strong>多线程支持</strong><ul><li>Java 内置多线程 API 和并发工具包（如 java.util.concurrent），适合开发高并发应用。</li></ul></li><li><strong>丰富的类库</strong><ul><li>JDK 内置了大量标准库（集合、网络、IO、并发、数据库、加密等），开发效率高。</li></ul></li></ol><hr><h2 id="三、java-技术体系" tabindex="-1"><a class="header-anchor" href="#三、java-技术体系"><span>三、Java 技术体系</span></a></h2><p>Java 技术体系主要包括以下几个核心部分：</p><ol><li><strong>Java SE（Standard Edition）</strong><ul><li>标准版，提供 Java 核心库（集合、IO、网络、多线程、JDBC、反射等）。</li><li>适合桌面应用、工具类程序和底层库开发。</li></ul></li><li><strong>Java EE（Enterprise Edition，现更名为 Jakarta EE）</strong><ul><li>企业版，扩展了 Java SE，提供分布式应用、Web 应用和企业级应用所需的 API。</li><li>包括 Servlet、JSP、EJB、JPA、JMS、Web Service 等。</li><li>典型应用：企业信息系统、ERP、OA、银行系统等。</li></ul></li><li><strong>Java ME（Micro Edition）</strong><ul><li>微型版，面向嵌入式设备、手机、智能卡等小型终端。</li><li>早期广泛用于功能机开发，如诺基亚手机上的 Java 游戏。</li></ul></li><li><strong>JVM（Java Virtual Machine）</strong><ul><li>核心组件，负责加载、验证、执行 Java 字节码。</li><li>常见实现有 HotSpot JVM、OpenJ9、GraalVM。</li></ul></li></ol><hr><h2 id="四、java-生态体系" tabindex="-1"><a class="header-anchor" href="#四、java-生态体系"><span>四、Java 生态体系</span></a></h2><ol><li><strong>框架与库</strong><ul><li><strong>Spring 全家桶</strong>（Spring Boot、Spring Cloud、Spring Security 等） → 微服务、分布式系统。</li><li><strong>Hibernate / JPA / MyBatis</strong> → ORM 和数据库持久化。</li><li><strong>Netty</strong> → 高性能网络通信框架。</li><li><strong>Apache Kafka / RocketMQ</strong> → 消息中间件。</li></ul></li><li><strong>开发工具</strong><ul><li>IDE：IntelliJ IDEA、Eclipse、NetBeans。</li><li>构建工具：Maven、Gradle。</li></ul></li><li><strong>运行环境</strong><ul><li>JDK（Java Development Kit）</li><li>JRE（Java Runtime Environment）</li></ul></li></ol><hr><h2 id="五、java-的应用场景" tabindex="-1"><a class="header-anchor" href="#五、java-的应用场景"><span>五、Java 的应用场景</span></a></h2><ol><li><strong>Web 开发</strong><ul><li>Java EE、Spring MVC、Spring Boot → 电商网站、企业管理系统。</li></ul></li><li><strong>企业级应用</strong><ul><li>银行、保险、电信等高并发、高可靠系统。</li></ul></li><li><strong>移动开发</strong><ul><li>Android 早期使用 Java（后期用 Kotlin 较多）。</li></ul></li><li><strong>大数据与分布式系统</strong><ul><li>Hadoop、Spark、Flink、Kafka 等大数据框架大部分由 Java/Scala 实现。</li></ul></li><li><strong>嵌入式开发</strong><ul><li>Java ME 在物联网设备上仍有应用。</li></ul></li><li><strong>科学计算 &amp; 金融领域</strong><ul><li>高频交易系统、算法交易平台。</li></ul></li></ol><hr><h2 id="六、java-的发展趋势" tabindex="-1"><a class="header-anchor" href="#六、java-的发展趋势"><span>六、Java 的发展趋势</span></a></h2><ul><li><strong>现代化语言特性</strong>： <ul><li>Lambda 表达式、Stream API、模块化（Java 9）、记录类（Java 14+）、虚拟线程（Java 21）。</li></ul></li><li><strong>云原生方向</strong>： <ul><li>Java 与微服务、容器（Docker）、Kubernetes 深度结合。</li></ul></li><li><strong>性能优化</strong>： <ul><li>GraalVM、Project Panama、Project Loom 等新技术持续优化 Java 性能与并发能力。</li></ul></li></ul><hr><p>📌 <strong>总结</strong>： Java 经过近 30 年的发展，依旧是全球最主流的编程语言之一，凭借 <strong>稳定性、跨平台性、丰富的生态</strong>，广泛应用于 <strong>企业级系统、Web 开发、大数据处理和移动应用</strong> 等领域。</p>',20)]))}const g=l(t,[["render",o]]),u=JSON.parse('{"path":"/java-tutorial/xz6gi9o3/","title":"Java语言整体介绍","lang":"zh-CN","frontmatter":{"title":"Java语言整体介绍","createTime":"2025/08/28 09:53:02","permalink":"/java-tutorial/xz6gi9o3/"},"readingTime":{"minutes":3.02,"words":906},"git":{"createdTime":1756736713000},"filePathRelative":"notes/java-tutorial/base/README.md","headers":[]}');export{g as comp,u as data};

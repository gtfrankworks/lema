import{a as n,c as a,b as e,o as i}from"./app-ZQgO6-gU.js";const l={};function p(d,s){return i(),a("div",null,s[0]||(s[0]=[e(`<p>Db + Row 工具类，提供了在 Entity 实体类之外的数据库操作能力。使用 Db + Row 时，无需对数据库表进行映射， Row 是一个 HashMap 的子类，相当于一个通用的 Entity。以下为 Db + Row 的一些示例：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>//使用原生 SQL 插入数据</span></span>
<span class="line"><span>String sql = &quot;insert into tb_account(id,name) value (?, ?)&quot;;</span></span>
<span class="line"><span>Db.insertBySql(sql,1,&quot;michael&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//使用 Row 插入数据</span></span>
<span class="line"><span>Row account = new Row();</span></span>
<span class="line"><span>account.set(&quot;id&quot;,100);</span></span>
<span class="line"><span>account.set(ACCOUNT.USER_NAME,&quot;Michael&quot;);</span></span>
<span class="line"><span>Db.insert(&quot;tb_account&quot;,account);</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>//根据主键查询数据</span></span>
<span class="line"><span>Row row = Db.selectOneById(&quot;tb_account&quot;,&quot;id&quot;,1);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//Row 可以直接转换为 Entity 实体类，且性能极高</span></span>
<span class="line"><span>Account account = row.toEntity(Account.class);</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>//查询所有大于 18 岁的用户</span></span>
<span class="line"><span>String listsql = &quot;select * from tb_account where age &gt; ?&quot;</span></span>
<span class="line"><span>List&lt;Row&gt; rows = Db.selectListBySql(listsql,18);</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>//查询所有大于 18 岁用户的Id和用户名对应的Map</span></span>
<span class="line"><span>Map map = Db.selectFirstAndSecondColumnsAsMap(&quot;select id,user_name from tb_account where age &gt;?&quot;,18);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//分页查询：每页 10 条数据，查询第 3 页的年龄大于 18 的用户</span></span>
<span class="line"><span>QueryWrapper query=QueryWrapper.create()</span></span>
<span class="line"><span>    .where(ACCOUNT.AGE.ge(18));</span></span>
<span class="line"><span>Page&lt;Row&gt; rowPage=Db.paginate(&quot;tb_account&quot;,3,10,query);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 MyBatis <code>#{}</code> <code>\${}</code> 的方式传参 v1.8.5</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Map&lt;String, Integer&gt; map = Collections.singletonMap(&quot;age&quot;, 18);</span></span>
<span class="line"><span>List&lt;Row&gt; rowList = Db.selectListBySql(&quot;select * from tb_account where age &gt; #{age}&quot;, map);</span></span>
<span class="line"><span>RowUtil.printPretty(rowList);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Db 工具类还提供了更多 增、删、改、查和分页查询等方法。</p></blockquote><p>具体参考： <a href="https://gitee.com/mybatis-flex/mybatis-flex/blob/main/mybatis-flex-core/src/main/java/com/mybatisflex/core/row/Db.java" target="_blank" rel="noopener noreferrer">Db.java</a> 。</p><h2 id="dbchain-链式-db-调用" tabindex="-1"><a class="header-anchor" href="#dbchain-链式-db-调用"><span>DbChain 链式 Db 调用</span></a></h2><p>使用 <code>DbChain</code> 之后无需将 <code>QueryWrapper</code> 与 <code>Row</code> 的构建分离，直接即可进行操作。</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>// 新增 Row 构建</span></span>
<span class="line"><span>DbChain.table(&quot;tb_account&quot;)</span></span>
<span class="line"><span>    .setId(RowKey.AUTO)</span></span>
<span class="line"><span>    .set(&quot;user_name&quot;,&quot;zhangsan&quot;)</span></span>
<span class="line"><span>    .set(&quot;age&quot;,18)</span></span>
<span class="line"><span>    .set(&quot;birthday&quot;,new Date())</span></span>
<span class="line"><span>    .save();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 查询 QueryWrapper 构建</span></span>
<span class="line"><span>DbChain.table(&quot;tb_account&quot;)</span></span>
<span class="line"><span>    .select(&quot;id&quot;,&quot;user_name&quot;,&quot;age&quot;,&quot;birthday&quot;)</span></span>
<span class="line"><span>    .where(&quot;age &gt; ?&quot;,18)</span></span>
<span class="line"><span>    .list()</span></span>
<span class="line"><span>    .forEach(System.out::println);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="row-toentity" tabindex="-1"><a class="header-anchor" href="#row-toentity"><span>Row.toEntity()</span></a></h2><p><code>Row.toEntity(Entity.class)</code> 方法主要是用于可以把 Row 转换为 entity 实体类。通过这个方法，可以把 Entity 里的 <code>@Column()</code> 配置的列名和 Row 里的 key 进行自动关联。</p><p>代码示例：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Row row=Db.selectOneBySql(&quot;select * from ....&quot;);</span></span>
<span class="line"><span>Account entity = row.toEntity(Account.class);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，当我们进行 join 关联查询时，返回的结果如果出现重复字段，Row 会自动添加上 字段序号。</p><p>例如：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>CREATE TABLE IF NOT EXISTS \`tb_account\`</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>    \`id\`        INTEGER PRIMARY KEY auto_increment,</span></span>
<span class="line"><span>    \`user_name\` VARCHAR(100),</span></span>
<span class="line"><span>    \`age\`       Integer,</span></span>
<span class="line"><span>    \`is_delete\` Integer</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE TABLE IF NOT EXISTS \`tb_article\`</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>    \`id\`         INTEGER PRIMARY KEY auto_increment,</span></span>
<span class="line"><span>    \`account_id\` Integer,</span></span>
<span class="line"><span>    \`title\`      VARCHAR(100),</span></span>
<span class="line"><span>    \`content\`    text,</span></span>
<span class="line"><span>    \`is_delete\` Integer</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>INSERT INTO tb_account</span></span>
<span class="line"><span>VALUES (1, &#39;张三&#39; ,18, 0),</span></span>
<span class="line"><span>       (2, &#39;王麻子叔叔&#39; ,19, 0);</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>INSERT INTO tb_article</span></span>
<span class="line"><span>VALUES (1, 1,&#39;标题1&#39;, &#39;内容1&#39;,0),</span></span>
<span class="line"><span>       (2, 2,&#39;标题2&#39;, &#39;内容2&#39;,0);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以上的数据中，我们通过如下的 left join 查询文章和用户表：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>QueryWrapper query = new QueryWrapper();</span></span>
<span class="line"><span>query.select().from(ACCOUNT).leftJoin(ARTICLE)</span></span>
<span class="line"><span>        .on(ACCOUNT.ID.eq(ARTICLE.ACCOUNT_ID));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>List&lt;Row&gt; rows = Db.selectListByQuery(query);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回的 Row 集合如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>|ID    |USER_NAME    |AGE    |IS_DELETE    |ID$1    |ACCOUNT_ID    |TITLE      |CONTENT    |IS_DELETE$1    |</span></span>
<span class="line"><span>|1     |张三          |18     |0            |1       |1             |标题1      |内容1       |0              |</span></span>
<span class="line"><span>|2     |王麻子叔叔     |19     |0            |2       |2             |标题2      |内容2       |0              |</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面 4 列属于 <code>Account</code> 的数据，后面 5 列属于 <code>Article</code> 的数据。在后面的 <code>Article</code> 表中，有 <code>id</code>、<code>is_delete</code> 和 Account 的表的列名重复。 此时，重复的列名会自动添加上 <code>$序号</code> ，而非数据库返回的真正列名。</p><p>因此，我们进行 toEntity 数据转换的时候，需要添加上序号，例如：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>List&lt;Account&gt; accounts = RowUtil.toEntityList(rows, Account.class);</span></span>
<span class="line"><span>System.out.println(accounts);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//添加上序号 1</span></span>
<span class="line"><span>List&lt;Article&gt; articles = RowUtil.toEntityList(rows, Article.class, 1);</span></span>
<span class="line"><span>System.out.println(articles);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="row-toobject" tabindex="-1"><a class="header-anchor" href="#row-toobject"><span>Row.toObject()</span></a></h2><p><code>Row.toObject(Other.class)</code> 和 <code>Row.toEntity(Entity.class)</code> 相似。不一样的地方在于 <code>Row.toObject(Other.class)</code> 是通过去查找 <code>Other.class</code> 的 <code>setter</code> 方法去匹配 Row 的 key 进行赋值的。</p><p>例如 <code>Other.class</code> 的代码如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class Other {</span></span>
<span class="line"><span>    private String id;</span></span>
<span class="line"><span>    private String userName;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //getter setter</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，当我们去通过 SQL 查询得到 Row 的时候，Row 里的 <code>key</code> 为 <code>userName</code>、<code>UserName</code>、<code>USERNAME</code>、<code>user_name</code>、<code>USER_NAME</code> 等 都能自动适配到 <code>Other.userName</code> 属性。这个方法常用于把 Row 直接转换为 VO 的场景。</p><blockquote><p>PS：我们可以通过调用 <code>RowUtil.registerMapping(clazz, columnSetterMapping)</code> 去让更多的 <code>字段</code> 名称和 <code>属性</code> 进行匹配。</p></blockquote><p>代码示例：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Row row = Db.selectOneBySql(&quot;select * from ....&quot;);</span></span>
<span class="line"><span>Other other = row.toObject(Other.class);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在以上代码中，如果出现了 <code>left join</code> 等情况下，需要添加上序号。</p><h2 id="row-字段转化为驼峰风格" tabindex="-1"><a class="header-anchor" href="#row-字段转化为驼峰风格"><span>Row 字段转化为驼峰风格</span></a></h2><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Row row = Db..selectOneBySql(&quot;select * from ....&quot;);</span></span>
<span class="line"><span>Map result = row.toCamelKeysMap();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="row-字段转换为下划线风格" tabindex="-1"><a class="header-anchor" href="#row-字段转换为下划线风格"><span>Row 字段转换为下划线风格</span></a></h2><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Row row = Db..selectOneBySql(&quot;select * from ....&quot;);</span></span>
<span class="line"><span>Map result = row.toUnderlineKeysMap();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="row-插入时-设置主键生成方式" tabindex="-1"><a class="header-anchor" href="#row-插入时-设置主键生成方式"><span>Row 插入时，设置主键生成方式</span></a></h2><p><strong>ID 自增</strong></p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>// ID 自增</span></span>
<span class="line"><span>Row row = Row.ofKey(RowKey.ID_AUTO);</span></span>
<span class="line"><span>row.set(ACCOUNT.USER_NAME,&quot;Michael&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Db.insert(&quot;tb_account&quot;,row);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ID 为 UUID</strong></p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>// ID 为 uuid</span></span>
<span class="line"><span>Row row = Row.ofKey(RowKey.ID_UUID);</span></span>
<span class="line"><span>row.set(ACCOUNT.USER_NAME,&quot;Michael&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Db.insert(&quot;tb_account&quot;,row);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自定义 Row 主键生成方式</strong></p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>// 自定义 Row Key，整个应用定义一个常量即可</span></span>
<span class="line"><span>RowKey myRowKey = RowKey.of(&quot;id&quot;, KeyType.Generator, &quot;uuid&quot;, true);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 使用自定义的 RowKey</span></span>
<span class="line"><span>Row row = Row.ofKey(myRowKey);</span></span>
<span class="line"><span>row.set(ACCOUNT.USER_NAME,&quot;Michael&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Db.insert(&quot;tb_account&quot;,row);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rowutil-工具类" tabindex="-1"><a class="header-anchor" href="#rowutil-工具类"><span>RowUtil 工具类</span></a></h2><p><code>RowUtil</code> 工具类是用于帮助用户快速的把 <code>Row</code> 或者 <code>List&lt;Row&gt;</code> 转换为 VO 的工具类。其提供的方法如下：</p><ul><li><code>RowUtil.toObject(row, objectClass)</code></li><li><code>RowUtil.toObjectList(rows, objectClass)</code></li><li><code>RowUtil.toEntity(row, entityClass)</code></li><li><code>RowUtil.toEntityList(rows, entityClass)</code></li><li><code>RowUtil.registerMapping(clazz, columnSetterMapping)</code> 用于注册数据库 <code>字段</code> 名称和 Class 属性的映射关系。</li><li><code>RowUtil.printPretty(rows)</code> 打印 <code>Row</code> 或者 <code>List&lt;Row&gt;</code> 数据到控制台，一般用户调试。</li></ul><p><code>RowUtil.printPretty</code> 输入内容如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>Total Count: 12</span></span>
<span class="line"><span>|ID     |USER_NAME     |AGE     |SEX     |BIRTHDAY     |IS_DELETE     |</span></span>
<span class="line"><span>|1      |张三           |18      |0       |2020-01-1... |0             |</span></span>
<span class="line"><span>|2      |王麻子叔叔      |19      |1       |2021-03-2... |0             |</span></span>
<span class="line"><span>|3      |zhang0        |18      |null    |2023-04-2... |null          |</span></span>
<span class="line"><span>|4      |zhang1        |18      |null    |2023-04-2... |null          |</span></span>
<span class="line"><span>|5      |zhang2        |18      |null    |2023-04-2... |null          |</span></span>
<span class="line"><span>|6      |zhang3        |18      |null    |2023-04-2... |null          |</span></span>
<span class="line"><span>|7      |zhang4        |18      |null    |2023-04-2... |null          |</span></span>
<span class="line"><span>|8      |zhang5        |18      |null    |2023-04-2... |null          |</span></span>
<span class="line"><span>|9      |zhang6        |18      |null    |2023-04-2... |null          |</span></span>
<span class="line"><span>|10     |zhang7        |18      |null    |2023-04-2... |null          |</span></span>
<span class="line"><span>|11     |zhang8        |18      |null    |2023-04-2... |null          |</span></span>
<span class="line"><span>|12     |zhang9        |18      |null    |2023-04-2... |null          |</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,62)]))}const c=n(l,[["render",p]]),r=JSON.parse('{"path":"/framework/mybatisflex/base/l1orntao/","title":"Db + Row 工具的使用","lang":"zh-CN","frontmatter":{"title":"Db + Row 工具的使用","createTime":"2025/08/26 17:28:37","permalink":"/framework/mybatisflex/base/l1orntao/"},"readingTime":{"minutes":4.43,"words":1330},"git":{"createdTime":1756736713000},"filePathRelative":"notes/framework/mybatisflex/base/Db和Row工具的使用.md","headers":[]}');export{c as comp,r as data};

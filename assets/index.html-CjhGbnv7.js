import{a as e,c as a,b as n,o as i}from"./app-ZQgO6-gU.js";const l={};function d(t,s){return i(),a("div",null,s[0]||(s[0]=[n(`<h2 id="逻辑删除简介" tabindex="-1"><a class="header-anchor" href="#逻辑删除简介"><span>逻辑删除简介</span></a></h2><p>逻辑删除指的是在删除数据的时候，并非真正的去删除，而是将表中列所对应的状态字段（status）做修改操作， 实际上并未删除目标数据。</p><p>我们可以进行表的字段设计时，用一个列标识该数据的 &quot;删除状态&quot;，在 mybatis-flex 中，正常状态的值为 0， 已删除 的值为 1（可以通过设置 FlexGlobalConfig 来修改这个值）。</p><h2 id="mybatis-flex-逻辑删除示例" tabindex="-1"><a class="header-anchor" href="#mybatis-flex-逻辑删除示例"><span>MyBatis-Flex 逻辑删除示例</span></a></h2><p>假设在 tb_account 表中，存在一个为 is_delete 的字段，用来标识该数据的逻辑删除，那么 tb_account 表 对应的 &quot;Account.java&quot; 实体类应该配置如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>@Table(&quot;tb_account&quot;)</span></span>
<span class="line"><span>public class Account {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Column(isLogicDelete = true)</span></span>
<span class="line"><span>    private Boolean isDelete;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //Getter Setter...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，当我们执行如下的删除代码是：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>accountMapper.deleteById(1);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>MyBatis 执行的 SQL 如下：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>UPDATE \`tb_account\`</span></span>
<span class="line"><span>SET \`is_delete\` = 1</span></span>
<span class="line"><span>WHERE \`id\` = ?</span></span>
<span class="line"><span>  AND \`is_delete\` = 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，当执行 deleteById 时，MyBatis 只是进行了 update 操作，而非 delete 操作。</p><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><p>当 &quot;tb_account&quot; 的数据被删除时（ is_delete = 1 时），我们通过 MyBatis-Flex 的 selectOneById 去查找数据时，会查询不到数据。 原因是 <code>selectOneById</code> 会自动添加上 <code>is_delete = 0</code> 条件，执行的 sql 如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>SELECT * FROM tb_account where id = ? and is_delete = 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>不仅仅是 selectOneById 方法会添加 <code>is_delete = 0</code> 条件，BaseMapper 的以下方法也都会添加该条件：</p><ul><li>selectOneBy**</li><li>selectListBy**</li><li>selectCountBy**</li><li>paginate</li></ul><p>同时，比如 Left Join 或者子查询等，若 <strong>子表也设置了逻辑删除字段</strong>， 那么子表也会添加相应的逻辑删除条件，例如：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>QueryWrapper query1 = QueryWrapper.create()</span></span>
<span class="line"><span>    .select()</span></span>
<span class="line"><span>    .from(ACCOUNT)</span></span>
<span class="line"><span>    .leftJoin(ARTICLE).as(&quot;a&quot;).on(ACCOUNT.ID.eq(ARTICLE.ACCOUNT_ID))</span></span>
<span class="line"><span>    .where(ACCOUNT.AGE.ge(10));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行的 SQL 如下：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>SELECT *</span></span>
<span class="line"><span>FROM \`tb_account\`</span></span>
<span class="line"><span>         LEFT JOIN \`tb_article\` AS \`a\`</span></span>
<span class="line"><span>         ON \`a\`.\`is_delete\` = 0 and \`tb_account\`.\`id\` = \`a\`.\`account_id\`</span></span>
<span class="line"><span>WHERE \`tb_account\`.\`age\` &gt;= 10</span></span>
<span class="line"><span>  AND \`tb_account\`.\`is_delete\` = 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>left join on</code> 条件自动添加：<code>a.is_delete = 0</code>，并在 where 条件添加上 <code>tb_account.is_delete = 0</code>。</p><p>示例 2：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span> QueryWrapper query2 = QueryWrapper.create()</span></span>
<span class="line"><span>    .select()</span></span>
<span class="line"><span>    .from(ACCOUNT)</span></span>
<span class="line"><span>    .leftJoin(</span></span>
<span class="line"><span>            //子查询</span></span>
<span class="line"><span>            select().from(ARTICLE).where(ARTICLE.ID.ge(100))</span></span>
<span class="line"><span>    ).as(&quot;a&quot;).on(</span></span>
<span class="line"><span>            ACCOUNT.ID.eq(raw(&quot;a.id&quot;))</span></span>
<span class="line"><span>    )</span></span>
<span class="line"><span>    .where(ACCOUNT.AGE.ge(10));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行的 SQL 如下：</p><p>sql</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>SELECT *</span></span>
<span class="line"><span>FROM \`tb_account\`</span></span>
<span class="line"><span>         LEFT JOIN (SELECT *</span></span>
<span class="line"><span>                    FROM \`tb_article\`</span></span>
<span class="line"><span>                    WHERE \`id\` &gt;= 100 AND \`is_delete\` = 0) AS \`a\`</span></span>
<span class="line"><span>                   ON \`tb_account\`.\`id\` = a.id</span></span>
<span class="line"><span>WHERE \`tb_account\`.\`age\` &gt;= 10</span></span>
<span class="line"><span>  AND \`tb_account\`.\`is_delete\` = 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="逻辑删除的默认值配置" tabindex="-1"><a class="header-anchor" href="#逻辑删除的默认值配置"><span>逻辑删除的默认值配置</span></a></h2><p>在某些场景下，我们可能希望数据库存入的逻辑删除中的值并非 0 和 1，比如可能是 true 和 false 等，那么，我们可以通过配置 <code>FlexGlobalConfig</code> 来修改这个默认值。</p><p>如下代码所示：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>FlexGlobalConfig globalConfig = FlexGlobalConfig.getDefaultConfig();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//设置数据库正常时的值</span></span>
<span class="line"><span>globalConfig.setNormalValueOfLogicDelete(&quot;...&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//设置数据已被删除时的值</span></span>
<span class="line"><span>globalConfig.setDeletedValueOfLogicDelete(&quot;...&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="跳过逻辑删除处理" tabindex="-1"><a class="header-anchor" href="#跳过逻辑删除处理"><span>跳过逻辑删除处理</span></a></h2><p>在某些场景下，我们再执行查询、更新或删除数据时，有必要跳过 MyBatis-Flex 自动添加的逻辑删除的相关条件， 此时，我们可以使用 LogicDeleteManager.execWithoutLogicDelete() 方法处理，代码如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>LogicDeleteManager.execWithoutLogicDelete(()-&gt;</span></span>
<span class="line"><span>        accountMapper.deleteById(1)</span></span>
<span class="line"><span>        );</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码中，<code>accountMapper</code> 会直接对 <code>Account</code> 数据进行物理删除，忽略逻辑删除字段配置。</p><h2 id="内置逻辑删除处理器" tabindex="-1"><a class="header-anchor" href="#内置逻辑删除处理器"><span>内置逻辑删除处理器</span></a></h2><p>MyBatis-Flex 提供了三种字段类型对应的逻辑删除处理器，用户可以根据逻辑删除字段的类型进行设置，它们分别是：</p><table><thead><tr><th style="text-align:left;">处理器名称</th><th style="text-align:left;">对应字段类型</th><th style="text-align:left;">数据正常时的值</th><th style="text-align:left;">数据被删除时的值</th></tr></thead><tbody><tr><td style="text-align:left;">IntegerLogicDeleteProcessor</td><td style="text-align:left;">integer</td><td style="text-align:left;">0</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">BooleanLogicDeleteProcessor</td><td style="text-align:left;">tinyint</td><td style="text-align:left;">false</td><td style="text-align:left;">true</td></tr><tr><td style="text-align:left;">DateTimeLogicDeleteProcessor</td><td style="text-align:left;">datetime</td><td style="text-align:left;">null</td><td style="text-align:left;">被删除时间</td></tr><tr><td style="text-align:left;">TimeStampLogicDeleteProcessor</td><td style="text-align:left;">bigint</td><td style="text-align:left;">0</td><td style="text-align:left;">被删除时的时间戳</td></tr><tr><td style="text-align:left;">PrimaryKeyLogicDeleteProcessor</td><td style="text-align:left;">该条数据的主键类型</td><td style="text-align:left;">null</td><td style="text-align:left;">该条数据的主键值</td></tr></tbody></table><p>使用时，只需通过 <code>LogicDeleteManager</code> 来设置逻辑删除处理器即可，例如：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>LogicDeleteManager.setProcessor(new DateTimeLogicDeleteProcessor());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="自定义逻辑删除处理功能" tabindex="-1"><a class="header-anchor" href="#自定义逻辑删除处理功能"><span>自定义逻辑删除处理功能</span></a></h2><p>在社区中，有许多用户提出希望使用时间类型，当删除时，设置删除字段为<code>当前时间</code>，当正常时，设置为 <code>0</code> 或者 <code>null</code>。 那么，我们可以通过 <code>LogicDeleteManager</code> 设置一个新的 <code>LogicDeleteProcessor</code>：</p><p><code>LogicDeleteProcessor</code> 接口的内容如下：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public interface LogicDeleteProcessor {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 用户构建查询正常数据的条件</span></span>
<span class="line"><span>     * @param logicColumn</span></span>
<span class="line"><span>     * @param dialect</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    String buildLogicNormalCondition(String logicColumn, IDialect dialect);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 用户与构建删除数据时的内容</span></span>
<span class="line"><span>     * @param logicColumn</span></span>
<span class="line"><span>     * @param dialect</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    String buildLogicDeletedSet(String logicColumn, IDialect dialect);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 用于构建通过 QueryWrapper 查询数据时的内容</span></span>
<span class="line"><span>     * @param queryWrapper</span></span>
<span class="line"><span>     * @param tableInfo</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    void buildQueryCondition(QueryWrapper queryWrapper, TableInfo tableInfo);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体实现可以参考：<a href="https://gitee.com/mybatis-flex/mybatis-flex/blob/main/mybatis-flex-core/src/main/java/com/mybatisflex/core/logicdelete/impl/DefaultLogicDeleteProcessor.java" target="_blank" rel="noopener noreferrer">DefaultLogicDeleteProcessor</a></p><h2 id="逻辑删除时-更新删除时间和删除人" tabindex="-1"><a class="header-anchor" href="#逻辑删除时-更新删除时间和删除人"><span>逻辑删除时，更新删除时间和删除人</span></a></h2><p>有许多用户有这样的需求：</p><blockquote><p>在进行逻辑删除数据时，需要更新当前表的其他字段，比如 <code>删除时间</code>、<code>删除人</code>。</p></blockquote><p>针对这种场景，目前有两个方案：</p><ul><li><strong>方案1：重写 IService 的 removeById 方法</strong></li></ul><p>先更新 <code>deleteTime</code> 和 <code>deleteUserId</code>，然后再进行逻辑删除。同时需要保证这两个方法在同一个事务里进行， 如下代码：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>@Component</span></span>
<span class="line"><span>public class AccountService extends ServiceImpl&lt;AccountMapper, Account&gt; implements IService&lt;Account&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //重写 Service 的 removeById 方法</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public boolean removeById(Serializable id) {</span></span>
<span class="line"><span>        return Db.txWithResult(() -&gt; {</span></span>
<span class="line"><span>            Account account = UpdateEntity.of(Account.class);</span></span>
<span class="line"><span>            account.setId((Long) id);</span></span>
<span class="line"><span>            account.setDeleteTime(new Date());</span></span>
<span class="line"><span>            account.setDeleteUserId(&quot;...&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            super.updateById(account);</span></span>
<span class="line"><span>            return super.removeById(id);</span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>方案2：自定义逻辑删除处理功能</strong></li></ul><p>在自定义的逻辑删除里，添加 <code>deleteTime</code> 和 <code>deleteUserId</code> 字段的更新，如下代码：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class MyLogicDeleteProcessor implements LogicDeleteProcessor {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public String buildLogicDeletedSet(String logicColumn, TableInfo tableInfo, IDialect dialect) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        String sql = dialect.wrap(logicColumn) + EQUALS + prepareValue(getLogicDeletedValue());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //扩展一下软删除的sql语句，增加删除时间和删除人。</span></span>
<span class="line"><span>        sql += &quot;,&quot; + dialect.wrap(&#39;deleteTime&#39;) + EQUALS + &quot;now()&quot;;</span></span>
<span class="line"><span>        sql += &quot;,&quot; + dialect.wrap(&#39;deleteUserId&#39;) + EQUALS + SpringConextUtil.getUserId();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        return sql;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以参考 issue：https://gitee.com/mybatis-flex/mybatis-flex/issues/I7TT51</p><h2 id="springboot-支持" tabindex="-1"><a class="header-anchor" href="#springboot-支持"><span>SpringBoot 支持</span></a></h2><p>在 SpringBoot 项目下，直接通过 <code>@Configuration</code> 即可使用：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>@Configuration</span></span>
<span class="line"><span>public class MyConfiguration {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Bean</span></span>
<span class="line"><span>    public LogicDeleteProcessor logicDeleteProcessor(){</span></span>
<span class="line"><span>        return new DateTimeLogicDeleteProcessor();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="全局配置逻辑删除字段" tabindex="-1"><a class="header-anchor" href="#全局配置逻辑删除字段"><span>全局配置逻辑删除字段</span></a></h2><p>在 <code>MyBatis-Flex</code> 中，可以使用 <code>FlexGlobalConfig</code> 在 <code>MyBatis-Flex</code> 启动之前，指定项目中的逻辑删除列的列名。</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>FlexGlobalConfig.getDefaultConfig().setLogicDeleteColumn(&quot;del_flag&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样就可以省略实体类属性上的 <code>@Column(isLogicDelete = true)</code> 注解了。</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public class Account {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // @Column(isLogicDelete = true)</span></span>
<span class="line"><span>    private Boolean delFlag;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,79)]))}const c=e(l,[["render",d]]),r=JSON.parse('{"path":"/framework/mybatisflex/ad/jb8sda0t/","title":"逻辑删除","lang":"zh-CN","frontmatter":{"title":"逻辑删除","createTime":"2025/08/27 09:42:40","permalink":"/framework/mybatisflex/ad/jb8sda0t/"},"readingTime":{"minutes":4.85,"words":1454},"git":{"createdTime":1756736713000},"filePathRelative":"notes/framework/mybatisflex/ad/逻辑删除.md","headers":[]}');export{c as comp,r as data};

import{a as h,c as t,b as k,d as a,f as i,e as n,w as l,r as d,o as p}from"./app-ZQgO6-gU.js";const r="/lema/images/git/commit-and-tree.png",g="/lema/images/git/commits-and-parents.png",c="/lema/images/git/branch-and-history.png",A="/lema/images/git/head-to-master.png",y="/lema/images/git/head-to-testing.png",o="/lema/images/git/advance-testing.png",u="/lema/images/git/checkout-master.png",v="/lema/images/git/master-merge-testing.png",m="/lema/images/git/advance-master.png",b={};function B(C,s){const e=d("font");return p(),t("div",null,[s[24]||(s[24]=k(`<h2 id="分支工作原理" tabindex="-1"><a class="header-anchor" href="#分支工作原理"><span>分支工作原理</span></a></h2><p>有人把 Git 的分支模型称为它的\`‘必杀技特性’&#39;，也正因为这一特性，使得 Git 从众多版本控制系统中脱颖而出。 为何 Git 的分支模型如此出众呢？ Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同，Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。 理解和精通这一特性，你便会意识到 Git 是如此的强大而又独特，并且从此真正改变你的开发方式</p><p>为了更好地理解git的分支，我们先要理解git是如何存储我们在工作区中的文件的？ 我们在本地仓库中的操作流程是：</p><ul><li>添加或修改文件</li><li>$ git add --all</li><li>$ git commit -m &quot;提交日志&quot;</li></ul><p>完成以上操作后，就相当于把当前工作区中的所有文件和目录都纳入到本地仓库的管理之中了，并且已产生了一次提交，这个过程中我们并没有任何有关<code>分支</code>的操作，但是，现在我需要告诉你的是，当你初始化一个仓库后，默认就有一个叫<code>master</code>的分支存在了。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> status</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">On</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nothing</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> working</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tree</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clean</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，当前就处在<code>master</code>分支之上。</p><p>那么问题来了？分支与提交点、暂存区、文件本身他们又是什么关系？git又是如何来管理分支的呢？它是如何做到如些快速地在多个分支之间切换、创建和删除分支的呢？</p><p>首先，我们的管理是以提交点为始的，整个版本都是由一个又一个的提交点向前推进的，所以，理解提交点至关重要，下面就针对提交点我们做一下解释</p><blockquote><p>每一交的提交，都会把本次所涉及到的所有文件修改归总到一起，生成一个计算校验和【采用SHA-1哈希算法计算出来的】，这个过程也会记录提交者的姓名和邮箱【安装好git后我们就首先配置过的】，然后把所有暂存区的文件以blob格式写入到仓库中，并且返回每个文件的地址，同时，使用树状结构来存储这个文件列表树，这样一来，就可以想象成我们的提交点指向这个文件树，这个文件树中维护指向各个BLOB文件的地址，形成一个<code>快照[Snapshot]</code>, 如下： <img src="`+r+`" alt="" loading="lazy"></p></blockquote><p>这个图中假设本次提交涉及到三个文件，可以看出，提交点有一个唯一的id字符串,它里面维护tree的地址，而tree中维护了涉及到的三个文件的地址. 现在我们可以说，Git 仓库中有五个对象,<code>三个 blob 对象（保存着文件快照）</code>、<code>一个树对象（记录着目录结构和 blob 对象索引）</code>以及一个<code>提交对象（包含着指向前述树对象的指针和所有提交信息）</code></p><p>还记得我们前面讲过，git管理的是<code>修改</code>，并不是最原始的文件，所以，当我们再次添加、删除或修改一些文件后，执行：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --all</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">提交日志</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>会产生另一个提交点，这个提交点的父提交点就是前面一个提交点，除了第一次提交的没有父提交点外，后面的每一次提交都有父提交点，如下： <img src="`+g+'" alt="" loading="lazy"></p><p>这样一来，git就是只需要管理<code>修改</code>即可，因为每一次的提交都是基于上一次的基础，只需要记录哪些文件发生了哪些变化即可。</p><p>有了上面的知识，再来理解<code>分支</code>就相对简单了，因为分支就是指向提交对象的一个<code>可变指针</code>,说它可变，是因为它可以随意在各个提交点上移动，默认情况下，它指向哪个提交点呢？</p><ul><li>master分支是开始就创建出来的，默认情况它总是指向最新的提交点</li><li>我们创建的分支，一开始就是指向当前所在的提交点，随着你产生新的提交点，它也是指向最新的提交点</li><li>而我们知道，每个提交点都有指向它前一个提交点[父提交点]的指针.</li></ul><p>那当有多个分支时，git是如何知道当前我们正在使用哪个分支呢？答案就是HEAD指针，它默认指向master分支，当然，我们也可以让他指向其它的分支，这个稍后介绍，下图是在第3个提交点时创建了另外一个分支，名为v1.0： <img src="'+c+`" alt="" loading="lazy"> 注：每个提交点都对应的一个修改的快照</p><h3 id="创建、删除、合并分支" tabindex="-1"><a class="header-anchor" href="#创建、删除、合并分支"><span>创建、删除、合并分支</span></a></h3><blockquote><p>有了上面的知识，我们就理解了分支的原理，现在我们可以通过命令来创建、删除、列举、合并分支</p></blockquote><h4 id="创建、切换分支" tabindex="-1"><a class="header-anchor" href="#创建、切换分支"><span>创建、切换分支</span></a></h4><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 创建一个新分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new_branch_name</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 切换到新分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new_branch_name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以通一条命令来完成</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new_branch_name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条命令相当于上面的2条操作，创建并切换到新分支上</p><p>案例: 我们创建一个 testing 分支：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testing</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>创建成功后，这时并不会切换到这个新分支上，此时的图示如下： <img src="`+A+`" alt="" loading="lazy"></p><p>也就是在当前分支的最新提交点上，创建出另一个可移动的指针而已，它与master同时指向最新的提交点。</p><p>我们可以通过<code>git log</code> 命令来查看各个分支当前所指的对象，要使用 --decorate 选项</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --decorate</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --oneline</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">79309a2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (HEAD -</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testing</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) delete world.java file</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">190db88</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> modify</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> World.java</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">0ff04d2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 修改World.java文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">e986401</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 添加World.java文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">f6e2999</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (tag: </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">v2.0</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) add new file f4.txt</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，HEAD指向的是master，testing和master都指向<code>79309a2</code>提交点</p><p>使用<code>git checkout</code> 可以切换分支，如下：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testing</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Switched</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">testing</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，HEAD就指向testing了，其它的什么也没有变，如下图： <img src="`+y+`" alt="" loading="lazy"></p><p>如果你此时通过<code>git log</code> 命令来查看，结果是：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --decorate</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --oneline</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">79309a2</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (HEAD -</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testing,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) delete world.java file</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">190db88</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> modify</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> World.java</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">0ff04d2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 修改World.java文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">e986401</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 添加World.java文件</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HEAD指向了testing 分支，所以，切换分支，也就是把HEAD指针指向一个新的分支名，当然，工作区的文件也会根据分支的不同而不同。</p><h4 id="列举所有分支" tabindex="-1"><a class="header-anchor" href="#列举所有分支"><span>列举所有分支</span></a></h4><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> master</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  testing</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>被HEAD指向的分支前面会有一个*号</code>，以表示当前所在的分支。</p><p>此命令还可以带一些选项，来达到不同的目的，如下：</p><ul><li><code>-v 选项</code> 表示显示分支所在的提交点以及日志</li><li><code>--merged</code> 表示只显示被合并过的分支</li><li><code>--no-merged</code> 表示只显示没有被合并的分支</li></ul><h4 id="合并分支" tabindex="-1"><a class="header-anchor" href="#合并分支"><span>合并分支</span></a></h4><blockquote><p>合并分支的目的是为了把一个分支上所做的<code>修改</code>同步到另一个分支上，这个过程有多种不同的策略, 常见的有：</p></blockquote><ul><li>fast forward 模式</li><li>recursive 模式</li><li>其它</li></ul><p>其中,fast forward模式是高效的，它就是直接移动指针快速向前，我们来看一个例子：<br> 我们创建一个新的分支，名为 testing, 并切换到此分支，执行：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testing</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Switched</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">testing</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们修改 f4.txt 文件，添加一行内容 <code>this is a test line in testing branch</code>， 然后添加并提交，执行：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">修改f4.txt文件，增加了一行</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">testing db690e2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 修改f4.txt文件，增加了一行</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> changed,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> insertion</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">+</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在的情况是，testing分支中比master分支中多了一个提交点，下面是示意图: <img src="`+o+`" alt="" loading="lazy"> 可以看出，HEAD指针随着提交自动向前移动，它指向了最新的提交点，而master并没有发生变化。它仍然指向我们切换分支前的提交点位置，这就比较有意思了，现在我们切换回 master 分支，看看会发生什么， 执行：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Switched</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">master</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们同样可以用一个图片来表达一下，如下： <img src="`+u+`" alt="" loading="lazy"> 可以想象，HEAD指向了master分支，同时，工作区中的所有内容都恢复到master分支指向的那个提交点的状态，也就是说，刚才我们在testing分支中所做的修改，此时<code>不见了</code>【但并不意味着它真的不见了 😃】 这样做的好处是我们可以随时回到某一个状态，从这个状态再次出发，而不受testing分支的影响。</p><p><strong>所以，切换分支是会改变工作区中的文件的。</strong></p><p>好了，现在我打算使用testing分支中的修改，我们要做的就是合并分支，首先切换到master分支，然后合并，执行：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testing</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Updating</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 117b6f7..db690e2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Fast-forward</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> f4.txt</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> +</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> changed,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> insertion</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">+</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，git采用了Fast-forward策略，也就是快进策略，直接把master和HEAD一起前进到testing的位置即可，如下图： <img src="`+v+'" alt="" loading="lazy"></p><p>上面演示的是一种比较理想的情况，国为master一直未动，那如果在testing分支做出修改的同时，master 分支也进行了更新，产生了新的提交点，如下面这种情况： <img src="'+m+`" alt="" loading="lazy"> 可以明显地看出，两个分支都向前跨了一步，产生了分叉，这种情况下，合并就不是简单的快进模式，不过好在git也不需要我们去多做什么，它会自动处理这个合并，采用<code>recursive</code>模式寻找恰当的合并基础（译注：即共同祖先），然后也是同样的简单和高效。 这些高效的特性使得 Git 鼓励开发人员频繁地创建和使用分支。</p><p>下面我们显示一下上面的操作：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> issue#2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Switched</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">issue#2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在此分支下面修改 f3.txt 文件，这里我先故意不操作f4.txt文件，等下在master分支中我们修改f4.txt文件, 修改完成后，执行：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">修改f3.txt文件，增加一行</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">issue#2 dda75aa</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 修改f3.txt文件，增加一行</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> changed,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> insertions</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">+</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，issue#2分支多了一个提交点，现在，我们切换到 master 分支，也增加一个提交，如下：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Switched</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">master</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们修改f4.txt文件，新增一行后， 执行</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">修改f4.txt文件，增加一行</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">master 228b255</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 修改f4.txt文件，增加一行</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> changed,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> insertions</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">+</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，master分支和issue#2分支从他们共同的祖先提交点那儿开始分叉了，我们使用<code>git log --graph --all</code>命令可以看到:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --graph</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --oneline</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -all</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 228b255 修改f4.txt文件，增加一行</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> *</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dda75aa</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 修改f3.txt文件，增加一行</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> db690e2 修改f4.txt文件，增加了一行</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   117b6f7 Merge branch </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">testing</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> *</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 2b4645f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> modify</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> readme.txt</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 2393508</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> modify</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> f4.txt</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 79309a2 delete world.java file</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 190db88 modify World.java</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 0ff04d2 修改World.java文件</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">..</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.省</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以很明显地看到，在提交点<code>db690e2</code>处开始分叉了，现在，我们把issue#2分支合并到master分支上，执行：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> issue#2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Merge</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> made</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> by</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> the</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">recursive</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> strategy.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> f3.txt</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> +++</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> changed,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> insertions</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">+</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个过程会产生一次新的提交，并让你输入提交的日志，可以看到上面的模式是<code>recursive</code>, 现在，你再通过<code>git log</code>来查看一下：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  --all</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --oneline</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --graph</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   90a69fa Merge branch </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">issue#2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> *</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dda75aa</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 修改f3.txt文件，增加一行</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 228b255</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 修改f4.txt文件，增加一行</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">/</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> db690e2 修改f4.txt文件，增加了一行</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">   117b6f7 Merge branch </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">testing</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">..</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.省</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你一步一步做到这里，相信你对分支的操作有了一定的理解了，剩下的就是在项目中多加练习了。</p><h4 id="删除分支" tabindex="-1"><a class="header-anchor" href="#删除分支"><span>删除分支</span></a></h4><blockquote><p>当分支已经合并到我们的主干上后，就可以删除这个分支了，因为他上面的所有修改都已合并到其它分支上去了。</p></blockquote><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch_name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条命令就可以删除指定的分支。 注：<br> git 还有一个很好的防误删分支操作，对于一个没有被其它分支合并过的非master分支，使用上面的命令是删除不掉的，git会提示你，如下：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> issue#3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">error:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> The</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">issue#3</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> is</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fully</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merged.</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">If</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> you</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> are</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sure</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> you</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> want</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> delete</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> it,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">git branch -D issue#3</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从提示信息中可以看到，issue#3分支没有被合并，如果你一定要删除，可以使用 -D 选项</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -D</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> issue#3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Deleted</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> issue#3</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (was </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">5dcb65e</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">).</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，需要说明的是，被HEAD指向的分支是不能删除的，你要先切换到其它分支后，才能删除，另外， master分支同样可以删除，<strong>但最好不要这么做。</strong></p><h3 id="解决冲突" tabindex="-1"><a class="header-anchor" href="#解决冲突"><span>解决冲突</span></a></h3><blockquote><p>前面详细地讲解了创建、合并分支的过程，但是上面的例子都很理想，因为都没有冲突，实际的多人协同开发中，或多或少都存在合并时冲突问题，git也提供了很好的解决办法，我们一起来看一下。</p></blockquote><p>问题一：冲突是如何产生的？<br> 上面我们演示过分叉的情况，在分叉后，不同的分支同时修改了同一个文件后，那我们在合并这两个分支时就会有冲突，这个冲突git不会自动解决，需要我们手动介手，但是，git会把两个分支的不同地方，使用特殊的标记给标记起来，方便我们修改。</p><p>问题二：我们手动解决冲突的过程是怎样的？<br> 合并时，会遇到失败，并给出提示有冲突，同时告诉你哪些文件有冲突，我们手动打开所有有冲突的文件，修改好后，依次执行：</p><ul><li>git add 命令， 此命令即告诉git我已解决了冲突【git会根据加入到暂存区来判断是否解决了冲突】</li><li>git commit 命令 【提交解决冲突的决定】</li></ul><p>所以，解决冲突没有什么高深的命令，也没有新的知识，只不过git不能决定，而需要人为介入而已，下面我们来演示一个例子：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> issue#5</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Switched</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> new</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">issue#5</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改文件f4.txt，新增一行,内容为：<code>It&#39;s a real world!</code>, 然后执行：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">更新f4.txt文件，添加一行</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">issue#5 39b0eca</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 更新f4.txt文件，添加一行</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> changed,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> insertion</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">+</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，切换到master分支, 执行</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Switched</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">master</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，修改f4.txt, 新增一行，内容为：<code>It&#39;s a artifical world!</code>, 然后执行:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">更新f4.txt文件，添加一行</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">master ac6f619</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 更新f4.txt文件，添加一行</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> changed,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> insertion</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">+</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好了，现在master分支和issue#5分支都各自修改了f4.txt 文件[最好是修改同一行，不同行的话，git还是会自动合并成功的]，现在，我们在master中，去合并issue#5, 如下：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> issue#5</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Auto-merging</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> f4.txt</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">CONFLICT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (content): Merge conflict in f4.txt</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Automatic</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> failed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fix</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> conflicts</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> and</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> then</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> the</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> result.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，你使用<code>git status</code>查看：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> status</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">On</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">You</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> have</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> unmerged</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> paths.</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fix</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> conflicts</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> and</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">git commit</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">git merge --abort</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> abort</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> the</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Unmerged</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> paths:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">git add &lt;file&gt;...</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mark</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> resolution</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        both</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> modified:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   f4.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">no</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> changes</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> added</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> to</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (use </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">git add</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> and/or</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">git commit -a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，提示<strong>both modified</strong>， 现在，我们打开f4.txt文件，内容如下：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-text"><span class="line"><span>this s a test line in master branch</span></span>
<span class="line"><span>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span></span>
<span class="line"><span>It&#39;s a artifical world!</span></span>
<span class="line"><span>=======</span></span>
<span class="line"><span>It&#39;s a real world!</span></span>
<span class="line"><span>&gt;&gt;&gt;&gt;&gt;&gt;&gt; issue#5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，两个不同的地方采用 ====== 分隔开了，上半部份是当前分支，也就是HEAD指向的，下半部份是被合并的分支，显示是issue#5,现在我们要做的就是决定采用谁的内容，然后删除不要的部份，最后执行<code>git add --all</code> 和 <code>git commit -m &quot;日志&quot;</code></p><p>现在我们把f4.txt改成：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-text"><span class="line"><span>this s a test line in master branch</span></span>
<span class="line"><span>It&#39;s a artifical or real world!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>保存后，执行：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">解决冲突</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样一来，就手动解决了冲突.</p><h3 id="多人协作-基于远程仓库" tabindex="-1"><a class="header-anchor" href="#多人协作-基于远程仓库"><span>多人协作[基于远程仓库]</span></a></h3><blockquote><p>上面的所有讲解都是基于本地仓库的操作，如果我们要跨地区协同开发，大家可能都不在同一个地点办公，我们的版本库如何共享呢？由于git的强大，现在国内外都有很多的平台基于git来托管项目，比较有名的就是github.com, 国内也有像：gitee.com, coding.net 等平台，都是基于git的一个云端项目托管平台，对所有的开源项目都是免费的。</p></blockquote><p>所有需要参与到项目中的人员，首先可以到<a href="https://github.com" target="_blank" rel="noopener noreferrer">github</a>上注册一个帐号，然后就可以参与到一个开源项目中去，当然，我们可以自己创建一个开源项目来做练习。</p><p>有关如何在github上创建一个项目，此处就不再细说，按照提示一步一步完成即可。</p><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库"><span>远程仓库</span></a></h2><blockquote><p>所谓的远程仓库就是指在github这类平台上创建的仓库，也叫项目，通过它，可以让世界各地的程序员协同开发同一个项目或多个项目，我们这里主要是讲解我们在本地如何与远程仓库进行同步操作，在同步之前，我们要先与远程仓库建立关联</p></blockquote><h3 id="如何与远程仓库建立关联" tabindex="-1"><a class="header-anchor" href="#如何与远程仓库建立关联"><span>如何与远程仓库建立关联</span></a></h3><p>主要有两种方式，下面一一讲解<br> 第一种：本地先不创建仓库， 而是直接在github上创建一个项目，创建项目的过程中会自动生成一些文件，如README, .gitignore文件等，然后我们可以获取这个项目的https地址或是ssh地址。然后，在本地的任一位置，右击选择 <code>git bash here</code>, 在打开的命令行窗口中执行：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clone</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://github.com/yourname/your_project_name.git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>成功后，就可以看到在当前目录下，会有一个your_project_name的文件夹，这个文件夹就是从远程克隆下来的，里面本身就是一个git仓库， 然后我们进入到这个目录下，就可以通过git来操作了。</p><p>第二种：在你还没有在远程平台上创建项目之前，你在本地已经创建好项目了，这时，就需要我们把本地的项目同远程的项目关联起来，这种操作同样也要在远程平台上创建一个项目先，方法同上。<br> 然后，执行如下的命令：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 你的远程项目地址,如：https://github.com/yourname/your_project_name.git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条命令执行成功后，我们可以通过：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  http://gitee.com/abc/gitdemo.git</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (fetch)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  http://gitee.com/abc/gitdemo.git</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (push)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来查看是否已经关联上了【本列中的用户名和项目是任意写的，你应该保证一致】，如果发现关联错了，还可以移除，重新关联，如下：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remove</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>移除后，再次执行<code>git remote add origin xxxxxx</code> 命令即可</p><h3 id="如何从远程仓库克隆" tabindex="-1"><a class="header-anchor" href="#如何从远程仓库克隆"><span>如何从远程仓库克隆</span></a></h3><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clone</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://github.com/yourname/your_project_name.git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们上面的例子都是通过https协议进行的，如果要使用ssh协议的话，则事先可以配置ssh，有关这一块的知识点，我后面单独提供一篇文章.</p><h2 id="命令小结" tabindex="-1"><a class="header-anchor" href="#命令小结"><span>命令小结</span></a></h2>`,127)),a("ul",null,[a("li",null,[s[1]||(s[1]=i("$ git branch branch_name     ",-1)),n(e,{color:"red"},{default:l(()=>s[0]||(s[0]=[i("#创建新的分支",-1)])),_:1,__:[0]})]),a("li",null,[s[3]||(s[3]=i("$ git branch -d branch_name     ",-1)),n(e,{color:"red"},{default:l(()=>s[2]||(s[2]=[i("#删除指定的分支",-1)])),_:1,__:[2]})]),a("li",null,[s[5]||(s[5]=i("$ git branch [-v ]| [--merged] | [--no-merged]     ",-1)),n(e,{color:"red"},{default:l(()=>s[4]||(s[4]=[i("#按条件显示分支",-1)])),_:1,__:[4]})]),a("li",null,[s[7]||(s[7]=i("$ git branch -D branch_name     ",-1)),n(e,{color:"red"},{default:l(()=>s[6]||(s[6]=[i("#强制删除指定的分支",-1)])),_:1,__:[6]})]),a("li",null,[s[9]||(s[9]=i("$ git log [--decorate] [--all] [--oneline]     ",-1)),n(e,{color:"red"},{default:l(()=>s[8]||(s[8]=[i("#在提交日志中查看各个分支所在的提交点",-1)])),_:1,__:[8]})]),a("li",null,[s[11]||(s[11]=i("$ git checkout branch_name     ",-1)),n(e,{color:"red"},{default:l(()=>s[10]||(s[10]=[i("#切换到指定的分支",-1)])),_:1,__:[10]})]),a("li",null,[s[13]||(s[13]=i("$ git checkout -b branch_name     ",-1)),n(e,{color:"red"},{default:l(()=>s[12]||(s[12]=[i("#创建并切换分支",-1)])),_:1,__:[12]})]),a("li",null,[s[15]||(s[15]=i("$ git merge branch_name     ",-1)),n(e,{color:"red"},{default:l(()=>s[14]||(s[14]=[i("#合并指定的分支到当前分支中",-1)])),_:1,__:[14]})]),a("li",null,[s[17]||(s[17]=i("$ git remote add https://github.com/username/project_name.git     ",-1)),n(e,{color:"red"},{default:l(()=>s[16]||(s[16]=[i("#把当前本地仓库与远程仓库建立连接",-1)])),_:1,__:[16]})]),a("li",null,[s[19]||(s[19]=i("$ git remote -v     ",-1)),n(e,{color:"red"},{default:l(()=>s[18]||(s[18]=[i("#查看远程仓库连接名",-1)])),_:1,__:[18]})]),a("li",null,[s[21]||(s[21]=i("$ git remote remove origin     ",-1)),n(e,{color:"red"},{default:l(()=>s[20]||(s[20]=[i("#移除与远程仓库的关联，此处的origin是关联名",-1)])),_:1,__:[20]})]),a("li",null,[s[23]||(s[23]=i("$ git clone https://github.com/username/project_name.git     ",-1)),n(e,{color:"red"},{default:l(()=>s[22]||(s[22]=[i("#从远程仓库克隆指定的项目到本地",-1)])),_:1,__:[22]})])])])}const f=h(b,[["render",B]]),E=JSON.parse('{"path":"/tools/git/w7z9sqwv/","title":"Git分支工作原理","lang":"zh-CN","frontmatter":{"title":"Git分支工作原理","createTime":"2025/08/12 17:07:58","permalink":"/tools/git/w7z9sqwv/"},"readingTime":{"minutes":17.46,"words":5237},"git":{"createdTime":1756736713000},"filePathRelative":"notes/tools/git/git-2.md","headers":[]}');export{f as comp,E as data};

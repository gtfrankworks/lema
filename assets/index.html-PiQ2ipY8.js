import{a as n,c as a,b as i,o as l}from"./app-ZQgO6-gU.js";const e={};function p(d,s){return l(),a("div",null,s[0]||(s[0]=[i(`<h3 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作"><span>基本操作</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* Windows服务 */</span></span>
<span class="line"><span>-- 启动 MySQL</span></span>
<span class="line"><span>			net start mysql</span></span>
<span class="line"><span>-- 创建Windows服务</span></span>
<span class="line"><span>				sc create mysql binPath= mysqld_bin_path(注意：等号与值之间有空格)</span></span>
<span class="line"><span>/* 连接与断开服务器 */</span></span>
<span class="line"><span>-- 连接 MySQL</span></span>
<span class="line"><span>				mysql -h 地址 -P 端口 -u 用户名 -p 密码</span></span>
<span class="line"><span>-- 显示哪些线程正在运行</span></span>
<span class="line"><span>				SHOW PROCESSLIST</span></span>
<span class="line"><span>-- 显示系统变量信息</span></span>
<span class="line"><span>				SHOW VARIABLES</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据库操作" tabindex="-1"><a class="header-anchor" href="#数据库操作"><span>数据库操作</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* 数据库操作 */</span></span>
<span class="line"><span>-- 查看当前数据库</span></span>
<span class="line"><span>    SELECT DATABASE();</span></span>
<span class="line"><span>-- 显示当前时间、用户名、数据库版本</span></span>
<span class="line"><span>    SELECT now(), user(), version();</span></span>
<span class="line"><span>-- 创建库</span></span>
<span class="line"><span>    CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项</span></span>
<span class="line"><span>    数据库选项：</span></span>
<span class="line"><span>        CHARACTER SET charset_name</span></span>
<span class="line"><span>        COLLATE collation_name</span></span>
<span class="line"><span>-- 查看已有库</span></span>
<span class="line"><span>    SHOW DATABASES[ LIKE &#39;PATTERN&#39;]</span></span>
<span class="line"><span>-- 查看当前库信息</span></span>
<span class="line"><span>    SHOW CREATE DATABASE 数据库名</span></span>
<span class="line"><span>-- 修改库的选项信息</span></span>
<span class="line"><span>    ALTER DATABASE 库名 选项信息</span></span>
<span class="line"><span>-- 删除库</span></span>
<span class="line"><span>    DROP DATABASE[ IF EXISTS] 数据库名</span></span>
<span class="line"><span>        同时删除该数据库相关的目录及其目录内容</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="表的操作" tabindex="-1"><a class="header-anchor" href="#表的操作"><span>表的操作</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* 表的操作  */</span></span>
<span class="line"><span>-- 创建表</span></span>
<span class="line"><span>    CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]</span></span>
<span class="line"><span>        每个字段必须有数据类型</span></span>
<span class="line"><span>        最后一个字段后不能有逗号</span></span>
<span class="line"><span>        TEMPORARY 临时表，会话结束时表自动消失</span></span>
<span class="line"><span>        对于字段的定义：</span></span>
<span class="line"><span>            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT &#39;string&#39;]</span></span>
<span class="line"><span>-- 表选项</span></span>
<span class="line"><span>    -- 字符集</span></span>
<span class="line"><span>        CHARSET = charset_name</span></span>
<span class="line"><span>        如果表没有设定，则使用数据库字符集</span></span>
<span class="line"><span>    -- 存储引擎</span></span>
<span class="line"><span>        ENGINE = engine_name</span></span>
<span class="line"><span>        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同</span></span>
<span class="line"><span>        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive</span></span>
<span class="line"><span>        不同的引擎在保存表的结构和数据时采用不同的方式</span></span>
<span class="line"><span>        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引</span></span>
<span class="line"><span>        InnoDB表文件含义：.frm表定义，表空间数据和日志文件</span></span>
<span class="line"><span>        SHOW ENGINES -- 显示存储引擎的状态信息</span></span>
<span class="line"><span>        SHOW ENGINE 引擎名 {LOGS|STATUS} -- 显示存储引擎的日志或状态信息</span></span>
<span class="line"><span>    -- 自增起始数</span></span>
<span class="line"><span>    	AUTO_INCREMENT = 行数</span></span>
<span class="line"><span>    -- 数据文件目录</span></span>
<span class="line"><span>        DATA DIRECTORY = &#39;目录&#39;</span></span>
<span class="line"><span>    -- 索引文件目录</span></span>
<span class="line"><span>        INDEX DIRECTORY = &#39;目录&#39;</span></span>
<span class="line"><span>    -- 表注释</span></span>
<span class="line"><span>        COMMENT = &#39;string&#39;</span></span>
<span class="line"><span>    -- 分区选项</span></span>
<span class="line"><span>        PARTITION BY ... (详细见手册)</span></span>
<span class="line"><span>-- 查看所有表</span></span>
<span class="line"><span>    SHOW TABLES[ LIKE &#39;pattern&#39;]</span></span>
<span class="line"><span>    SHOW TABLES FROM  库名</span></span>
<span class="line"><span>-- 查看表结构</span></span>
<span class="line"><span>    SHOW CREATE TABLE 表名 （信息更详细）</span></span>
<span class="line"><span>    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE &#39;PATTERN&#39;]</span></span>
<span class="line"><span>    SHOW TABLE STATUS [FROM db_name] [LIKE &#39;pattern&#39;]</span></span>
<span class="line"><span>-- 修改表</span></span>
<span class="line"><span>    -- 修改表本身的选项</span></span>
<span class="line"><span>        ALTER TABLE 表名 表的选项</span></span>
<span class="line"><span>        eg: ALTER TABLE 表名 ENGINE=MYISAM;</span></span>
<span class="line"><span>    -- 对表进行重命名</span></span>
<span class="line"><span>        RENAME TABLE 原表名 TO 新表名</span></span>
<span class="line"><span>        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）</span></span>
<span class="line"><span>        -- RENAME可以交换两个表名</span></span>
<span class="line"><span>    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）</span></span>
<span class="line"><span>        ALTER TABLE 表名 操作名</span></span>
<span class="line"><span>        -- 操作名</span></span>
<span class="line"><span>            ADD[ COLUMN] 字段定义       -- 增加字段</span></span>
<span class="line"><span>                AFTER 字段名          -- 表示增加在该字段名后面</span></span>
<span class="line"><span>                FIRST               -- 表示增加在第一个</span></span>
<span class="line"><span>            ADD PRIMARY KEY(字段名)   -- 创建主键</span></span>
<span class="line"><span>            ADD UNIQUE [索引名] (字段名)-- 创建唯一索引</span></span>
<span class="line"><span>            ADD INDEX [索引名] (字段名) -- 创建普通索引</span></span>
<span class="line"><span>            DROP[ COLUMN] 字段名      -- 删除字段</span></span>
<span class="line"><span>            MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)</span></span>
<span class="line"><span>            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改</span></span>
<span class="line"><span>            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)</span></span>
<span class="line"><span>            DROP INDEX 索引名 -- 删除索引</span></span>
<span class="line"><span>            DROP FOREIGN KEY 外键    -- 删除外键</span></span>
<span class="line"><span>-- 删除表</span></span>
<span class="line"><span>    DROP TABLE[ IF EXISTS] 表名 ...</span></span>
<span class="line"><span>-- 清空表数据</span></span>
<span class="line"><span>    TRUNCATE [TABLE] 表名</span></span>
<span class="line"><span>-- 复制表结构</span></span>
<span class="line"><span>    CREATE TABLE 表名 LIKE 要复制的表名</span></span>
<span class="line"><span>-- 复制表结构和数据</span></span>
<span class="line"><span>    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名</span></span>
<span class="line"><span>-- 检查表是否有错误</span></span>
<span class="line"><span>    CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span></span>
<span class="line"><span>-- 优化表</span></span>
<span class="line"><span>    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span></span>
<span class="line"><span>-- 修复表</span></span>
<span class="line"><span>    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]</span></span>
<span class="line"><span>-- 分析表</span></span>
<span class="line"><span>    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据操作" tabindex="-1"><a class="header-anchor" href="#数据操作"><span>数据操作</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* 数据操作 */ ------------------</span></span>
<span class="line"><span>-- 增</span></span>
<span class="line"><span>    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]</span></span>
<span class="line"><span>        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。</span></span>
<span class="line"><span>        -- 可同时插入多条数据记录！</span></span>
<span class="line"><span>        REPLACE与INSERT类似，唯一的区别是对于匹配的行，现有行（与主键/唯一键比较）的数据会被替换，如果没有现有行，则插入新行。</span></span>
<span class="line"><span>    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]</span></span>
<span class="line"><span>-- 查</span></span>
<span class="line"><span>    SELECT 字段列表 FROM 表名[ 其他子句]</span></span>
<span class="line"><span>        -- 可来自多个表的多个字段</span></span>
<span class="line"><span>        -- 其他子句可以不使用</span></span>
<span class="line"><span>        -- 字段列表可以用*代替，表示所有字段</span></span>
<span class="line"><span>-- 删</span></span>
<span class="line"><span>    DELETE FROM 表名[ 删除条件子句]</span></span>
<span class="line"><span>        没有条件子句，则会删除全部</span></span>
<span class="line"><span>-- 改</span></span>
<span class="line"><span>    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符集编码" tabindex="-1"><a class="header-anchor" href="#字符集编码"><span>字符集编码</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* 字符集编码 */ ------------------</span></span>
<span class="line"><span>-- MySQL、数据库、表、字段均可设置编码</span></span>
<span class="line"><span>-- 数据编码与客户端编码不需一致</span></span>
<span class="line"><span>SHOW VARIABLES LIKE &#39;character_set_%&#39;   -- 查看所有字符集编码项</span></span>
<span class="line"><span>    character_set_client        客户端向服务器发送数据时使用的编码</span></span>
<span class="line"><span>    character_set_results       服务器端将结果返回给客户端所使用的编码</span></span>
<span class="line"><span>    character_set_connection    连接层编码</span></span>
<span class="line"><span>SET 变量名 = 变量值</span></span>
<span class="line"><span>    SET character_set_client = gbk;</span></span>
<span class="line"><span>    SET character_set_results = gbk;</span></span>
<span class="line"><span>    SET character_set_connection = gbk;</span></span>
<span class="line"><span>SET NAMES GBK;  -- 相当于完成以上三个设置</span></span>
<span class="line"><span>-- 校对集</span></span>
<span class="line"><span>    校对集用以排序</span></span>
<span class="line"><span>    SHOW CHARACTER SET [LIKE &#39;pattern&#39;]/SHOW CHARSET [LIKE &#39;pattern&#39;]   查看所有字符集</span></span>
<span class="line"><span>    SHOW COLLATION [LIKE &#39;pattern&#39;]     查看所有校对集</span></span>
<span class="line"><span>    CHARSET 字符集编码     设置字符集编码</span></span>
<span class="line"><span>    COLLATE 校对集编码     设置校对集编码</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据类型-列类型" tabindex="-1"><a class="header-anchor" href="#数据类型-列类型"><span>数据类型(列类型)</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* 数据类型（列类型） */ ------------------</span></span>
<span class="line"><span>1. 数值类型</span></span>
<span class="line"><span>-- a. 整型 ----------</span></span>
<span class="line"><span>    类型         字节     范围（有符号位）</span></span>
<span class="line"><span>    tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255</span></span>
<span class="line"><span>    smallint    2字节    -32768 ~ 32767</span></span>
<span class="line"><span>    mediumint   3字节    -8388608 ~ 8388607</span></span>
<span class="line"><span>    int         4字节</span></span>
<span class="line"><span>    bigint      8字节</span></span>
<span class="line"><span>    int(M)  M表示总位数</span></span>
<span class="line"><span>    - 默认存在符号位，unsigned 属性修改</span></span>
<span class="line"><span>    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改</span></span>
<span class="line"><span>        例：int(5)   插入一个数&#39;123&#39;，补填后为&#39;00123&#39;</span></span>
<span class="line"><span>    - 在满足要求的情况下，越小越好。</span></span>
<span class="line"><span>    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。</span></span>
<span class="line"><span>-- b. 浮点型 ----------</span></span>
<span class="line"><span>    类型             字节     范围</span></span>
<span class="line"><span>    float(单精度)     4字节</span></span>
<span class="line"><span>    double(双精度)    8字节</span></span>
<span class="line"><span>    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。</span></span>
<span class="line"><span>        不同于整型，前后均会补填0.</span></span>
<span class="line"><span>    定义浮点型时，需指定总位数和小数位数。</span></span>
<span class="line"><span>        float(M, D)     double(M, D)</span></span>
<span class="line"><span>        M表示总位数，D表示小数位数。</span></span>
<span class="line"><span>        M和D的大小会决定浮点数的范围。不同于整型的固定范围。</span></span>
<span class="line"><span>        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。</span></span>
<span class="line"><span>        支持科学计数法表示。</span></span>
<span class="line"><span>        浮点数表示近似值。</span></span>
<span class="line"><span>-- c. 定点数 ----------</span></span>
<span class="line"><span>    decimal -- 可变长度</span></span>
<span class="line"><span>    decimal(M, D)   M也表示总位数，D表示小数位数。</span></span>
<span class="line"><span>    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。</span></span>
<span class="line"><span>    将浮点数转换为字符串来保存，每9位数字保存为4个字节。</span></span>
<span class="line"><span>2. 字符串类型</span></span>
<span class="line"><span>-- a. char, varchar ----------</span></span>
<span class="line"><span>    char    定长字符串，速度快，但浪费空间</span></span>
<span class="line"><span>    varchar 变长字符串，速度慢，但节省空间</span></span>
<span class="line"><span>    M表示能存储的最大长度，此长度是字符数，非字节数。</span></span>
<span class="line"><span>    不同的编码，所占用的空间不同。</span></span>
<span class="line"><span>    char,最多255个字符，与编码无关。</span></span>
<span class="line"><span>    varchar,最多65535字符，与编码有关。</span></span>
<span class="line"><span>    一条有效记录最大不能超过65535个字节。</span></span>
<span class="line"><span>        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符</span></span>
<span class="line"><span>    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。</span></span>
<span class="line"><span>    varchar 的最大有效长度由最大行大小和使用的字符集确定。</span></span>
<span class="line"><span>    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是65535-1-2=65532字节。</span></span>
<span class="line"><span>    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3</span></span>
<span class="line"><span>-- b. blob, text ----------</span></span>
<span class="line"><span>    blob 二进制字符串（字节字符串）</span></span>
<span class="line"><span>        tinyblob, blob, mediumblob, longblob</span></span>
<span class="line"><span>    text 非二进制字符串（字符字符串）</span></span>
<span class="line"><span>        tinytext, text, mediumtext, longtext</span></span>
<span class="line"><span>    text 在定义时，不需要定义长度，也不会计算总长度。</span></span>
<span class="line"><span>    text 类型在定义时，不可给default值</span></span>
<span class="line"><span>-- c. binary, varbinary ----------</span></span>
<span class="line"><span>    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。</span></span>
<span class="line"><span>    char, varchar, text 对应 binary, varbinary, blob.</span></span>
<span class="line"><span>3. 日期时间类型</span></span>
<span class="line"><span>    一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。</span></span>
<span class="line"><span>    datetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59</span></span>
<span class="line"><span>    date        3字节    日期         1000-01-01 到 9999-12-31</span></span>
<span class="line"><span>    timestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07</span></span>
<span class="line"><span>    time        3字节    时间         -838:59:59 到 838:59:59</span></span>
<span class="line"><span>    year        1字节    年份         1901 - 2155</span></span>
<span class="line"><span>datetime    YYYY-MM-DD hh:mm:ss</span></span>
<span class="line"><span>timestamp   YY-MM-DD hh:mm:ss</span></span>
<span class="line"><span>            YYYYMMDDhhmmss</span></span>
<span class="line"><span>            YYMMDDhhmmss</span></span>
<span class="line"><span>            YYYYMMDDhhmmss</span></span>
<span class="line"><span>            YYMMDDhhmmss</span></span>
<span class="line"><span>date        YYYY-MM-DD</span></span>
<span class="line"><span>            YY-MM-DD</span></span>
<span class="line"><span>            YYYYMMDD</span></span>
<span class="line"><span>            YYMMDD</span></span>
<span class="line"><span>            YYYYMMDD</span></span>
<span class="line"><span>            YYMMDD</span></span>
<span class="line"><span>time        hh:mm:ss</span></span>
<span class="line"><span>            hhmmss</span></span>
<span class="line"><span>            hhmmss</span></span>
<span class="line"><span>year        YYYY</span></span>
<span class="line"><span>            YY</span></span>
<span class="line"><span>            YYYY</span></span>
<span class="line"><span>            YY</span></span>
<span class="line"><span>4. 枚举和集合</span></span>
<span class="line"><span>-- 枚举(enum) ----------</span></span>
<span class="line"><span>enum(val1, val2, val3...)</span></span>
<span class="line"><span>    在已知的值中进行单选。最大数量为65535.</span></span>
<span class="line"><span>    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。</span></span>
<span class="line"><span>    表现为字符串类型，存储却是整型。</span></span>
<span class="line"><span>    NULL值的索引是NULL。</span></span>
<span class="line"><span>    空字符串错误值的索引值是0。</span></span>
<span class="line"><span>-- 集合（set） ----------</span></span>
<span class="line"><span>set(val1, val2, val3...)</span></span>
<span class="line"><span>    create table tab ( gender set(&#39;男&#39;, &#39;女&#39;, &#39;无&#39;) );</span></span>
<span class="line"><span>    insert into tab values (&#39;男, 女&#39;);</span></span>
<span class="line"><span>    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。</span></span>
<span class="line"><span>    当创建表时，SET成员值的尾部空格将自动被删除。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列属性-列约束" tabindex="-1"><a class="header-anchor" href="#列属性-列约束"><span>列属性(列约束)</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* 列属性（列约束） */ ------------------</span></span>
<span class="line"><span>1. PRIMARY 主键</span></span>
<span class="line"><span>    - 能唯一标识记录的字段，可以作为主键。</span></span>
<span class="line"><span>    - 一个表只能有一个主键。</span></span>
<span class="line"><span>    - 主键具有唯一性。</span></span>
<span class="line"><span>    - 声明字段时，用 primary key 标识。</span></span>
<span class="line"><span>        也可以在字段列表之后声明</span></span>
<span class="line"><span>            例：create table tab ( id int, stu varchar(10), primary key (id));</span></span>
<span class="line"><span>    - 主键字段的值不能为null。</span></span>
<span class="line"><span>    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。</span></span>
<span class="line"><span>        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));</span></span>
<span class="line"><span>2. UNIQUE 唯一索引（唯一约束）</span></span>
<span class="line"><span>    使得某字段的值也不能重复。</span></span>
<span class="line"><span>3. NULL 约束</span></span>
<span class="line"><span>    null不是数据类型，是列的一个属性。</span></span>
<span class="line"><span>    表示当前列是否可以为null，表示什么都没有。</span></span>
<span class="line"><span>    null, 允许为空。默认。</span></span>
<span class="line"><span>    not null, 不允许为空。</span></span>
<span class="line"><span>    insert into tab values (null, &#39;val&#39;);</span></span>
<span class="line"><span>        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null</span></span>
<span class="line"><span>4. DEFAULT 默认值属性</span></span>
<span class="line"><span>    当前字段的默认值。</span></span>
<span class="line"><span>    insert into tab values (default, &#39;val&#39;);    -- 此时表示强制使用默认值。</span></span>
<span class="line"><span>    create table tab ( add_time timestamp default current_timestamp );</span></span>
<span class="line"><span>        -- 表示将当前时间的时间戳设为默认值。</span></span>
<span class="line"><span>        current_date, current_time</span></span>
<span class="line"><span>5. AUTO_INCREMENT 自动增长约束</span></span>
<span class="line"><span>    自动增长必须为索引（主键或unique）</span></span>
<span class="line"><span>    只能存在一个字段为自动增长。</span></span>
<span class="line"><span>    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;</span></span>
<span class="line"><span>6. COMMENT 注释</span></span>
<span class="line"><span>    例：create table tab ( id int ) comment &#39;注释内容&#39;;</span></span>
<span class="line"><span>7. FOREIGN KEY 外键约束</span></span>
<span class="line"><span>    用于限制主表与从表数据完整性。</span></span>
<span class="line"><span>    alter table t1 add constraint \`t1_t2_fk\` foreign key (t1_id) references t2(id);</span></span>
<span class="line"><span>        -- 将表t1的t1_id外键关联到表t2的id字段。</span></span>
<span class="line"><span>        -- 每个外键都有一个名字，可以通过 constraint 指定</span></span>
<span class="line"><span>    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。</span></span>
<span class="line"><span>    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。</span></span>
<span class="line"><span>    MySQL中，可以对InnoDB引擎使用外键约束：</span></span>
<span class="line"><span>    语法：</span></span>
<span class="line"><span>    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]</span></span>
<span class="line"><span>    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。</span></span>
<span class="line"><span>    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。</span></span>
<span class="line"><span>    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：</span></span>
<span class="line"><span>    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。</span></span>
<span class="line"><span>    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。</span></span>
<span class="line"><span>    3. restrict，拒绝父表删除和更新。</span></span>
<span class="line"><span>    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="建表规范" tabindex="-1"><a class="header-anchor" href="#建表规范"><span>建表规范</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* 建表规范 */ ------------------</span></span>
<span class="line"><span>    -- Normal Format, NF</span></span>
<span class="line"><span>        - 每个表保存一个实体信息</span></span>
<span class="line"><span>        - 每个具有一个ID字段作为主键</span></span>
<span class="line"><span>        - ID主键 + 原子表</span></span>
<span class="line"><span>    -- 1NF, 第一范式</span></span>
<span class="line"><span>        字段不能再分，就满足第一范式。</span></span>
<span class="line"><span>    -- 2NF, 第二范式</span></span>
<span class="line"><span>        满足第一范式的前提下，不能出现部分依赖。</span></span>
<span class="line"><span>        消除复合主键就可以避免部分依赖。增加单列关键字。</span></span>
<span class="line"><span>    -- 3NF, 第三范式</span></span>
<span class="line"><span>        满足第二范式的前提下，不能出现传递依赖。</span></span>
<span class="line"><span>        某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。</span></span>
<span class="line"><span>        将一个实体信息的数据放在一个表内实现。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>SELECT</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* SELECT */ ------------------</span></span>
<span class="line"><span>SELECT [ALL|DISTINCT] select_expr FROM -&gt; WHERE -&gt; GROUP BY [合计函数] -&gt; HAVING -&gt; ORDER BY -&gt; LIMIT</span></span>
<span class="line"><span>a. select_expr</span></span>
<span class="line"><span>    -- 可以用 * 表示所有字段。</span></span>
<span class="line"><span>        select * from tb;</span></span>
<span class="line"><span>    -- 可以使用表达式（计算公式、函数调用、字段也是个表达式）</span></span>
<span class="line"><span>        select stu, 29+25, now() from tb;</span></span>
<span class="line"><span>    -- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。</span></span>
<span class="line"><span>        - 使用 as 关键字，也可省略 as.</span></span>
<span class="line"><span>        select stu+10 as add10 from tb;</span></span>
<span class="line"><span>b. FROM 子句</span></span>
<span class="line"><span>    用于标识查询来源。</span></span>
<span class="line"><span>    -- 可以为表起别名。使用as关键字。</span></span>
<span class="line"><span>        SELECT * FROM tb1 AS tt, tb2 AS bb;</span></span>
<span class="line"><span>    -- from子句后，可以同时出现多个表。</span></span>
<span class="line"><span>        -- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。</span></span>
<span class="line"><span>        SELECT * FROM tb1, tb2;</span></span>
<span class="line"><span>    -- 向优化符提示如何选择索引</span></span>
<span class="line"><span>        USE INDEX、IGNORE INDEX、FORCE INDEX</span></span>
<span class="line"><span>        SELECT * FROM table1 USE INDEX (key1,key2) WHERE key1=1 AND key2=2 AND key3=3;</span></span>
<span class="line"><span>        SELECT * FROM table1 IGNORE INDEX (key3) WHERE key1=1 AND key2=2 AND key3=3;</span></span>
<span class="line"><span>c. WHERE 子句</span></span>
<span class="line"><span>    -- 从from获得的数据源中进行筛选。</span></span>
<span class="line"><span>    -- 整型1表示真，0表示假。</span></span>
<span class="line"><span>    -- 表达式由运算符和运算数组成。</span></span>
<span class="line"><span>        -- 运算数：变量（字段）、值、函数返回值</span></span>
<span class="line"><span>        -- 运算符：</span></span>
<span class="line"><span>            =, &lt;=&gt;, &lt;&gt;, !=, &lt;=, &lt;, &gt;=, &gt;, !, &amp;&amp;, ||,</span></span>
<span class="line"><span>            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor</span></span>
<span class="line"><span>            is/is not 加上true/false/unknown，检验某个值的真假</span></span>
<span class="line"><span>            &lt;=&gt;与&lt;&gt;功能相同，&lt;=&gt;可用于null比较</span></span>
<span class="line"><span>d. GROUP BY 子句, 分组子句</span></span>
<span class="line"><span>    GROUP BY 字段/别名 [排序方式]</span></span>
<span class="line"><span>    分组后会进行排序。升序：ASC，降序：DESC</span></span>
<span class="line"><span>    以下[合计函数]需配合 GROUP BY 使用：</span></span>
<span class="line"><span>    count 返回不同的非NULL值数目  count(*)、count(字段)</span></span>
<span class="line"><span>    sum 求和</span></span>
<span class="line"><span>    max 求最大值</span></span>
<span class="line"><span>    min 求最小值</span></span>
<span class="line"><span>    avg 求平均值</span></span>
<span class="line"><span>    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。</span></span>
<span class="line"><span>e. HAVING 子句，条件子句</span></span>
<span class="line"><span>    与 where 功能、用法相同，执行时机不同。</span></span>
<span class="line"><span>    where 在开始时执行检测数据，对原数据进行过滤。</span></span>
<span class="line"><span>    having 对筛选出的结果再次进行过滤。</span></span>
<span class="line"><span>    having 字段必须是查询出来的，where 字段必须是数据表存在的。</span></span>
<span class="line"><span>    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。</span></span>
<span class="line"><span>    where 不可以使用合计函数。一般需用合计函数才会用 having</span></span>
<span class="line"><span>    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。</span></span>
<span class="line"><span>f. ORDER BY 子句，排序子句</span></span>
<span class="line"><span>    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...</span></span>
<span class="line"><span>    升序：ASC，降序：DESC</span></span>
<span class="line"><span>    支持多个字段的排序。</span></span>
<span class="line"><span>g. LIMIT 子句，限制结果数量子句</span></span>
<span class="line"><span>    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。</span></span>
<span class="line"><span>    limit 起始位置, 获取条数</span></span>
<span class="line"><span>    省略第一个参数，表示从索引0开始。limit 获取条数</span></span>
<span class="line"><span>h. DISTINCT, ALL 选项</span></span>
<span class="line"><span>    distinct 去除重复记录</span></span>
<span class="line"><span>    默认为 all, 全部记录</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="union" tabindex="-1"><a class="header-anchor" href="#union"><span>UNION</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* UNION */ ------------------</span></span>
<span class="line"><span>      将多个select查询的结果组合成一个结果集合。</span></span>
<span class="line"><span>      SELECT ... UNION [ALL|DISTINCT] SELECT ...</span></span>
<span class="line"><span>      默认 DISTINCT 方式，即所有返回的行都是唯一的</span></span>
<span class="line"><span>      建议，对每个SELECT查询加上小括号包裹。</span></span>
<span class="line"><span>      ORDER BY 排序时，需加上 LIMIT 进行结合。</span></span>
<span class="line"><span>      需要各select查询的字段数量一样。</span></span>
<span class="line"><span>      每个select查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条select语句为准。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子查询" tabindex="-1"><a class="header-anchor" href="#子查询"><span>子查询</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* 子查询 */ ------------------</span></span>
<span class="line"><span>    - 子查询需用括号包裹。</span></span>
<span class="line"><span>-- from型</span></span>
<span class="line"><span>    from后要求是一个表，必须给子查询结果取个别名。</span></span>
<span class="line"><span>    - 简化每个查询内的条件。</span></span>
<span class="line"><span>    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。</span></span>
<span class="line"><span>    - 子查询返回一个表，表型子查询。</span></span>
<span class="line"><span>    select * from (select * from tb where id&gt;0) as subfrom where id&gt;1;</span></span>
<span class="line"><span>-- where型</span></span>
<span class="line"><span>    - 子查询返回一个值，标量子查询。</span></span>
<span class="line"><span>    - 不需要给子查询取别名。</span></span>
<span class="line"><span>    - where子查询内的表，不能直接用以更新。</span></span>
<span class="line"><span>    select * from tb where money = (select max(money) from tb);</span></span>
<span class="line"><span>    -- 列子查询</span></span>
<span class="line"><span>        如果子查询结果返回的是一列。</span></span>
<span class="line"><span>        使用 in 或 not in 完成查询</span></span>
<span class="line"><span>        exists 和 not exists 条件</span></span>
<span class="line"><span>            如果子查询返回数据，则返回1或0。常用于判断条件。</span></span>
<span class="line"><span>            select column1 from t1 where exists (select * from t2);</span></span>
<span class="line"><span>    -- 行子查询</span></span>
<span class="line"><span>        查询条件是一个行。</span></span>
<span class="line"><span>        select * from t1 where (id, gender) in (select id, gender from t2);</span></span>
<span class="line"><span>        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)</span></span>
<span class="line"><span>        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。</span></span>
<span class="line"><span>    -- 特殊运算符</span></span>
<span class="line"><span>    != all()    相当于 not in</span></span>
<span class="line"><span>    = some()    相当于 in。any 是 some 的别名</span></span>
<span class="line"><span>    != some()   不等同于 not in，不等于其中某一个。</span></span>
<span class="line"><span>    all, some 可以配合其他运算符一起使用。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="连接查询-join" tabindex="-1"><a class="header-anchor" href="#连接查询-join"><span>连接查询(join)</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* 连接查询(join) */ ------------------</span></span>
<span class="line"><span>    将多个表的字段进行连接，可以指定连接条件。</span></span>
<span class="line"><span>-- 内连接(inner join)</span></span>
<span class="line"><span>    - 默认就是内连接，可省略inner。</span></span>
<span class="line"><span>    - 只有数据存在时才能发送连接。即连接结果不能出现空行。</span></span>
<span class="line"><span>    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）</span></span>
<span class="line"><span>    也可用where表示连接条件。</span></span>
<span class="line"><span>    还有 using, 但需字段名相同。 using(字段名)</span></span>
<span class="line"><span>    -- 交叉连接 cross join</span></span>
<span class="line"><span>        即，没有条件的内连接。</span></span>
<span class="line"><span>        select * from tb1 cross join tb2;</span></span>
<span class="line"><span>-- 外连接(outer join)</span></span>
<span class="line"><span>    - 如果数据不存在，也会出现在连接结果中。</span></span>
<span class="line"><span>    -- 左外连接 left join</span></span>
<span class="line"><span>        如果数据不存在，左表记录会出现，而右表为null填充</span></span>
<span class="line"><span>    -- 右外连接 right join</span></span>
<span class="line"><span>        如果数据不存在，右表记录会出现，而左表为null填充</span></span>
<span class="line"><span>-- 自然连接(natural join)</span></span>
<span class="line"><span>    自动判断连接条件完成连接。</span></span>
<span class="line"><span>    相当于省略了using，会自动查找相同字段名。</span></span>
<span class="line"><span>    natural join</span></span>
<span class="line"><span>    natural left join</span></span>
<span class="line"><span>    natural right join</span></span>
<span class="line"><span>select info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex from info, extra_info where info.stu_num = extra_info.stu_id;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="truncate" tabindex="-1"><a class="header-anchor" href="#truncate"><span>TRUNCATE</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* TRUNCATE */ ------------------</span></span>
<span class="line"><span>TRUNCATE [TABLE] tbl_name</span></span>
<span class="line"><span>清空数据</span></span>
<span class="line"><span>删除重建表</span></span>
<span class="line"><span>区别：</span></span>
<span class="line"><span>1，truncate 是删除表再创建，delete 是逐条删除</span></span>
<span class="line"><span>2，truncate 重置auto_increment的值。而delete不会</span></span>
<span class="line"><span>3，truncate 不知道删除了几条，而delete知道。</span></span>
<span class="line"><span>4，当被用于带分区的表时，truncate 会保留分区</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="备份与还原" tabindex="-1"><a class="header-anchor" href="#备份与还原"><span>备份与还原</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* 备份与还原 */ ------------------</span></span>
<span class="line"><span>备份，将数据的结构与表内数据保存起来。</span></span>
<span class="line"><span>利用 mysqldump 指令完成。</span></span>
<span class="line"><span>-- 导出</span></span>
<span class="line"><span>mysqldump [options] db_name [tables]</span></span>
<span class="line"><span>mysqldump [options] ---database DB1 [DB2 DB3...]</span></span>
<span class="line"><span>mysqldump [options] --all--database</span></span>
<span class="line"><span>1. 导出一张表</span></span>
<span class="line"><span>　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)</span></span>
<span class="line"><span>2. 导出多张表</span></span>
<span class="line"><span>　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)</span></span>
<span class="line"><span>3. 导出所有表</span></span>
<span class="line"><span>　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)</span></span>
<span class="line"><span>4. 导出一个库</span></span>
<span class="line"><span>　　mysqldump -u用户名 -p密码 --lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)</span></span>
<span class="line"><span>可以-w携带WHERE条件</span></span>
<span class="line"><span>-- 导入</span></span>
<span class="line"><span>1. 在登录mysql的情况下：</span></span>
<span class="line"><span>　　source  备份文件</span></span>
<span class="line"><span>2. 在不登录的情况下</span></span>
<span class="line"><span>　　mysql -u用户名 -p密码 库名 &lt; 备份文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="视图" tabindex="-1"><a class="header-anchor" href="#视图"><span>视图</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>什么是视图：</span></span>
<span class="line"><span>    视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。</span></span>
<span class="line"><span>    视图具有表结构文件，但不存在数据文件。</span></span>
<span class="line"><span>    对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。</span></span>
<span class="line"><span>    视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。</span></span>
<span class="line"><span>-- 创建视图</span></span>
<span class="line"><span>CREATE [OR REPLACE] [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}] VIEW view_name [(column_list)] AS select_statement</span></span>
<span class="line"><span>    - 视图名必须唯一，同时不能与表重名。</span></span>
<span class="line"><span>    - 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。</span></span>
<span class="line"><span>    - 可以指定视图执行的算法，通过ALGORITHM指定。</span></span>
<span class="line"><span>    - column_list如果存在，则数目必须等于SELECT语句检索的列数</span></span>
<span class="line"><span>-- 查看结构</span></span>
<span class="line"><span>    SHOW CREATE VIEW view_name</span></span>
<span class="line"><span>-- 删除视图</span></span>
<span class="line"><span>    - 删除视图后，数据依然存在。</span></span>
<span class="line"><span>    - 可同时删除多个视图。</span></span>
<span class="line"><span>    DROP VIEW [IF EXISTS] view_name ...</span></span>
<span class="line"><span>-- 修改视图结构</span></span>
<span class="line"><span>    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。</span></span>
<span class="line"><span>    ALTER VIEW view_name [(column_list)] AS select_statement</span></span>
<span class="line"><span>-- 视图作用</span></span>
<span class="line"><span>    1. 简化业务逻辑</span></span>
<span class="line"><span>    2. 对客户端隐藏真实的表结构</span></span>
<span class="line"><span>-- 视图算法(ALGORITHM)</span></span>
<span class="line"><span>    MERGE       合并</span></span>
<span class="line"><span>        将视图的查询语句，与外部查询需要先合并再执行！</span></span>
<span class="line"><span>    TEMPTABLE   临时表</span></span>
<span class="line"><span>        将视图执行完毕后，形成临时表，再做外层查询！</span></span>
<span class="line"><span>    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事务-transaction" tabindex="-1"><a class="header-anchor" href="#事务-transaction"><span>事务(transaction)</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。</span></span>
<span class="line"><span>    - 支持连续SQL的集体成功或集体撤销。</span></span>
<span class="line"><span>    - 事务是数据库在数据完整性方面的一个功能。</span></span>
<span class="line"><span>    - 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。</span></span>
<span class="line"><span>    - InnoDB被称为事务安全型引擎。</span></span>
<span class="line"><span>-- 事务开启</span></span>
<span class="line"><span>    START TRANSACTION; 或者 BEGIN;</span></span>
<span class="line"><span>    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。</span></span>
<span class="line"><span>-- 事务提交</span></span>
<span class="line"><span>    COMMIT;</span></span>
<span class="line"><span>-- 事务回滚</span></span>
<span class="line"><span>    ROLLBACK;</span></span>
<span class="line"><span>    如果部分操作发生问题，映射到事务开启前。</span></span>
<span class="line"><span>-- 事务的特性</span></span>
<span class="line"><span>    1. 原子性（Atomicity）</span></span>
<span class="line"><span>        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</span></span>
<span class="line"><span>    2. 一致性（Consistency）</span></span>
<span class="line"><span>        事务前后数据的完整性必须保持一致。</span></span>
<span class="line"><span>        - 事务开始和结束时，外部数据一致</span></span>
<span class="line"><span>        - 在整个事务过程中，操作是连续的</span></span>
<span class="line"><span>    3. 隔离性（Isolation）</span></span>
<span class="line"><span>        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事务所干扰，多个并发事务之间的数据要相互隔离。</span></span>
<span class="line"><span>    4. 持久性（Durability）</span></span>
<span class="line"><span>        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。</span></span>
<span class="line"><span>-- 事务的实现</span></span>
<span class="line"><span>    1. 要求是事务支持的表类型</span></span>
<span class="line"><span>    2. 执行一组相关的操作前开启事务</span></span>
<span class="line"><span>    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。</span></span>
<span class="line"><span>-- 事务的原理</span></span>
<span class="line"><span>    利用InnoDB的自动提交(autocommit)特性完成。</span></span>
<span class="line"><span>    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。</span></span>
<span class="line"><span>    而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。</span></span>
<span class="line"><span>-- 注意</span></span>
<span class="line"><span>    1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。</span></span>
<span class="line"><span>    2. 事务不能被嵌套</span></span>
<span class="line"><span>-- 保存点</span></span>
<span class="line"><span>    SAVEPOINT 保存点名称 -- 设置一个事务保存点</span></span>
<span class="line"><span>    ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点</span></span>
<span class="line"><span>    RELEASE SAVEPOINT 保存点名称 -- 删除保存点</span></span>
<span class="line"><span>-- InnoDB自动提交特性设置</span></span>
<span class="line"><span>    SET autocommit = 0|1;   0表示关闭自动提交，1表示开启自动提交。</span></span>
<span class="line"><span>    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。</span></span>
<span class="line"><span>    - 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，</span></span>
<span class="line"><span>        SET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)</span></span>
<span class="line"><span>        而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="锁表" tabindex="-1"><a class="header-anchor" href="#锁表"><span>锁表</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* 锁表 */</span></span>
<span class="line"><span>表锁定只用于防止其它客户端进行不正当地读取和写入</span></span>
<span class="line"><span>MyISAM 支持表锁，InnoDB 支持行锁</span></span>
<span class="line"><span>-- 锁定</span></span>
<span class="line"><span>    LOCK TABLES tbl_name [AS alias]</span></span>
<span class="line"><span>-- 解锁</span></span>
<span class="line"><span>    UNLOCK TABLES</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="触发器" tabindex="-1"><a class="header-anchor" href="#触发器"><span>触发器</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* 触发器 */ ------------------</span></span>
<span class="line"><span>    触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象</span></span>
<span class="line"><span>    监听：记录的增加、修改、删除。</span></span>
<span class="line"><span>-- 创建触发器</span></span>
<span class="line"><span>CREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt</span></span>
<span class="line"><span>    参数：</span></span>
<span class="line"><span>    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。</span></span>
<span class="line"><span>    trigger_event指明了激活触发程序的语句的类型</span></span>
<span class="line"><span>        INSERT：将新行插入表时激活触发程序</span></span>
<span class="line"><span>        UPDATE：更改某一行时激活触发程序</span></span>
<span class="line"><span>        DELETE：从表中删除某一行时激活触发程序</span></span>
<span class="line"><span>    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。</span></span>
<span class="line"><span>    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构</span></span>
<span class="line"><span>-- 删除</span></span>
<span class="line"><span>DROP TRIGGER [schema_name.]trigger_name</span></span>
<span class="line"><span>可以使用old和new代替旧的和新的数据</span></span>
<span class="line"><span>    更新操作，更新前是old，更新后是new.</span></span>
<span class="line"><span>    删除操作，只有old.</span></span>
<span class="line"><span>    增加操作，只有new.</span></span>
<span class="line"><span>-- 注意</span></span>
<span class="line"><span>    1. 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。</span></span>
<span class="line"><span>-- 字符连接函数</span></span>
<span class="line"><span>concat(str1,str2,...])</span></span>
<span class="line"><span>concat_ws(separator,str1,str2,...)</span></span>
<span class="line"><span>-- 分支语句</span></span>
<span class="line"><span>if 条件 then</span></span>
<span class="line"><span>    执行语句</span></span>
<span class="line"><span>elseif 条件 then</span></span>
<span class="line"><span>    执行语句</span></span>
<span class="line"><span>else</span></span>
<span class="line"><span>    执行语句</span></span>
<span class="line"><span>end if;</span></span>
<span class="line"><span>-- 修改最外层语句结束符</span></span>
<span class="line"><span>delimiter 自定义结束符号</span></span>
<span class="line"><span>    SQL语句</span></span>
<span class="line"><span>自定义结束符号</span></span>
<span class="line"><span>delimiter ;     -- 修改回原来的分号</span></span>
<span class="line"><span>-- 语句块包裹</span></span>
<span class="line"><span>begin</span></span>
<span class="line"><span>    语句块</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span>-- 特殊的执行</span></span>
<span class="line"><span>1. 只要添加记录，就会触发程序。</span></span>
<span class="line"><span>2. Insert into on duplicate key update 语法会触发：</span></span>
<span class="line"><span>    如果没有重复记录，会触发 before insert, after insert;</span></span>
<span class="line"><span>    如果有重复记录并更新，会触发 before insert, before update, after update;</span></span>
<span class="line"><span>    如果有重复记录但是没有发生更新，则触发 before insert, before update</span></span>
<span class="line"><span>3. Replace 语法 如果有记录，则执行 before insert, before delete, after delete, after insert</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sql-编程" tabindex="-1"><a class="header-anchor" href="#sql-编程"><span>SQL 编程</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* SQL编程 */ ------------------</span></span>
<span class="line"><span>--// 局部变量 ----------</span></span>
<span class="line"><span>-- 变量声明</span></span>
<span class="line"><span>    declare var_name[,...] type [default value]</span></span>
<span class="line"><span>    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。</span></span>
<span class="line"><span>-- 赋值</span></span>
<span class="line"><span>    使用 set 和 select into 语句为变量赋值。</span></span>
<span class="line"><span>    - 注意：在函数内是可以使用全局变量（用户自定义的变量）</span></span>
<span class="line"><span>--// 全局变量 ----------</span></span>
<span class="line"><span>-- 定义、赋值</span></span>
<span class="line"><span>set 语句可以定义并为变量赋值。</span></span>
<span class="line"><span>set @var = value;</span></span>
<span class="line"><span>也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。</span></span>
<span class="line"><span>还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。</span></span>
<span class="line"><span>select @var:=20;</span></span>
<span class="line"><span>select @v1:=id, @v2=name from t1 limit 1;</span></span>
<span class="line"><span>select * from tbl_name where @var:=30;</span></span>
<span class="line"><span>select into 可以将表中查询获得的数据赋给变量。</span></span>
<span class="line"><span>    -| select max(height) into @max_height from tb;</span></span>
<span class="line"><span>-- 自定义变量名</span></span>
<span class="line"><span>为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。</span></span>
<span class="line"><span>@var=10;</span></span>
<span class="line"><span>    - 变量被定义后，在整个会话周期都有效（登录到退出）</span></span>
<span class="line"><span>--// 控制结构 ----------</span></span>
<span class="line"><span>-- if语句</span></span>
<span class="line"><span>if search_condition then</span></span>
<span class="line"><span>    statement_list</span></span>
<span class="line"><span>[elseif search_condition then</span></span>
<span class="line"><span>    statement_list]</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>[else</span></span>
<span class="line"><span>    statement_list]</span></span>
<span class="line"><span>end if;</span></span>
<span class="line"><span>-- case语句</span></span>
<span class="line"><span>CASE value WHEN [compare-value] THEN result</span></span>
<span class="line"><span>[WHEN [compare-value] THEN result ...]</span></span>
<span class="line"><span>[ELSE result]</span></span>
<span class="line"><span>END</span></span>
<span class="line"><span>-- while循环</span></span>
<span class="line"><span>[begin_label:] while search_condition do</span></span>
<span class="line"><span>    statement_list</span></span>
<span class="line"><span>end while [end_label];</span></span>
<span class="line"><span>- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。</span></span>
<span class="line"><span>    -- 退出循环</span></span>
<span class="line"><span>        退出整个循环 leave</span></span>
<span class="line"><span>        退出当前循环 iterate</span></span>
<span class="line"><span>        通过退出的标签决定退出哪个循环</span></span>
<span class="line"><span>--// 内置函数 ----------</span></span>
<span class="line"><span>-- 数值函数</span></span>
<span class="line"><span>abs(x)          -- 绝对值 abs(-10.9) = 10</span></span>
<span class="line"><span>format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span></span>
<span class="line"><span>ceil(x)         -- 向上取整 ceil(10.1) = 11</span></span>
<span class="line"><span>floor(x)        -- 向下取整 floor (10.1) = 10</span></span>
<span class="line"><span>round(x)        -- 四舍五入去整</span></span>
<span class="line"><span>mod(m, n)       -- m%n m mod n 求余 10%3=1</span></span>
<span class="line"><span>pi()            -- 获得圆周率</span></span>
<span class="line"><span>pow(m, n)       -- m^n</span></span>
<span class="line"><span>sqrt(x)         -- 算术平方根</span></span>
<span class="line"><span>rand()          -- 随机数</span></span>
<span class="line"><span>truncate(x, d)  -- 截取d位小数</span></span>
<span class="line"><span>-- 时间日期函数</span></span>
<span class="line"><span>now(), current_timestamp();     -- 当前日期时间</span></span>
<span class="line"><span>current_date();                 -- 当前日期</span></span>
<span class="line"><span>current_time();                 -- 当前时间</span></span>
<span class="line"><span>date(&#39;yyyy-mm-dd hh:ii:ss&#39;);    -- 获取日期部分</span></span>
<span class="line"><span>time(&#39;yyyy-mm-dd hh:ii:ss&#39;);    -- 获取时间部分</span></span>
<span class="line"><span>date_format(&#39;yyyy-mm-dd hh:ii:ss&#39;, &#39;%d %y %a %d %m %b %j&#39;); -- 格式化时间</span></span>
<span class="line"><span>unix_timestamp();               -- 获得unix时间戳</span></span>
<span class="line"><span>from_unixtime();                -- 从时间戳获得时间</span></span>
<span class="line"><span>-- 字符串函数</span></span>
<span class="line"><span>length(string)          -- string长度，字节</span></span>
<span class="line"><span>char_length(string)     -- string的字符个数</span></span>
<span class="line"><span>substring(str, position [,length])      -- 从str的position开始,取length个字符</span></span>
<span class="line"><span>replace(str ,search_str ,replace_str)   -- 在str中用replace_str替换search_str</span></span>
<span class="line"><span>instr(string ,substring)    -- 返回substring首次在string中出现的位置</span></span>
<span class="line"><span>concat(string [,...])   -- 连接字串</span></span>
<span class="line"><span>charset(str)            -- 返回字串字符集</span></span>
<span class="line"><span>lcase(string)           -- 转换成小写</span></span>
<span class="line"><span>left(string, length)    -- 从string2中的左边起取length个字符</span></span>
<span class="line"><span>load_file(file_name)    -- 从文件读取内容</span></span>
<span class="line"><span>locate(substring, string [,start_position]) -- 同instr,但可指定开始位置</span></span>
<span class="line"><span>lpad(string, length, pad)   -- 重复用pad加在string开头,直到字串长度为length</span></span>
<span class="line"><span>ltrim(string)           -- 去除前端空格</span></span>
<span class="line"><span>repeat(string, count)   -- 重复count次</span></span>
<span class="line"><span>rpad(string, length, pad)   --在str后用pad补充,直到长度为length</span></span>
<span class="line"><span>rtrim(string)           -- 去除后端空格</span></span>
<span class="line"><span>strcmp(string1 ,string2)    -- 逐字符比较两字串大小</span></span>
<span class="line"><span>-- 流程函数</span></span>
<span class="line"><span>case when [condition] then result [when [condition] then result ...] [else result] end   多分支</span></span>
<span class="line"><span>if(expr1,expr2,expr3)  双分支。</span></span>
<span class="line"><span>-- 聚合函数</span></span>
<span class="line"><span>count()</span></span>
<span class="line"><span>sum();</span></span>
<span class="line"><span>max();</span></span>
<span class="line"><span>min();</span></span>
<span class="line"><span>avg();</span></span>
<span class="line"><span>group_concat()</span></span>
<span class="line"><span>-- 其他常用函数</span></span>
<span class="line"><span>md5();</span></span>
<span class="line"><span>default();</span></span>
<span class="line"><span>--// 存储函数，自定义函数 ----------</span></span>
<span class="line"><span>-- 新建</span></span>
<span class="line"><span>    CREATE FUNCTION function_name (参数列表) RETURNS 返回值类型</span></span>
<span class="line"><span>        函数体</span></span>
<span class="line"><span>    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。</span></span>
<span class="line"><span>    - 一个函数应该属于某个数据库，可以使用db_name.function_name的形式执行当前函数所属数据库，否则为当前数据库。</span></span>
<span class="line"><span>    - 参数部分，由&quot;参数名&quot;和&quot;参数类型&quot;组成。多个参数用逗号隔开。</span></span>
<span class="line"><span>    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。</span></span>
<span class="line"><span>    - 多条语句应该使用 begin...end 语句块包含。</span></span>
<span class="line"><span>    - 一定要有 return 返回值语句。</span></span>
<span class="line"><span>-- 删除</span></span>
<span class="line"><span>    DROP FUNCTION [IF EXISTS] function_name;</span></span>
<span class="line"><span>-- 查看</span></span>
<span class="line"><span>    SHOW FUNCTION STATUS LIKE &#39;partten&#39;</span></span>
<span class="line"><span>    SHOW CREATE FUNCTION function_name;</span></span>
<span class="line"><span>-- 修改</span></span>
<span class="line"><span>    ALTER FUNCTION function_name 函数选项</span></span>
<span class="line"><span>--// 存储过程，自定义功能 ----------</span></span>
<span class="line"><span>-- 定义</span></span>
<span class="line"><span>存储存储过程 是一段代码（过程），存储在数据库中的sql组成。</span></span>
<span class="line"><span>一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。</span></span>
<span class="line"><span>而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。</span></span>
<span class="line"><span>-- 创建</span></span>
<span class="line"><span>CREATE PROCEDURE sp_name (参数列表)</span></span>
<span class="line"><span>    过程体</span></span>
<span class="line"><span>参数列表：不同于函数的参数列表，需要指明参数类型</span></span>
<span class="line"><span>IN，表示输入型</span></span>
<span class="line"><span>OUT，表示输出型</span></span>
<span class="line"><span>INOUT，表示混合型</span></span>
<span class="line"><span>注意，没有返回值。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存储过程" tabindex="-1"><a class="header-anchor" href="#存储过程"><span>存储过程</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* 存储过程 */ ------------------</span></span>
<span class="line"><span>存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。</span></span>
<span class="line"><span>调用：CALL 过程名</span></span>
<span class="line"><span>-- 注意</span></span>
<span class="line"><span>- 没有返回值。</span></span>
<span class="line"><span>- 只能单独调用，不可夹杂在其他语句中</span></span>
<span class="line"><span>-- 参数</span></span>
<span class="line"><span>IN|OUT|INOUT 参数名 数据类型</span></span>
<span class="line"><span>IN      输入：在调用过程中，将数据输入到过程体内部的参数</span></span>
<span class="line"><span>OUT     输出：在调用过程中，将过程体处理完的结果返回到客户端</span></span>
<span class="line"><span>INOUT   输入输出：既可输入，也可输出</span></span>
<span class="line"><span>-- 语法</span></span>
<span class="line"><span>CREATE PROCEDURE 过程名 (参数列表)</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>    过程体</span></span>
<span class="line"><span>END</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用户和权限管理" tabindex="-1"><a class="header-anchor" href="#用户和权限管理"><span>用户和权限管理</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* 用户和权限管理 */ ------------------</span></span>
<span class="line"><span>-- root密码重置</span></span>
<span class="line"><span>1. 停止MySQL服务</span></span>
<span class="line"><span>2.  [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &amp;</span></span>
<span class="line"><span>    [Windows] mysqld --skip-grant-tables</span></span>
<span class="line"><span>3. use mysql;</span></span>
<span class="line"><span>4. UPDATE \`user\` SET PASSWORD=PASSWORD(&quot;密码&quot;) WHERE \`user\` = &quot;root&quot;;</span></span>
<span class="line"><span>5. FLUSH PRIVILEGES;</span></span>
<span class="line"><span>用户信息表：mysql.user</span></span>
<span class="line"><span>-- 刷新权限</span></span>
<span class="line"><span>FLUSH PRIVILEGES;</span></span>
<span class="line"><span>-- 增加用户</span></span>
<span class="line"><span>CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)</span></span>
<span class="line"><span>    - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。</span></span>
<span class="line"><span>    - 只能创建用户，不能赋予权限。</span></span>
<span class="line"><span>    - 用户名，注意引号：如 &#39;user_name&#39;@&#39;192.168.1.1&#39;</span></span>
<span class="line"><span>    - 密码也需引号，纯数字密码也要加引号</span></span>
<span class="line"><span>    - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD</span></span>
<span class="line"><span>-- 重命名用户</span></span>
<span class="line"><span>RENAME USER old_user TO new_user</span></span>
<span class="line"><span>-- 设置密码</span></span>
<span class="line"><span>SET PASSWORD = PASSWORD(&#39;密码&#39;)  -- 为当前用户设置密码</span></span>
<span class="line"><span>SET PASSWORD FOR 用户名 = PASSWORD(&#39;密码&#39;) -- 为指定用户设置密码</span></span>
<span class="line"><span>-- 删除用户</span></span>
<span class="line"><span>DROP USER 用户名</span></span>
<span class="line"><span>-- 分配权限/添加用户</span></span>
<span class="line"><span>GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] &#39;password&#39;]</span></span>
<span class="line"><span>    - all privileges 表示所有权限</span></span>
<span class="line"><span>    - *.* 表示所有库的所有表</span></span>
<span class="line"><span>    - 库名.表名 表示某库下面的某表</span></span>
<span class="line"><span>    GRANT ALL PRIVILEGES ON \`pms\`.* TO &#39;pms&#39;@&#39;%&#39; IDENTIFIED BY &#39;pms0817&#39;;</span></span>
<span class="line"><span>-- 查看权限</span></span>
<span class="line"><span>SHOW GRANTS FOR 用户名</span></span>
<span class="line"><span>    -- 查看当前用户权限</span></span>
<span class="line"><span>    SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();</span></span>
<span class="line"><span>-- 撤消权限</span></span>
<span class="line"><span>REVOKE 权限列表 ON 表名 FROM 用户名</span></span>
<span class="line"><span>REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名   -- 撤销所有权限</span></span>
<span class="line"><span>-- 权限层级</span></span>
<span class="line"><span>-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。</span></span>
<span class="line"><span>全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user</span></span>
<span class="line"><span>    GRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。</span></span>
<span class="line"><span>数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host</span></span>
<span class="line"><span>    GRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。</span></span>
<span class="line"><span>表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv</span></span>
<span class="line"><span>    GRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。</span></span>
<span class="line"><span>列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv</span></span>
<span class="line"><span>    当使用REVOKE时，您必须指定与被授权列相同的列。</span></span>
<span class="line"><span>-- 权限列表</span></span>
<span class="line"><span>ALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限</span></span>
<span class="line"><span>ALTER   -- 允许使用ALTER TABLE</span></span>
<span class="line"><span>ALTER ROUTINE   -- 更改或取消已存储的子程序</span></span>
<span class="line"><span>CREATE  -- 允许使用CREATE TABLE</span></span>
<span class="line"><span>CREATE ROUTINE  -- 创建已存储的子程序</span></span>
<span class="line"><span>CREATE TEMPORARY TABLES     -- 允许使用CREATE TEMPORARY TABLE</span></span>
<span class="line"><span>CREATE USER     -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span></span>
<span class="line"><span>CREATE VIEW     -- 允许使用CREATE VIEW</span></span>
<span class="line"><span>DELETE  -- 允许使用DELETE</span></span>
<span class="line"><span>DROP    -- 允许使用DROP TABLE</span></span>
<span class="line"><span>EXECUTE     -- 允许用户运行已存储的子程序</span></span>
<span class="line"><span>FILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span></span>
<span class="line"><span>INDEX   -- 允许使用CREATE INDEX和DROP INDEX</span></span>
<span class="line"><span>INSERT  -- 允许使用INSERT</span></span>
<span class="line"><span>LOCK TABLES     -- 允许对您拥有SELECT权限的表使用LOCK TABLES</span></span>
<span class="line"><span>PROCESS     -- 允许使用SHOW FULL PROCESSLIST</span></span>
<span class="line"><span>REFERENCES  -- 未被实施</span></span>
<span class="line"><span>RELOAD  -- 允许使用FLUSH</span></span>
<span class="line"><span>REPLICATION CLIENT  -- 允许用户询问从属服务器或主服务器的地址</span></span>
<span class="line"><span>REPLICATION SLAVE   -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span></span>
<span class="line"><span>SELECT  -- 允许使用SELECT</span></span>
<span class="line"><span>SHOW DATABASES  -- 显示所有数据库</span></span>
<span class="line"><span>SHOW VIEW   -- 允许使用SHOW CREATE VIEW</span></span>
<span class="line"><span>SHUTDOWN    -- 允许使用mysqladmin shutdown</span></span>
<span class="line"><span>SUPER   -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span></span>
<span class="line"><span>UPDATE  -- 允许使用UPDATE</span></span>
<span class="line"><span>USAGE   -- “无权限”的同义词</span></span>
<span class="line"><span>GRANT OPTION    -- 允许授予权限</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="表维护" tabindex="-1"><a class="header-anchor" href="#表维护"><span>表维护</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* 表维护 */</span></span>
<span class="line"><span>-- 分析和存储表的关键字分布</span></span>
<span class="line"><span>ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...</span></span>
<span class="line"><span>-- 检查一个或多个表是否有错误</span></span>
<span class="line"><span>CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span></span>
<span class="line"><span>option = {QUICK | FAST | MEDIUM | EXTENDED | CHANGED}</span></span>
<span class="line"><span>-- 整理数据文件的碎片</span></span>
<span class="line"><span>OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="杂项" tabindex="-1"><a class="header-anchor" href="#杂项"><span>杂项</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>/* 杂项 */ ------------------</span></span>
<span class="line"><span>1. 可用反引号（\`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</span></span>
<span class="line"><span>2. 每个库目录存在一个保存当前数据库的选项文件db.opt。</span></span>
<span class="line"><span>3. 注释：</span></span>
<span class="line"><span>    单行注释 # 注释内容</span></span>
<span class="line"><span>    多行注释 /* 注释内容 */</span></span>
<span class="line"><span>    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</span></span>
<span class="line"><span>4. 模式通配符：</span></span>
<span class="line"><span>    _   任意单个字符</span></span>
<span class="line"><span>    %   任意多个字符，甚至包括零字符</span></span>
<span class="line"><span>    单引号需要进行转义 \\&#39;</span></span>
<span class="line"><span>5. CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;\\G&quot;, &quot;\\g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</span></span>
<span class="line"><span>6. SQL对大小写不敏感</span></span>
<span class="line"><span>7. 清除已有语句：\\c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46)]))}const v=n(e,[["render",p]]),r=JSON.parse('{"path":"/db/mysql/4u4ukj6k/","title":"1. 数据库的基本操作","lang":"zh-CN","frontmatter":{"title":"1. 数据库的基本操作","createTime":"2025/08/25 10:19:34","permalink":"/db/mysql/4u4ukj6k/"},"readingTime":{"minutes":32.77,"words":9830},"git":{"createdTime":1756736713000},"filePathRelative":"notes/db/mysql/1.md","headers":[]}');export{v as comp,r as data};

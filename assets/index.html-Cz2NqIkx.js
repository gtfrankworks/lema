import{a as i,c as a,b as r,o as n}from"./app-ZQgO6-gU.js";const o={};function s(e,l){return n(),a("div",null,l[0]||(l[0]=[r('<ul><li><h3 id="_1-简历写什么问什么-注意所用技术产品的同类产品生态及对比" tabindex="-1"><a class="header-anchor" href="#_1-简历写什么问什么-注意所用技术产品的同类产品生态及对比"><span>1. 简历写什么问什么，注意所用技术产品的同类产品生态及对比</span></a></h3><ul><li><strong>原则：</strong><ul><li>简历中列出的技术或产品，面试官通常会围绕它提问</li><li>对于熟悉的技术，需要了解同类产品的特点、生态、优缺点</li></ul></li><li><strong>举例：</strong><ul><li>写了 Kafka，就需要知道 Kafka 与 RabbitMQ 的区别</li><li>写了 Spring Boot，就要了解 Spring Cloud 的功能和局限</li></ul></li></ul><hr><h2 id="_2-kafka-数据分区与消费者关系、offset读取、顺序保证" tabindex="-1"><a class="header-anchor" href="#_2-kafka-数据分区与消费者关系、offset读取、顺序保证"><span>2. Kafka 数据分区与消费者关系、Offset读取、顺序保证</span></a></h2><ul><li><strong>数据分区和消费者关系：</strong><ul><li>一个 partition 只能被同组的一个 consumer 消费</li><li>同组的多个 consumer 起到负载均衡的作用</li></ul></li><li><strong>Offset 读取流程：</strong><ol><li>连接 Zookeeper（ZK），获取 topic 的 partition 信息及 Leader 信息</li><li>连接到对应 Leader 的 broker</li><li>Consumer 将自己保存的 offset 发送给 Leader</li><li>Leader 定位 segment（索引文件和日志文件）</li><li>根据索引文件找到日志文件对应偏移量的位置并返回数据</li></ol></li><li><strong>顺序保证：</strong><ul><li>Kafka 只能保证 <strong>partition 内有序</strong>，无法保证跨 partition 顺序</li><li>实践中可以将需要顺序的消息发送到同一个 partition</li></ul></li></ul><hr><h2 id="_3-cms-垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#_3-cms-垃圾回收机制"><span>3. CMS 垃圾回收机制</span></a></h2><ul><li><strong>概念：</strong> Concurrent Mark Sweep，使用标记-清除算法，支持并发回收</li><li><strong>适用场景：</strong> 对停顿时间敏感的应用，GC 尽量短暂停</li><li><strong>缺点：</strong><ol><li>长期运行可能导致内存碎片化</li><li>算法实现复杂</li></ol></li><li><strong>实现机制：</strong><ul><li>周期性 Old GC（被动）：每 2 秒执行一次</li><li>主动 Old GC：如 Promotion Failed、System.gc() 调用等</li></ul></li></ul><hr><h2 id="_4-mapreduce-原理" tabindex="-1"><a class="header-anchor" href="#_4-mapreduce-原理"><span>4. MapReduce 原理</span></a></h2><ul><li><strong>概念：</strong> 分布式计算框架，将大数据处理拆分为 Map 和 Reduce 阶段</li><li><strong>设计思想：</strong><ul><li>利用 Hadoop 分布式文件系统存储数据</li><li>Map 阶段在各节点并行处理，Reduce 汇总结果</li></ul></li><li><strong>优点：</strong><ul><li>极强的扩展性，可在数千台机器并行执行</li><li>容错性好，用户接口简洁</li></ul></li><li><strong>缺点：</strong><ul><li>不适合实时性要求高的场景</li><li>不适合迭代计算（如机器学习）</li><li>启动时间长，涉及多次磁盘读写和网络传输</li></ul></li></ul><hr><h2 id="_5-nio、bio、selector-epoll、aio、netty" tabindex="-1"><a class="header-anchor" href="#_5-nio、bio、selector-epoll、aio、netty"><span>5. NIO、BIO、Selector/Epoll、AIO、Netty</span></a></h2><ul><li><strong>Netty 优势：</strong><ol><li>NIO 异步非阻塞通信</li><li>“零拷贝”</li><li>内存池 ByteBuf</li><li>高效的 Reactor 线程模型（单线程/多线程/主从）</li><li>串行无锁化设计，避免多线程竞争</li><li>高效并发编程：volatile、CAS、线程安全容器、读写锁</li><li>高效序列化框架</li><li>灵活 TCP 参数配置（如 SO_RCVBUF/SO_SNDBUF）</li></ol></li></ul><hr><h2 id="_6-akka-模型" tabindex="-1"><a class="header-anchor" href="#_6-akka-模型"><span>6. Akka 模型</span></a></h2><ul><li><strong>概念：</strong> 基于 Actor 模型的并发框架，构建伸缩性强、响应式应用</li><li><strong>Actor 模型：</strong><ul><li>Actor 是并发执行的最小单元</li><li>Actor 之间通过消息通信，不共享状态</li><li>类比现实生活中的信件传递，每个 Actor 只关心自己收到的消息</li></ul></li></ul><hr><h2 id="_7-java-集合与-map-区分及原理" tabindex="-1"><a class="header-anchor" href="#_7-java-集合与-map-区分及原理"><span>7. Java 集合与 Map 区分及原理</span></a></h2><ul><li><strong>ArrayList vs LinkedList：</strong><ul><li>ArrayList 基于动态数组，随机访问快</li><li>LinkedList 基于链表，插入/删除快（指针操作）</li></ul></li><li><strong>ConcurrentHashMap 1.7 vs 1.8：</strong><ul><li>1.7：Segment + HashEntry + Unsafe</li><li>1.8：CAS + Synchronized + Node + Unsafe</li></ul></li><li><strong>LinkedHashMap 排序原理：</strong><ul><li>支持插入顺序和访问顺序</li><li>内部使用双向链表维护顺序</li></ul></li><li><strong>保证数据幂等：</strong><ul><li>利用唯一键、版本号、请求 ID 等方式</li></ul></li></ul><hr><h2 id="_8-top-k-问题与解决方案" tabindex="-1"><a class="header-anchor" href="#_8-top-k-问题与解决方案"><span>8. Top-K 问题与解决方案</span></a></h2><ul><li><strong>常用方案：</strong><ol><li>排序取前 K（O(N logN)，最坏 O(N²)，效率低）</li><li>快速选择算法（类似快速排序分区）</li><li>二分查找法（根据数值区间搜索第 K 大数）</li><li>堆（大根堆存储前 K 个元素，时间复杂度 O(N logK)）</li><li>计数排序/空间换时间（适用于值域较小的正整数）</li></ol></li></ul><hr><h2 id="_9-多表关联查询优化" tabindex="-1"><a class="header-anchor" href="#_9-多表关联查询优化"><span>9. 多表关联查询优化</span></a></h2><ul><li><strong>优化方法：</strong><ol><li>需要全量结果时使用 JOIN（LEFT/RIGHT/FULL）</li><li>核心是索引优化</li><li>为被驱动表的 join 字段建立索引</li><li>外键约束可只在一张表上加</li></ol></li></ul><hr><h2 id="_10-concurrenthashmap-jdk1-7-vs-1-8" tabindex="-1"><a class="header-anchor" href="#_10-concurrenthashmap-jdk1-7-vs-1-8"><span>10. ConcurrentHashMap JDK1.7 vs 1.8</span></a></h2><ul><li><strong>JDK1.7：</strong> 使用 Segment 锁，锁粒度较大</li><li><strong>JDK1.8：</strong><ul><li>改为 Node + CAS + Synchronized</li><li>锁粒度更小，初始化 table 用 sizeCtl 控制</li><li>性能提升显著</li></ul></li></ul><hr><h2 id="_11-保证线程顺序执行-a-b-c-完成后执行-d" tabindex="-1"><a class="header-anchor" href="#_11-保证线程顺序执行-a-b-c-完成后执行-d"><span>11. 保证线程顺序执行（a,b,c 完成后执行 d）</span></a></h2><ul><li><strong>方式：</strong><ol><li><strong>CountDownLatch</strong><ul><li>a/b/c 线程完成后调用 countDown()</li><li>d 线程 await() 等待</li></ul></li><li><strong>CyclicBarrier</strong> 或 Phaser</li><li><strong>Future/CompletableFuture</strong><ul><li>使用 thenRun 或 thenCombine 组合异步任务</li></ul></li></ol></li></ul><hr><h2 id="_12-微服务拆分注意事项" tabindex="-1"><a class="header-anchor" href="#_12-微服务拆分注意事项"><span>12. 微服务拆分注意事项</span></a></h2><ul><li><strong>拆分原则：</strong><ol><li>按业务领域划分（Domain-Driven Design）</li><li>保持微服务粒度适中，过大像单体，过小增加调用成本</li><li>关注服务依赖、数据隔离、通信方式</li></ol></li><li><strong>拆分方式：</strong><ul><li>按业务模块</li><li>按资源（库存、订单、支付）</li><li>按团队组织</li></ul></li></ul><hr><h2 id="_13-docker-与虚拟机区别" tabindex="-1"><a class="header-anchor" href="#_13-docker-与虚拟机区别"><span>13. Docker 与虚拟机区别</span></a></h2><ul><li><strong>虚拟机（VM）：</strong><ul><li>每个 VM 需要完整 OS，启动慢，占用资源大</li></ul></li><li><strong>Docker 容器：</strong><ul><li>使用宿主 OS 内核，共享内核，启动快，占用少</li><li>轻量、便于部署</li></ul></li></ul><hr><h2 id="_14-docker-容器通信" tabindex="-1"><a class="header-anchor" href="#_14-docker-容器通信"><span>14. Docker 容器通信</span></a></h2><ul><li><strong>同一宿主机：</strong><ul><li>使用 bridge 网络或 host 网络</li><li>通过容器名/端口通信</li></ul></li><li><strong>不同宿主机：</strong><ul><li>使用 overlay 网络</li><li>或借助服务注册与发现（如 Consul、Etcd）</li><li>通过端口映射和跨主机网络实现通信</li></ul></li></ul><hr><h2 id="_15-高并发系统优化与防库存超卖" tabindex="-1"><a class="header-anchor" href="#_15-高并发系统优化与防库存超卖"><span>15. 高并发系统优化与防库存超卖</span></a></h2><ul><li><strong>性能优化：</strong><ol><li>数据库层：索引优化、分库分表、读写分离</li><li>缓存层：Redis/Memcached 减少 DB 压力</li><li>异步处理：消息队列削峰</li><li>限流/熔断/降级：防止雪崩</li></ol></li><li><strong>防止库存超卖：</strong><ul><li>数据库行锁或悲观锁</li><li>乐观锁（Version）</li><li>Redis 原子操作（decr）</li><li>分布式锁（如 Redisson）</li><li>预扣库存 + 异步扣减</li></ul></li></ul></li><li></li><li><h3 id="_1-简历写什么问什么-注意所用技术产品的同类产品生态及对比-1" tabindex="-1"><a class="header-anchor" href="#_1-简历写什么问什么-注意所用技术产品的同类产品生态及对比-1"><span>1. 简历写什么问什么，注意所用技术产品的同类产品生态及对比</span></a></h3><ul><li><strong>原则：</strong><ul><li>简历中列出的技术或产品，面试官通常会围绕它提问</li><li>对于熟悉的技术，需要了解同类产品的特点、生态、优缺点</li></ul></li><li><strong>举例：</strong><ul><li>写了 Kafka，就需要知道 Kafka 与 RabbitMQ 的区别</li><li>写了 Spring Boot，就要了解 Spring Cloud 的功能和局限</li></ul></li></ul><hr><h2 id="_2-kafka-数据分区与消费者关系、offset读取、顺序保证-1" tabindex="-1"><a class="header-anchor" href="#_2-kafka-数据分区与消费者关系、offset读取、顺序保证-1"><span>2. Kafka 数据分区与消费者关系、Offset读取、顺序保证</span></a></h2><ul><li><strong>数据分区和消费者关系：</strong><ul><li>一个 partition 只能被同组的一个 consumer 消费</li><li>同组的多个 consumer 起到负载均衡的作用</li></ul></li><li><strong>Offset 读取流程：</strong><ol><li>连接 Zookeeper（ZK），获取 topic 的 partition 信息及 Leader 信息</li><li>连接到对应 Leader 的 broker</li><li>Consumer 将自己保存的 offset 发送给 Leader</li><li>Leader 定位 segment（索引文件和日志文件）</li><li>根据索引文件找到日志文件对应偏移量的位置并返回数据</li></ol></li><li><strong>顺序保证：</strong><ul><li>Kafka 只能保证 <strong>partition 内有序</strong>，无法保证跨 partition 顺序</li><li>实践中可以将需要顺序的消息发送到同一个 partition</li></ul></li></ul><hr><h2 id="_3-cms-垃圾回收机制-1" tabindex="-1"><a class="header-anchor" href="#_3-cms-垃圾回收机制-1"><span>3. CMS 垃圾回收机制</span></a></h2><ul><li><strong>概念：</strong> Concurrent Mark Sweep，使用标记-清除算法，支持并发回收</li><li><strong>适用场景：</strong> 对停顿时间敏感的应用，GC 尽量短暂停</li><li><strong>缺点：</strong><ol><li>长期运行可能导致内存碎片化</li><li>算法实现复杂</li></ol></li><li><strong>实现机制：</strong><ul><li>周期性 Old GC（被动）：每 2 秒执行一次</li><li>主动 Old GC：如 Promotion Failed、System.gc() 调用等</li></ul></li></ul><hr><h2 id="_4-mapreduce-原理-1" tabindex="-1"><a class="header-anchor" href="#_4-mapreduce-原理-1"><span>4. MapReduce 原理</span></a></h2><ul><li><strong>概念：</strong> 分布式计算框架，将大数据处理拆分为 Map 和 Reduce 阶段</li><li><strong>设计思想：</strong><ul><li>利用 Hadoop 分布式文件系统存储数据</li><li>Map 阶段在各节点并行处理，Reduce 汇总结果</li></ul></li><li><strong>优点：</strong><ul><li>极强的扩展性，可在数千台机器并行执行</li><li>容错性好，用户接口简洁</li></ul></li><li><strong>缺点：</strong><ul><li>不适合实时性要求高的场景</li><li>不适合迭代计算（如机器学习）</li><li>启动时间长，涉及多次磁盘读写和网络传输</li></ul></li></ul><hr><h2 id="_5-nio、bio、selector-epoll、aio、netty-1" tabindex="-1"><a class="header-anchor" href="#_5-nio、bio、selector-epoll、aio、netty-1"><span>5. NIO、BIO、Selector/Epoll、AIO、Netty</span></a></h2><ul><li><strong>Netty 优势：</strong><ol><li>NIO 异步非阻塞通信</li><li>“零拷贝”</li><li>内存池 ByteBuf</li><li>高效的 Reactor 线程模型（单线程/多线程/主从）</li><li>串行无锁化设计，避免多线程竞争</li><li>高效并发编程：volatile、CAS、线程安全容器、读写锁</li><li>高效序列化框架</li><li>灵活 TCP 参数配置（如 SO_RCVBUF/SO_SNDBUF）</li></ol></li></ul><hr><h2 id="_6-akka-模型-1" tabindex="-1"><a class="header-anchor" href="#_6-akka-模型-1"><span>6. Akka 模型</span></a></h2><ul><li><strong>概念：</strong> 基于 Actor 模型的并发框架，构建伸缩性强、响应式应用</li><li><strong>Actor 模型：</strong><ul><li>Actor 是并发执行的最小单元</li><li>Actor 之间通过消息通信，不共享状态</li><li>类比现实生活中的信件传递，每个 Actor 只关心自己收到的消息</li></ul></li></ul><hr><h2 id="_7-java-集合与-map-区分及原理-1" tabindex="-1"><a class="header-anchor" href="#_7-java-集合与-map-区分及原理-1"><span>7. Java 集合与 Map 区分及原理</span></a></h2><ul><li><strong>ArrayList vs LinkedList：</strong><ul><li>ArrayList 基于动态数组，随机访问快</li><li>LinkedList 基于链表，插入/删除快（指针操作）</li></ul></li><li><strong>ConcurrentHashMap 1.7 vs 1.8：</strong><ul><li>1.7：Segment + HashEntry + Unsafe</li><li>1.8：CAS + Synchronized + Node + Unsafe</li></ul></li><li><strong>LinkedHashMap 排序原理：</strong><ul><li>支持插入顺序和访问顺序</li><li>内部使用双向链表维护顺序</li></ul></li><li><strong>保证数据幂等：</strong><ul><li>利用唯一键、版本号、请求 ID 等方式</li></ul></li></ul><hr><h2 id="_8-top-k-问题与解决方案-1" tabindex="-1"><a class="header-anchor" href="#_8-top-k-问题与解决方案-1"><span>8. Top-K 问题与解决方案</span></a></h2><ul><li><strong>常用方案：</strong><ol><li>排序取前 K（O(N logN)，最坏 O(N²)，效率低）</li><li>快速选择算法（类似快速排序分区）</li><li>二分查找法（根据数值区间搜索第 K 大数）</li><li>堆（大根堆存储前 K 个元素，时间复杂度 O(N logK)）</li><li>计数排序/空间换时间（适用于值域较小的正整数）</li></ol></li></ul><hr><h2 id="_9-多表关联查询优化-1" tabindex="-1"><a class="header-anchor" href="#_9-多表关联查询优化-1"><span>9. 多表关联查询优化</span></a></h2><ul><li><strong>优化方法：</strong><ol><li>需要全量结果时使用 JOIN（LEFT/RIGHT/FULL）</li><li>核心是索引优化</li><li>为被驱动表的 join 字段建立索引</li><li>外键约束可只在一张表上加</li></ol></li></ul><hr><h2 id="_10-concurrenthashmap-jdk1-7-vs-1-8-1" tabindex="-1"><a class="header-anchor" href="#_10-concurrenthashmap-jdk1-7-vs-1-8-1"><span>10. ConcurrentHashMap JDK1.7 vs 1.8</span></a></h2><ul><li><strong>JDK1.7：</strong> 使用 Segment 锁，锁粒度较大</li><li><strong>JDK1.8：</strong><ul><li>改为 Node + CAS + Synchronized</li><li>锁粒度更小，初始化 table 用 sizeCtl 控制</li><li>性能提升显著</li></ul></li></ul><hr><h2 id="_11-保证线程顺序执行-a-b-c-完成后执行-d-1" tabindex="-1"><a class="header-anchor" href="#_11-保证线程顺序执行-a-b-c-完成后执行-d-1"><span>11. 保证线程顺序执行（a,b,c 完成后执行 d）</span></a></h2><ul><li><strong>方式：</strong><ol><li><strong>CountDownLatch</strong><ul><li>a/b/c 线程完成后调用 countDown()</li><li>d 线程 await() 等待</li></ul></li><li><strong>CyclicBarrier</strong> 或 Phaser</li><li><strong>Future/CompletableFuture</strong><ul><li>使用 thenRun 或 thenCombine 组合异步任务</li></ul></li></ol></li></ul><hr><h2 id="_12-微服务拆分注意事项-1" tabindex="-1"><a class="header-anchor" href="#_12-微服务拆分注意事项-1"><span>12. 微服务拆分注意事项</span></a></h2><ul><li><strong>拆分原则：</strong><ol><li>按业务领域划分（Domain-Driven Design）</li><li>保持微服务粒度适中，过大像单体，过小增加调用成本</li><li>关注服务依赖、数据隔离、通信方式</li></ol></li><li><strong>拆分方式：</strong><ul><li>按业务模块</li><li>按资源（库存、订单、支付）</li><li>按团队组织</li></ul></li></ul><hr><h2 id="_13-docker-与虚拟机区别-1" tabindex="-1"><a class="header-anchor" href="#_13-docker-与虚拟机区别-1"><span>13. Docker 与虚拟机区别</span></a></h2><ul><li><strong>虚拟机（VM）：</strong><ul><li>每个 VM 需要完整 OS，启动慢，占用资源大</li></ul></li><li><strong>Docker 容器：</strong><ul><li>使用宿主 OS 内核，共享内核，启动快，占用少</li><li>轻量、便于部署</li></ul></li></ul><hr><h2 id="_14-docker-容器通信-1" tabindex="-1"><a class="header-anchor" href="#_14-docker-容器通信-1"><span>14. Docker 容器通信</span></a></h2><ul><li><strong>同一宿主机：</strong><ul><li>使用 bridge 网络或 host 网络</li><li>通过容器名/端口通信</li></ul></li><li><strong>不同宿主机：</strong><ul><li>使用 overlay 网络</li><li>或借助服务注册与发现（如 Consul、Etcd）</li><li>通过端口映射和跨主机网络实现通信</li></ul></li></ul><hr><h2 id="_15-高并发系统优化与防库存超卖-1" tabindex="-1"><a class="header-anchor" href="#_15-高并发系统优化与防库存超卖-1"><span>15. 高并发系统优化与防库存超卖</span></a></h2><ul><li><strong>性能优化：</strong><ol><li>数据库层：索引优化、分库分表、读写分离</li><li>缓存层：Redis/Memcached 减少 DB 压力</li><li>异步处理：消息队列削峰</li><li>限流/熔断/降级：防止雪崩</li></ol></li><li><strong>防止库存超卖：</strong><ul><li>数据库行锁或悲观锁</li><li>乐观锁（Version）</li><li>Redis 原子操作（decr）</li><li>分布式锁（如 Redisson）</li><li>预扣库存 + 异步扣减</li></ul></li></ul></li></ul><p>如何保证服务幂等性</p><p><strong>1. 概念：</strong> 幂等性（Idempotency）指的是同一操作执行一次和执行多次，对系统的状态影响是相同的。换句话说，重复请求不会造成副作用或重复的业务操作。</p><p><strong>2. 为什么需要幂等性：</strong></p><ul><li>防止网络抖动、超时、重试导致的重复请求</li><li>保证业务数据一致性</li><li>避免订单重复生成、账户多扣款、库存错误等问题</li></ul><p><strong>3. 常见保证幂等性的方案</strong></p><h4 id="_1-使用唯一请求-id" tabindex="-1"><a class="header-anchor" href="#_1-使用唯一请求-id"><span>（1）使用唯一请求 ID</span></a></h4><ul><li>客户端每次请求生成一个唯一标识（UUID、雪花ID等），服务端记录请求 ID 及处理结果</li><li>接收到相同请求 ID 时，直接返回上一次结果而不重复执行业务逻辑</li><li><strong>优点：</strong> 简单直接，适用于所有场景</li><li><strong>缺点：</strong> 需要服务端存储请求 ID，可能占用额外存储</li></ul><h4 id="_2-数据库约束-基于唯一索引" tabindex="-1"><a class="header-anchor" href="#_2-数据库约束-基于唯一索引"><span>（2）数据库约束（基于唯一索引）</span></a></h4><ul><li>利用数据库的唯一约束（Unique Key）保证幂等操作，例如： <ul><li>订单号唯一</li><li>用户手机号唯一</li></ul></li><li>如果重复请求，会因为唯一索引冲突而拒绝重复操作</li><li><strong>优点：</strong> 利用数据库天然约束，简单可靠</li><li><strong>缺点：</strong> 需要业务字段能够唯一标识操作</li></ul><h4 id="_3-乐观锁-版本号" tabindex="-1"><a class="header-anchor" href="#_3-乐观锁-版本号"><span>（3）乐观锁/版本号</span></a></h4><ul><li>数据表中增加版本号（Version）或时间戳字段</li><li>更新时带上版本号，确保操作只对最新版本数据生效</li><li><strong>适用场景：</strong> 资源更新类操作，如余额扣减、库存更新</li><li><strong>优点：</strong> 控制并发冲突，保证幂等</li><li><strong>缺点：</strong> 需要业务逻辑配合版本号</li></ul><h4 id="_4-分布式锁" tabindex="-1"><a class="header-anchor" href="#_4-分布式锁"><span>（4）分布式锁</span></a></h4><ul><li>对关键资源（如库存、账户）加分布式锁（Redis、Zookeeper、etcd）</li><li>保证同一时间只有一个请求在修改资源</li><li><strong>优点：</strong> 保证资源操作不会冲突</li><li><strong>缺点：</strong> 可能导致锁竞争，影响性能</li></ul><h4 id="_5-幂等接口设计" tabindex="-1"><a class="header-anchor" href="#_5-幂等接口设计"><span>（5）幂等接口设计</span></a></h4><ul><li>将操作设计为天然幂等，例如： <ul><li><strong>PUT /updateUser</strong>：多次更新同一字段为相同值，不改变状态</li><li><strong>DELETE /deleteOrder</strong>：删除已删除的订单，不报错</li></ul></li><li><strong>优点：</strong> 接口本身保证幂等，无需额外存储或锁</li></ul><h4 id="_6-消息幂等性-异步-分布式场景" tabindex="-1"><a class="header-anchor" href="#_6-消息幂等性-异步-分布式场景"><span>（6）消息幂等性（异步/分布式场景）</span></a></h4><ul><li>消息队列消费时，可能出现重复消息</li><li>可通过以下方式保证幂等： <ul><li>消息唯一 ID，消费前检查是否已处理</li><li>利用数据库唯一约束或状态字段标记消息是否处理</li></ul></li></ul><p><strong>4. 实践经验与注意点：</strong></p><ul><li>幂等性设计尽量在系统最靠近数据源处实现（数据库层、服务层）</li><li>对高并发场景，应结合唯一 ID、数据库约束与分布式锁综合使用</li><li>幂等性不仅是接口设计，更是系统一致性策略的一部分</li></ul><p><strong>5. 总结：</strong> 幂等性是系统可靠性的重要保障，可以通过请求唯一 ID、数据库约束、版本号、分布式锁、幂等接口设计等方式实现。在高并发分布式系统中，合理设计幂等性策略可以防止重复操作、保证数据一致性和业务安全。</p>',21)]))}const h=i(o,[["render",s]]),u=JSON.parse('{"path":"/bigcompany/lzg2kv3d/","title":"商汤科技-Java高级","lang":"zh-CN","frontmatter":{"title":"商汤科技-Java高级","createTime":"2025/08/21 13:31:49","permalink":"/bigcompany/lzg2kv3d/"},"readingTime":{"minutes":11.91,"words":3573},"git":{"createdTime":1756736713000},"filePathRelative":"notes/bigcompany/company/商汤科技-Java高级.md","headers":[]}');export{h as comp,u as data};

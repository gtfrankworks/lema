import{a as i,c as e,b as n,o as a}from"./app-ZQgO6-gU.js";const t={};function l(r,s){return a(),e("div",null,s[0]||(s[0]=[n(`<h2 id="_1-string-字符串" tabindex="-1"><a class="header-anchor" href="#_1-string-字符串"><span>1. <strong>String（字符串）</strong></span></a></h2><ul><li><p><strong>定义</strong>：最基础的类型，一个 key 对应一个字符串值。</p><ul><li>可以是文本、整数、浮点数，最大支持 512MB。</li></ul></li><li><p><strong>底层实现</strong>：简单动态字符串（SDS，类似 C 语言的 char[]，但可动态扩展）。</p></li><li><p><strong>应用场景</strong>：</p><ul><li>缓存：缓存 HTML、JSON、Token 等。</li><li>计数器：<code>INCR</code>/<code>DECR</code> 实现访问量、点赞数。</li><li>分布式锁：<code>SETNX</code> 实现。</li></ul></li><li><p><strong>命令示例</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>SET key &quot;Hello&quot;</span></span>
<span class="line"><span>GET key</span></span>
<span class="line"><span>INCR counter</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="_2-hash-哈希表" tabindex="-1"><a class="header-anchor" href="#_2-hash-哈希表"><span>2. <strong>Hash（哈希表）</strong></span></a></h2><ul><li><p><strong>定义</strong>：key 对应一个小型字典，value 是一个 <code>field-value</code> 的集合。</p></li><li><p><strong>底层实现</strong>：压缩列表（ziplist）或哈希表（hashtable），根据字段数量和长度决定。</p></li><li><p><strong>应用场景</strong>：</p><ul><li>存储对象：如 <code>user:{id}</code> → {name:Tom, age:20}。</li><li>购物车：商品 ID → 数量。</li></ul></li><li><p><strong>优点</strong>：节省空间，读取局部字段更高效。</p></li><li><p><strong>命令示例</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>HSET user:1 name &quot;Tom&quot; age 20</span></span>
<span class="line"><span>HGET user:1 name</span></span>
<span class="line"><span>HGETALL user:1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="_3-list-列表" tabindex="-1"><a class="header-anchor" href="#_3-list-列表"><span>3. <strong>List（列表）</strong></span></a></h2><ul><li><p><strong>定义</strong>：一个有序列表，支持从两端插入、删除。</p></li><li><p><strong>底层实现</strong>：压缩列表（ziplist）或快速链表（quicklist）。</p></li><li><p><strong>应用场景</strong>：</p><ul><li>消息队列：生产者 LPUSH，消费者 RPOP。</li><li>时间线：微博、评论流。</li></ul></li><li><p><strong>优点</strong>：支持阻塞读取（<code>BLPOP</code>），可实现简单队列。</p></li><li><p><strong>命令示例</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>LPUSH queue &quot;task1&quot;</span></span>
<span class="line"><span>RPUSH queue &quot;task2&quot;</span></span>
<span class="line"><span>LPOP queue</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="_4-set-集合" tabindex="-1"><a class="header-anchor" href="#_4-set-集合"><span>4. <strong>Set（集合）</strong></span></a></h2><ul><li><p><strong>定义</strong>：无序集合，元素唯一。</p></li><li><p><strong>底层实现</strong>：整数集合（intset）或哈希表。</p></li><li><p><strong>应用场景</strong>：</p><ul><li>标签系统：用户兴趣标签。</li><li>社交关系：共同好友（<code>SINTER</code>）。</li><li>抽奖系统：随机取元素（<code>SRANDMEMBER</code>）。</li></ul></li><li><p><strong>命令示例</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>SADD tags &quot;java&quot; &quot;redis&quot; &quot;mysql&quot;</span></span>
<span class="line"><span>SMEMBERS tags</span></span>
<span class="line"><span>SINTER user1_friends user2_friends</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="_5-sorted-set-有序集合-zset" tabindex="-1"><a class="header-anchor" href="#_5-sorted-set-有序集合-zset"><span>5. <strong>Sorted Set（有序集合，ZSet）</strong></span></a></h2><ul><li><p><strong>定义</strong>：集合中的元素带有一个分数（score），按分数排序。</p></li><li><p><strong>底层实现</strong>：跳表（skiplist）+ 哈希表。</p></li><li><p><strong>应用场景</strong>：</p><ul><li>排行榜：按分数排序（如游戏积分）。</li><li>延迟队列：按时间戳作为 score。</li></ul></li><li><p><strong>命令示例</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>ZADD rank 100 &quot;Alice&quot;</span></span>
<span class="line"><span>ZADD rank 200 &quot;Bob&quot;</span></span>
<span class="line"><span>ZRANGE rank 0 -1 WITHSCORES</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="_6-bitmap-位图" tabindex="-1"><a class="header-anchor" href="#_6-bitmap-位图"><span>6. <strong>Bitmap（位图）</strong></span></a></h2><ul><li><p><strong>定义</strong>：基于 String 实现的二进制位操作。</p></li><li><p><strong>应用场景</strong>：</p><ul><li>签到系统：每天一个 bit 表示是否签到。</li><li>用户状态：是否在线、是否完成任务。</li></ul></li><li><p><strong>优点</strong>：节省空间（1 亿用户只需 12MB 内存）。</p></li><li><p><strong>命令示例</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>SETBIT sign 1 1</span></span>
<span class="line"><span>GETBIT sign 1</span></span>
<span class="line"><span>BITCOUNT sign</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="_7-hyperloglog-基数统计" tabindex="-1"><a class="header-anchor" href="#_7-hyperloglog-基数统计"><span>7. <strong>HyperLogLog（基数统计）</strong></span></a></h2><ul><li><p><strong>定义</strong>：用极小空间进行去重计数（近似值，误差率 &lt; 1%）。</p></li><li><p><strong>应用场景</strong>：</p><ul><li>网站 UV 统计。</li><li>统计独立用户数、IP 数。</li></ul></li><li><p><strong>优点</strong>：占用固定 12KB 内存，不管统计对象有多少亿。</p></li><li><p><strong>命令示例</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>PFADD uv &quot;user1&quot; &quot;user2&quot; &quot;user3&quot;</span></span>
<span class="line"><span>PFCOUNT uv</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="_8-stream-流" tabindex="-1"><a class="header-anchor" href="#_8-stream-流"><span>8. <strong>Stream（流）</strong></span></a></h2><ul><li><p><strong>定义</strong>：日志型数据结构，支持消息持久化、消费组。</p></li><li><p><strong>应用场景</strong>：</p><ul><li>消息队列（比 List 更强大）。</li><li>日志流、实时数据处理。</li></ul></li><li><p><strong>优点</strong>：支持多消费者组，保证消息不丢失。</p></li><li><p><strong>命令示例</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>XADD mystream * user &quot;Tom&quot; action &quot;login&quot;</span></span>
<span class="line"><span>XREAD COUNT 1 STREAMS mystream 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="_9-geo-地理位置" tabindex="-1"><a class="header-anchor" href="#_9-geo-地理位置"><span>9. <strong>GEO（地理位置）</strong></span></a></h2><ul><li><p><strong>定义</strong>：基于 Sorted Set 实现，存储经纬度坐标，支持半径、距离计算。</p></li><li><p><strong>应用场景</strong>：</p><ul><li>“附近的人”功能。</li><li>打车、外卖派单。</li></ul></li><li><p><strong>命令示例</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>GEOADD city 116.40 39.90 &quot;Beijing&quot;</span></span>
<span class="line"><span>GEORADIUS city 116.40 39.90 100 km</span></span>
<span class="line"><span>GEODIST city &quot;Beijing&quot; &quot;Shanghai&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="_10-json-redisjson-模块" tabindex="-1"><a class="header-anchor" href="#_10-json-redisjson-模块"><span>10. <strong>JSON（RedisJSON 模块）</strong></span></a></h2><ul><li><p><strong>定义</strong>：Redis 的扩展模块（RedisJSON）支持存储和操作 JSON 文档。</p></li><li><p><strong>应用场景</strong>：</p><ul><li>存储复杂对象（嵌套结构）。</li><li>作为 NoSQL 文档数据库使用。</li></ul></li><li><p><strong>命令示例</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>JSON.SET user:1 $ &#39;{&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:25}&#39;</span></span>
<span class="line"><span>JSON.GET user:1 $.name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h1 id="📌-对比总结表" tabindex="-1"><a class="header-anchor" href="#📌-对比总结表"><span>📌 对比总结表</span></a></h1><table><thead><tr><th>数据类型</th><th>主要特性</th><th>常见应用</th></tr></thead><tbody><tr><td>String</td><td>字符串/数字存储</td><td>缓存、计数器、分布式锁</td></tr><tr><td>Hash</td><td>键值对集合</td><td>用户信息、对象存储</td></tr><tr><td>List</td><td>有序列表</td><td>消息队列、时间线</td></tr><tr><td>Set</td><td>无序去重集合</td><td>标签系统、好友关系</td></tr><tr><td>ZSet</td><td>有序集合</td><td>排行榜、延时队列</td></tr><tr><td>Bitmap</td><td>位存储</td><td>签到、活跃用户统计</td></tr><tr><td>HyperLogLog</td><td>基数统计</td><td>UV 统计</td></tr><tr><td>Stream</td><td>消息流</td><td>消息队列、日志流</td></tr><tr><td>GEO</td><td>地理位置</td><td>附近的人、地图服务</td></tr><tr><td>JSON</td><td>文档存储</td><td>嵌套对象存储、NoSQL 文档库</td></tr></tbody></table><hr><p>👉 这样你就能看到： 前 5 个（String、Hash、List、Set、ZSet）是 <strong>基础核心类型</strong>； 后 5 个（Bitmap、HyperLogLog、Stream、GEO、JSON）是 <strong>扩展高级类型</strong>，适合特定业务。</p>`,34)]))}const o=i(t,[["render",l]]),p=JSON.parse('{"path":"/nosqldb/redises/1gjl58nl/","title":"Redis的10大数据类型","lang":"zh-CN","frontmatter":{"title":"Redis的10大数据类型","createTime":"2025/08/26 13:08:52","permalink":"/nosqldb/redises/1gjl58nl/"},"readingTime":{"minutes":3.4,"words":1021},"git":{"createdTime":1756736713000},"filePathRelative":"notes/nosqldb/redises/Redis的10大数据类型.md","headers":[]}');export{o as comp,p as data};

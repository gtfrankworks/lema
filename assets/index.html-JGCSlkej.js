import{a,c as e,b as n,o as i}from"./app-ZQgO6-gU.js";const l={};function p(d,s){return i(),e("div",null,s[0]||(s[0]=[n(`<h2 id="数据脱敏是什么" tabindex="-1"><a class="header-anchor" href="#数据脱敏是什么"><span>数据脱敏是什么</span></a></h2><p>随着《网络安全法》的颁布施行，对个人隐私数据的保护已经上升到法律层面。 数据脱敏是指对某些敏感信息通过脱敏规则进行数据的变形， 实现敏感隐私数据的可靠保护。在涉及客户安全数据或者一些商业性敏感数据的情况下，在不违反系统规则条件下，对真实数据进行改造并提供使用， 如身份证号、手机号、卡号、客户号等个人信息都需要进行数据脱敏。</p><h2 id="columnmask" tabindex="-1"><a class="header-anchor" href="#columnmask"><span>@ColumnMask</span></a></h2><p>MyBatis-Flex 提供了 <code>@ColumnMask()</code> 注解，以及内置的9种脱敏规则，帮助开发者方便的进行数据脱敏。例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>@Table(&quot;tb_account&quot;)</span></span>
<span class="line"><span>public class Account {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Id(keyType = KeyType.Auto)</span></span>
<span class="line"><span>    private Long id;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @ColumnMask(Masks.CHINESE_NAME)</span></span>
<span class="line"><span>    private String userName;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的示例中，使用了 <code>CHINESE_NAME</code> 的脱敏规则，其主要用于处理 &quot;中文名字&quot; 的场景。当我们查询到 userName 为 <code>张三丰</code> 的时候，其内容自动被处理成 <code>张**</code>。</p><p>除此之外，MyBatis-Flex 还提供了如下的8种脱敏规则（共9种），方便开发者直接使用：</p><ul><li>手机号脱敏</li><li>固定电话脱敏</li><li>身份证号脱敏</li><li>车牌号脱敏</li><li>地址脱敏</li><li>邮件脱敏</li><li>密码脱敏</li><li>银行卡号脱敏</li></ul><h2 id="自定义脱敏规则" tabindex="-1"><a class="header-anchor" href="#自定义脱敏规则"><span>自定义脱敏规则</span></a></h2><p>当 Mybaits-Flex 内置的9种脱敏规则无法满足要求时，我们还可以自定义脱敏规则，其步骤如下：</p><p>1、通过 <code>MaskManager</code> 注册新的脱敏规则：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>MaskManager.registerMaskProcessor(&quot;自定义规则名称&quot;</span></span>
<span class="line"><span>        , data -&gt; {</span></span>
<span class="line"><span>            return data;</span></span>
<span class="line"><span>        })</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、使用自定义的脱敏规则</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>@Table(&quot;tb_account&quot;)</span></span>
<span class="line"><span>public class Account {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Id(keyType = KeyType.Auto)</span></span>
<span class="line"><span>    private Long id;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @ColumnMask(&quot;自定义规则名称&quot;)</span></span>
<span class="line"><span>    private String userName;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="取消脱敏处理" tabindex="-1"><a class="header-anchor" href="#取消脱敏处理"><span>取消脱敏处理</span></a></h2><p>在某些场景下，程序希望查询得到的数据是原始数据，而非脱敏数据。比如要去查询用户的手机号，然后给用户发送短信。又或者说，我们进入编辑页面编辑用户数据， 如果编辑页面展示的是脱敏数据，然后再次点击保存，那么数据库的真实数据也会被脱敏覆盖。</p><p>因此，MaskManager 提供了 <code>execWithoutMask</code>、<code>skipMask</code>、<code>restoreMask</code> 三个方法来处理这种场景：</p><p>推荐使用<code>execWithoutMask</code>方法，该方法使用了模版方法设计模式，保障跳过脱敏处理并执行相关逻辑后自动恢复脱敏处理。</p><p><code>execWithoutMask</code>方法实现如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public static &lt;T&gt; T execWithoutMask(Supplier&lt;T&gt; supplier) {</span></span>
<span class="line"><span>    try {</span></span>
<span class="line"><span>        skipMask();</span></span>
<span class="line"><span>        return supplier.get();</span></span>
<span class="line"><span>    } finally {</span></span>
<span class="line"><span>        restoreMask();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>AccountMapper mapper = ...;</span></span>
<span class="line"><span>List&lt;Account&gt; accounts = MaskManager.execWithoutMask(mapper::selectAll);</span></span>
<span class="line"><span>System.out.println(accounts);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>skipMask</code>和<code>restoreMask</code>方法需配套使用，推荐使用<code>try{...}finally{...}</code>模式，如下例所示。 使用这两个方法可以自主控制跳过脱敏处理和恢复脱敏处理的时机。 当跳过脱敏处理和恢复脱敏处理无法放在同一个方法中时，可以使用这两个方法。 此时需要仔细处理代码分支及异常，以防止跳过脱敏处理后未恢复脱敏处理，导致安全隐患。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>try {</span></span>
<span class="line"><span>    MaskManager.skipMask();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //此处查询到的数据不会进行脱敏处理</span></span>
<span class="line"><span>    accountMapper.selectListByQuery(...);</span></span>
<span class="line"><span>} finally {</span></span>
<span class="line"><span>    MaskManager.restoreMask();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示</p><p>在具体的应用中，我们通常会把<code>execWithoutMask</code>、<code>skipMask()</code> 和 <code>restoreMask()</code> 放到统一的拦截器里，对某一类业务进行统一拦截和处理。</p>`,26)]))}const t=a(l,[["render",p]]),r=JSON.parse('{"path":"/framework/mybatisflex/ad/hvenazm4/","title":"MyBatis-Flex数据脱敏","lang":"zh-CN","frontmatter":{"title":"MyBatis-Flex数据脱敏","createTime":"2025/08/27 09:47:34","permalink":"/framework/mybatisflex/ad/hvenazm4/"},"readingTime":{"minutes":2.84,"words":851},"git":{"createdTime":1756736713000},"filePathRelative":"notes/framework/mybatisflex/ad/MyBatis-Flex数据脱敏.md","headers":[]}');export{t as comp,r as data};

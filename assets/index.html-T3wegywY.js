import{a as e,c as i,b as a,o as n}from"./app-ZQgO6-gU.js";const l={};function d(t,s){return n(),i("div",null,s[0]||(s[0]=[a(`<h2 id="一、什么是redis事务" tabindex="-1"><a class="header-anchor" href="#一、什么是redis事务"><span>一、什么是Redis事务</span></a></h2><p>Redis事务是指<strong>一次性执行多个命令的操作集合</strong>，保证命令按照顺序依次执行，中间不会被其他客户端的命令插入打断，但与传统数据库事务相比，Redis事务不支持回滚（部分失败时不会自动回滚）。</p><p>Redis事务的特点：</p><ol><li><strong>原子性</strong>：事务中的命令会按顺序依次执行，中间不会被其他客户端的命令打断。</li><li><strong>隔离性</strong>：事务执行期间，其他客户端不会看到事务中的部分执行结果。</li><li><strong>缺少回滚机制</strong>：Redis事务中命令执行失败不会回滚已执行的命令。</li><li><strong>乐观锁机制可选</strong>：通过 <code>WATCH</code> 命令实现乐观锁，防止数据被其他客户端修改。</li></ol><p>Redis事务 VS 数据库事务：</p><ul><li>单独的隔离操作：Redis的事务仅仅是保证事务里的操作会被连续独占的执行，redis命令执行是单线程架构，在执行完事务内所有指令前是不可能再去同时执行其他客户端的请求的。</li><li>没有隔离级别的概念：因为事务提交前任何指令都不会被实际执行，也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到“这种问题了。</li><li>不保证原子性：Redis的事务不保证原子性，也就是不保证所有指令同时成功或同时失败，只有决定是否开始执行全部指令的能力，没有执行到一半进行回滚的能力</li><li>排他性：Redis会保证一个事务内的命令依次执行，而不会被其他命令插入</li></ul><h2 id="二、事务命令概览" tabindex="-1"><a class="header-anchor" href="#二、事务命令概览"><span>二、事务命令概览</span></a></h2><p>Redis提供以下事务相关命令：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>MULTI</code></td><td>开启一个事务块，后续命令会进入事务队列</td></tr><tr><td><code>EXEC</code></td><td>执行事务队列中的所有命令</td></tr><tr><td><code>DISCARD</code></td><td>取消事务，清空事务队列</td></tr><tr><td><code>WATCH</code></td><td>监视一个或多个 key，如果 key 在事务执行前被修改，则事务被打断</td></tr><tr><td><code>UNWATCH</code></td><td>取消对 key 的监视</td></tr></tbody></table><hr><h2 id="三、事务使用流程" tabindex="-1"><a class="header-anchor" href="#三、事务使用流程"><span>三、事务使用流程</span></a></h2><p>Redis事务执行流程可以分为以下几步：</p><ol><li><p><strong>开启事务</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>MULTI</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>开启事务后，Redis会把后续命令放入事务队列，而不立即执行。</p></li><li><p><strong>加入事务命令</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>SET key1 value1</span></span>
<span class="line"><span>INCR key2</span></span>
<span class="line"><span>LPUSH list1 item1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些命令被加入事务队列，并不会立即执行。</p></li><li><p><strong>执行事务</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>EXEC</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Redis会按顺序执行事务队列中的所有命令。如果事务中有命令语法错误，Redis会在执行时返回错误，但<strong>已正确的命令仍会执行</strong>。</p></li><li><p><strong>取消事务</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>DISCARD</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果在 <code>EXEC</code> 之前调用 <code>DISCARD</code>，事务队列将被清空，不执行任何命令。</p></li><li><p><strong>使用 WATCH</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>WATCH key1 key2</span></span>
<span class="line"><span>MULTI</span></span>
<span class="line"><span>SET key1 value</span></span>
<span class="line"><span>EXEC</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>WATCH</code> 会监视 key1 和 key2，如果在 <code>EXEC</code> 执行前这两个 key 被其他客户端修改，事务会被取消（返回 null）。</li><li><code>UNWATCH</code> 可以取消监控。</li></ul></li></ol><hr><h2 id="四、事务示例" tabindex="-1"><a class="header-anchor" href="#四、事务示例"><span>四、事务示例</span></a></h2><h3 id="_1-基本事务示例" tabindex="-1"><a class="header-anchor" href="#_1-基本事务示例"><span>1. 基本事务示例</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>127.0.0.1:6379&gt; MULTI</span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379&gt; SET user:1:name &quot;Alice&quot;</span></span>
<span class="line"><span>QUEUED</span></span>
<span class="line"><span>127.0.0.1:6379&gt; INCR user:1:score</span></span>
<span class="line"><span>QUEUED</span></span>
<span class="line"><span>127.0.0.1:6379&gt; EXEC</span></span>
<span class="line"><span>1) OK</span></span>
<span class="line"><span>2) (integer) 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li><code>MULTI</code> 后进入事务队列</li><li><code>QUEUED</code> 表示命令已排队</li><li><code>EXEC</code> 执行所有命令</li></ul><h3 id="_2-discard-取消事务" tabindex="-1"><a class="header-anchor" href="#_2-discard-取消事务"><span>2. DISCARD 取消事务</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>127.0.0.1:6379&gt; MULTI</span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379&gt; SET user:2:name &quot;Bob&quot;</span></span>
<span class="line"><span>QUEUED</span></span>
<span class="line"><span>127.0.0.1:6379&gt; DISCARD</span></span>
<span class="line"><span>OK</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li>队列中的命令被清空，没有执行</li></ul><h3 id="_3-使用-watch-实现乐观锁" tabindex="-1"><a class="header-anchor" href="#_3-使用-watch-实现乐观锁"><span>3. 使用 WATCH 实现乐观锁</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>127.0.0.1:6379&gt; WATCH stock:product1</span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379&gt; GET stock:product1</span></span>
<span class="line"><span>&quot;10&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; MULTI</span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379&gt; DECR stock:product1</span></span>
<span class="line"><span>QUEUED</span></span>
<span class="line"><span>127.0.0.1:6379&gt; EXEC</span></span>
<span class="line"><span>1) (integer) 9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li>如果在 <code>EXEC</code> 前其他客户端修改了 <code>stock:product1</code>，事务会失败，返回 <code>null</code></li></ul><hr><h2 id="五、redis事务的实现机制" tabindex="-1"><a class="header-anchor" href="#五、redis事务的实现机制"><span>五、Redis事务的实现机制</span></a></h2><ol><li><strong>命令排队</strong><ul><li><code>MULTI</code> 后，所有命令不会立即执行，而是加入事务队列。</li></ul></li><li><strong>原子执行</strong><ul><li><code>EXEC</code> 时，Redis会按顺序执行队列中所有命令。</li></ul></li><li><strong>乐观锁 WATCH</strong><ul><li>Redis不会阻塞其他客户端，使用乐观锁保证事务的一致性。</li></ul></li><li><strong>无自动回滚</strong><ul><li>事务执行中单个命令错误不会回滚其他命令。</li></ul></li></ol><hr><h2 id="六、事务使用注意事项" tabindex="-1"><a class="header-anchor" href="#六、事务使用注意事项"><span>六、事务使用注意事项</span></a></h2><ol><li><strong>Redis事务不是严格的ACID</strong><ul><li>Redis事务缺少自动回滚</li><li>并发写冲突需要 <code>WATCH</code> 手动处理</li></ul></li><li><strong>事务中命令错误</strong><ul><li>语法错误会在 <code>EXEC</code> 时返回错误</li><li>逻辑错误（如对非数字 key 使用 <code>INCR</code>）会导致该命令失败，但其他命令仍执行</li></ul></li><li><strong>事务队列中不要执行耗时命令</strong><ul><li>事务中命令执行是阻塞的，耗时命令会影响其他客户端</li></ul></li><li><strong>WATCH 仅监控事务开始前</strong><ul><li>监控 key 在 <code>EXEC</code> 执行前发生变化就会导致事务失败</li></ul></li></ol><hr><h2 id="七、事务与管道-pipeline-的区别" tabindex="-1"><a class="header-anchor" href="#七、事务与管道-pipeline-的区别"><span>七、事务与管道（Pipeline）的区别</span></a></h2><table><thead><tr><th>特性</th><th>事务</th><th>管道</th></tr></thead><tbody><tr><td>原子性</td><td>是（命令按顺序执行，不被打断）</td><td>否（只提高网络性能）</td></tr><tr><td>错误处理</td><td>无回滚机制</td><td>无回滚机制</td></tr><tr><td>执行方式</td><td>一次性执行事务队列</td><td>批量发送命令，但服务器逐条执行</td></tr><tr><td>使用场景</td><td>保证命令原子性</td><td>提高批量命令性能</td></tr></tbody></table><hr><h2 id="八、redis事务最佳实践" tabindex="-1"><a class="header-anchor" href="#八、redis事务最佳实践"><span>八、Redis事务最佳实践</span></a></h2><ol><li>使用事务修改同一组相关 key，保证操作原子性。</li><li>结合 <code>WATCH</code> 实现乐观锁，防止并发写冲突。</li><li>避免在事务中执行耗时命令，如 <code>KEYS *</code>。</li><li>将事务与 Lua 脚本结合，可以实现更强的原子性和逻辑复杂操作。</li></ol><hr><h2 id="九、lua脚本替代事务" tabindex="-1"><a class="header-anchor" href="#九、lua脚本替代事务"><span>九、Lua脚本替代事务</span></a></h2><ul><li>Lua脚本可以一次性执行多条命令，且保证原子性。</li><li>优点： <ul><li>可以实现复杂业务逻辑</li><li>避免 <code>WATCH</code> 的乐观锁复杂性</li></ul></li><li>示例：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>EVAL &quot;if redis.call(&#39;get&#39;, KEYS[1]) == ARGV[1] then return redis.call(&#39;del&#39;, KEYS[1]) else return 0 end&quot; 1 lock_key 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,43)]))}const c=e(l,[["render",d]]),p=JSON.parse('{"path":"/nosqldb/fw6n7ai8/","title":"Redis事务","lang":"zh-CN","frontmatter":{"title":"Redis事务","createTime":"2025/08/26 13:14:50","permalink":"/nosqldb/fw6n7ai8/"},"readingTime":{"minutes":4.9,"words":1471},"git":{"createdTime":1756736713000},"filePathRelative":"notes/nosqldb/redises/Redis事务.md","headers":[]}');export{c as comp,p as data};

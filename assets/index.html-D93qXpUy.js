import{a as i,c as a,b as n,o as l}from"./app-ZQgO6-gU.js";const e={};function h(t,s){return l(),a("div",null,s[0]||(s[0]=[n(`<figure><img src="https://i.loli.net/2020/11/10/LQI2hyexV4ZFN7j.png" alt="代理模式.png" tabindex="0" loading="lazy"><figcaption>代理模式.png</figcaption></figure><h1 id="设计模式的学习问题-❔" tabindex="-1"><a class="header-anchor" href="#设计模式的学习问题-❔"><span>设计模式的学习问题⁉❔</span></a></h1><p>我一直都在想如何学会一个新东西，和掌握一个旧东西🤔，有很多前辈给过一些建议和意见📑，（当然不是直接给我，都是看大佬的文章或者书籍当中。）先去用，再去学。嗯，我想是的，这样肯定是个很正常的学习过程。但是对于一些你暂时无法使用的东西，你如何去掌握它呢？我认为应该抛开表象去了解本质，通过本质的类比去掌握那些暂时无法使用的东西。设计模式就是这种情况，在平常的开发中，常用的设计模式就那么几种，其它的那些没有机会去接触，干学，如何才能掌握呢？🗃</p><p>我从小就是一个好为人师的家伙🤓，然而自己学习却一直都不怎么样😢。人太实在，也不懂的包装，我只知道我学习这么差的能学会的东西，讲给别人应该差不哪去。😊</p><p>在学习算法的时候，学到一个特别巧妙而且很好用的解题思路或者说逻辑思维<code>”分而治之“</code>，还有之前和网友讨论的一个叫做<code>”复杂度守恒定律“</code>的东西。这两个东西放在一起，可以说是很”矛盾“⚔🛡了。</p><p>说了这么多我想说的就是，设计模式这个知识点，真的很简单又很难。简单是因为每种设计模式的定义拿出来都能看的懂，难是难在如何，何时的应用。而我希望我写的这个设计模式系列是去应用化的，就是单纯的把设计模式的思想记录下来。我所理解的设计模式就该如此。</p><p>GOF的**《设计模式.可复用面向对象软件的基础》**通过一个应用案例的实现，串起了23种设计模式，我想在系列更新完之后也更新一个应用，将 23 种设计模式尽可能的应用到一个应用案例中去，而不是每个设计模式都涉及具体的应用，因为我觉得这可能会带的人们更关注应用的实现，而不是设计模式的应用，这是我的一些想法。</p><p><strong>不要纠结每种模式的具体实现，把它们抽象出来，你能够清楚的描述每种模式是为了解决什么问题而存在的时候，就已经掌握它了，就可以把它用在任何当你需要的时候。而不是问什么时候需要它，这可能有点绕，不过它是真的。不要问我设计模式可以解决哪些问题，把问题给我，我告诉你用什么设计模式可以解决它！</strong></p><p><em>我发现我更适合写一些畅谈型的文章🤣</em></p><figure><img src="https://i.loli.net/2020/10/22/5l9eIS7tXdofFAE.png" alt="代理模式" tabindex="0" loading="lazy"><figcaption>代理模式</figcaption></figure><h1 id="代理模式-👥" tabindex="-1"><a class="header-anchor" href="#代理模式-👥"><span>代理模式 👥</span></a></h1><blockquote><p>为某对象提供一种代理以<strong>控制对该对象的访问</strong>。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</p></blockquote><p>代理模式是为了解决<strong>对象的访问控制</strong>，特别是当你的目标对象不可改变的时候。效果更佳明显。</p><p>先来几段对话，简单感受一下这个“代理”</p><ul><li>“这 google 好慢啊，搞个代理”</li><li>“您好，请问明年3月-12月有档期吗？” ”和我经纪人联系📞“</li><li>“我要告你” “好啊，有什么问题跟我的律师说吧”</li><li>“哦？👀是海大富海公公” “这是皇上口谕” “啊？（急忙下跪）“</li><li>“您好，这里是 12345 市长热线☎”</li></ul><p><strong>“控制一个实际的对象访问，同时可以达到一定的目的”</strong></p><h2 id="生活中的比喻" tabindex="-1"><a class="header-anchor" href="#生活中的比喻"><span>生活中的比喻</span></a></h2><p>希望可以用生活中的一些例子能让我更好的去表达和梳理代理模式</p><h3 id="明星-经纪人" tabindex="-1"><a class="header-anchor" href="#明星-经纪人"><span>明星&amp;经纪人</span></a></h3><p>比如经纪人，他代理了明星（主体），负责主体功能以外的事情，主体可以进行商演，但在商演以前或以后的事情，都不需要主体去关系，全部都由经纪人去处理。</p><h3 id="公园门-门禁" tabindex="-1"><a class="header-anchor" href="#公园门-门禁"><span>公园门&amp;门禁</span></a></h3><p>一个公园的门禁，通过门禁系统，代理了公园的入口，公园入口只负责放人进入公园，不关心什么时候什么情况，来人就表示可以进入。门禁系统则负责什么时候，什么情况可以进。</p><p>通过使用代理模式，可以让我们的业务代码结构更加完整清晰，而将一些控制和辅助型的逻辑处理交给代理类，这其中体现的就是单一职责原则与迪米特法则。</p><p>上面的两个例子，我所想要表达的意思就是说明代理模式是为了<strong>控制一个实际对象的访问</strong>而存在的一种模式。不知道我说清了没有。</p><h2 id="程序中的例子" tabindex="-1"><a class="header-anchor" href="#程序中的例子"><span>程序中的例子</span></a></h2><h3 id="mybats-的数据访问接口" tabindex="-1"><a class="header-anchor" href="#mybats-的数据访问接口"><span>mybats 的数据访问接口</span></a></h3><p>在代理模式中我们最常用到的应该就是 ORM 框架中的应用了，我们熟知的 mybatis 对<strong>数据库的访问控制</strong>就是使用了代理模式，通过一个接口的定义，来代理了数据库的访问操作。</p><p>在 mybatis 的代理模式处理思想如果翻译成白话：”你将你要执行的 SQL 告诉我在哪（mapper 映射，statement space），语句写好（xml）剩下的你都不用管“，这里的 mapper 接口即代理了数据库的访问工作。</p><p>**甚至 #{} \${} 占位符，也是一种代理模式的体现，不一定非要有完整的接口，具体的实现类，代理类才是代理模式。**可能这理解起来会让你觉得有点强词夺理。</p><h2 id="代理模式类图-📌" tabindex="-1"><a class="header-anchor" href="#代理模式类图-📌"><span>代理模式类图 📌</span></a></h2><figure><img src="https://i.loli.net/2020/10/22/ziGBmy81YFw7kts.png" alt="prxy-UML" tabindex="0" loading="lazy"><figcaption>prxy-UML</figcaption></figure><h2 id="代码-📄" tabindex="-1"><a class="header-anchor" href="#代码-📄"><span>代码 📄</span></a></h2><blockquote><p>完整代码获取关注公众号：星尘的一个朋友 回复 “源码”</p></blockquote><p>为了在深入的理解一下代理模式，我选择使用 mybatis 的代理模式实现原理伪代码。以及挖掘一下JDK动态代理的一些细节内容，当然我不会去写源码的东西（毕竟道理大家都懂，不可能凭空 new 出来一个接口的实例，这当中定有蹊跷，我相信你在任何一篇博文中都能看到这部分内容，当然也欢迎加我微信（lvgocc）进群讨论）</p><p><strong>mybatis的核心代理模式伪代码</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 用户接口</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@author</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> lvgorice@gmail.com</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * @date 2020/10/21 22:51</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@since</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 1.0.0</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> interface</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> UserMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * 查询</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     *</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@param</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 用户id</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> selectByUserId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">UserMapper</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> o</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">UserMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">newProxyInstance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        UserMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getClassLoader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        new</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> Class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]{</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">UserMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> method</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> arg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 这里会执行具体的连接数据库执行 SQL 的操作 感兴趣可以查看 mybatis 源码继续了解。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            // 打印参数</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">             logger</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">statement position: {}, args: {}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> method</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getDeclaringClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getCanonicalName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">#</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> method</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Arrays</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">toString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">arg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">             return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">用户id：</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> arg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">公众号：星尘的一个朋友，加群一起学习设计模式</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-restructuredtext line-numbers-mode" data-highlighter="shiki" data-ext="restructuredtext" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-restructuredtext"><span class="line"><span>14:25:43.966 [main] INFO io.github.lvgocc.App - Hello World!</span></span>
<span class="line"><span>14:25:44.251 [main] INFO io.github.lvgocc.App - statement position: io.github.lvgocc.proxy.UserMapper#selectByUserId, args: [2333]</span></span>
<span class="line"><span>14:25:44.258 [main] INFO io.github.lvgocc.App - 查询结果：用户id：2333公众号：星尘的一个朋友，加群一起学习设计模式</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mybatis 使用动态代理，让一个接口去代理了真实的数据库对象，当你需要的时候，再去建立连接、访问数据库、执行SQL、返回结果。如果之前有了解过 mybatis 的代理模式，这里应该不难理解。</p><p><strong>下面再看一个简单的例子，当然用图说明可能会更容易</strong></p><figure><img src="https://i.loli.net/2020/10/22/MpN1wxuCjrBH96t.png" alt="大洋彼岸的服务器" tabindex="0" loading="lazy"><figcaption>大洋彼岸的服务器</figcaption></figure><blockquote><p>请忽略图中示意具体内容，只是借图表达代理的意义，控制对象的访问。</p></blockquote><h2 id="总结一下-🐱‍💻" tabindex="-1"><a class="header-anchor" href="#总结一下-🐱‍💻"><span>总结一下 🐱‍💻</span></a></h2><p>代理模式为了解决对象的访问控制而存在。</p><ul><li>当你想要抢一张<code>回家的车票</code>，你选择了<code>候补</code>，他选择了<code>加速</code>.此时 12306 或是 第三方 成了你的购票代理人。</li><li>当你来到一个<code>陌生的小区</code>，需要刷<code>门禁</code>卡才能进入。此时<code>门禁</code>成了<code>小区</code>的代理。</li></ul><p>通过上面的总结，我知道</p><ol><li>当我选择了候补，我和购票<strong>解耦了</strong>✔，不需要等它的结果，等通知就行。但中间多了一个候补，<strong>链路更长</strong>❌了。</li><li>我进门要刷卡，<strong>维护的对象多了</strong>❌，虽然<strong>系统变得复杂</strong>❌了，但小区<strong>更安全</strong>✔了，保护了小区。</li></ol>`,47)]))}const k=i(e,[["render",h]]),r=JSON.parse('{"path":"/design/zidxh2vh/","title":"代理模式","lang":"zh-CN","frontmatter":{"title":"代理模式","createTime":"2025/08/27 23:09:17","permalink":"/design/zidxh2vh/"},"readingTime":{"minutes":7.15,"words":2145},"git":{"createdTime":1756736713000},"filePathRelative":"notes/design/代理模式.md","headers":[]}');export{k as comp,r as data};

import{a as e,c as s,b as i,o as l}from"./app-ZQgO6-gU.js";const p="/lema/images/mybatis/mybatis_%E6%A1%86%E6%9E%B6%E5%9B%BE.png",t={};function r(o,a){return l(),s("div",null,a[0]||(a[0]=[i('<p>本文对Mybatis做一个简单介绍，包括框架原理，执行过程，开发方法，输入输出映射以及动态sql,我会在后续的系列文章中一一详细说明</p><h2 id="mybatis-介绍" tabindex="-1"><a class="header-anchor" href="#mybatis-介绍"><span>Mybatis 介绍</span></a></h2><p>Mybatis是一个持久层的框架，是apache下的顶级项目。</p><p>Mybatis托管到goolecode下，再后来托管到github下(https://github.com/Mybatis/Mybatis-3/releases)。</p><p>Mybatis让程序将主要精力放在sql上，通过Mybatis提供的映射方式，自由灵活生成（半自动化，大部分需要程序员编写sql）满足需要sql语句。</p><p>Mybatis可以将向 preparedStatement中的输入参数自动进行输入映射，将查询结果集灵活映射成java对象。（输出映射）</p><h2 id="框架原理" tabindex="-1"><a class="header-anchor" href="#框架原理"><span>框架原理</span></a></h2><p>Mybatis框架 <img src="'+p+'" alt="Mybatis框架图" loading="lazy"></p><h2 id="mybatis框架执行过程" tabindex="-1"><a class="header-anchor" href="#mybatis框架执行过程"><span>Mybatis框架执行过程</span></a></h2><p>1、配置Mybatis的配置文件，SqlMapConfig.xml（名称不固定）</p><p>2、通过配置文件，加载Mybatis运行环境，创建SqlSessionFactory会话工厂(SqlSessionFactory在实际使用时按单例方式)</p><p>3、通过SqlSessionFactory创建SqlSession。SqlSession是一个面向用户接口（提供操作数据库方法），实现对象是线程不安全的，建议sqlSession应用场合在方法体内。</p><p>4、调用sqlSession的方法去操作数据。如果需要提交事务，需要执行SqlSession的commit()方法。</p><p>5、释放资源，关闭SqlSession</p><h2 id="mybatis开发dao的方法" tabindex="-1"><a class="header-anchor" href="#mybatis开发dao的方法"><span>Mybatis开发dao的方法</span></a></h2><p>1.原始dao 的方法</p><ul><li>需要程序员编写dao接口和实现类</li><li>需要在dao实现类中注入一个SqlSessionFactory工厂</li></ul><p>2.mapper代理开发方法（建议使用）</p><p>只需要程序员编写mapper接口（就是dao接口）。 程序员在编写mapper.xml(映射文件)和mapper.java需要遵循一个开发规范：</p><ul><li>mapper.xml中namespace就是mapper.java的类全路径。</li><li>mapper.xml中statement的id和mapper.java中方法名一致。</li><li>mapper.xml中statement的parameterType指定输入参数的类型和mapper.java的方法输入参数类型一致</li><li>mapper.xml中statement的resultType指定输出结果的类型和mapper.java的方法返回值类型一致。</li></ul><p>SqlMapConfig.xml配置文件：可以配置properties属性、别名、mapper加载。</p><h2 id="输入映射和输出映射" tabindex="-1"><a class="header-anchor" href="#输入映射和输出映射"><span>输入映射和输出映射</span></a></h2><ul><li><p>输入映射：</p><ul><li>parameterType：指定输入参数类型可以简单类型、pojo、hashmap。</li><li>对于综合查询，建议parameterType使用包装的pojo，有利于系统扩展。</li></ul></li><li><p>输出映射：</p><ul><li>resultType：查询到的列名和resultType指定的pojo的属性名一致，才能映射成功。</li><li>reusltMap：可以通过resultMap 完成一些高级映射。如果查询到的列名和映射的pojo的属性名不一致时，通过resultMap设置列名和属性名之间的对应关系（映射关系）。可以完成映射。 <ul><li>高级映射： 将关联查询的列映射到一个pojo属性中。（一对一） 将关联查询的列映射到一个Listpojo中。（一对多）</li></ul></li></ul></li></ul><h2 id="动态sql" tabindex="-1"><a class="header-anchor" href="#动态sql"><span>动态sql</span></a></h2><ul><li>动态sql：（重点） <ul><li>if判断（掌握）</li><li>where</li><li>foreach</li><li>sql片段（掌握）</li></ul></li></ul>',25)]))}const n=e(t,[["render",r]]),h=JSON.parse('{"path":"/framework/mybatis/qj3r01mr/","title":"Mybatis框架的概述","lang":"zh-CN","frontmatter":{"title":"Mybatis框架的概述","createTime":"2025/08/26 15:31:48","permalink":"/framework/mybatis/qj3r01mr/"},"readingTime":{"minutes":2.47,"words":742},"git":{"createdTime":1756736713000},"filePathRelative":"notes/framework/mybatis/mybatis学习笔记(2)-mybatis概述.md","headers":[]}');export{n as comp,h as data};

import{a as i,c as n,b as a,o as e}from"./app-ZQgO6-gU.js";const l="/lema/images/mybatis/%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.png",p="/lema/images/mybatis/mybatis_%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png",t={};function d(r,s){return e(),n("div",null,s[0]||(s[0]=[a('<p>本文主要讲mybatis的一级缓存，一级缓存是SqlSession级别的缓存。</p><h2 id="查询缓存" tabindex="-1"><a class="header-anchor" href="#查询缓存"><span>查询缓存</span></a></h2><p>mybatis提供查询缓存，用于减轻数据压力，提高数据库性能。</p><p>mybaits提供一级缓存，和二级缓存。</p><figure><img src="'+l+'" alt="查询缓存" tabindex="0" loading="lazy"><figcaption>查询缓存</figcaption></figure><p>一级缓存是SqlSession级别的缓存。在操作数据库时需要构造sqlSession对象，在对象中有一个数据结构（HashMap）用于存储缓存数据。不同的sqlSession之间的缓存数据区域（HashMap）是互相不影响的。</p><p>二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p><p>为什么要用缓存？</p><p>如果缓存中有数据就不用从数据库中获取，大大提高系统性能。</p><h2 id="一级缓存" tabindex="-1"><a class="header-anchor" href="#一级缓存"><span>一级缓存</span></a></h2><h3 id="一级缓存工作原理" tabindex="-1"><a class="header-anchor" href="#一级缓存工作原理"><span>一级缓存工作原理</span></a></h3><figure><img src="'+p+`" alt="一级缓存工作原理" tabindex="0" loading="lazy"><figcaption>一级缓存工作原理</figcaption></figure><p>第一次发起查询用户id为1的用户信息，先去找缓存中是否有id为1的用户信息，如果没有，从数据库查询用户信息。得到用户信息，将用户信息存储到一级缓存中。</p><p>如果sqlSession去执行commit操作（执行插入、更新、删除），清空SqlSession中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。</p><p>第二次发起查询用户id为1的用户信息，先去找缓存中是否有id为1的用户信息，缓存中有，直接从缓存中获取用户信息。</p><h3 id="一级缓存测试" tabindex="-1"><a class="header-anchor" href="#一级缓存测试"><span>一级缓存测试</span></a></h3><p>mybatis默认支持一级缓存，不需要在配置文件去配置。</p><p>按照上边一级缓存原理步骤去测试。</p><p>测试代码</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 一级缓存测试</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Test</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testCache1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> throws Exception </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	SqlSession</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sqlSession</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sqlSessionFactory</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">openSession</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 创建代理对象</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	UserMapper</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> userMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sqlSession</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">UserMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	// 下边查询使用一个SqlSession</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	// 第一次发起请求，查询id为1的用户</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	User</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> user1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> userMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">findUserById</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">	System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">user1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	// 如果sqlSession去执行commit操作（执行插入、更新、删除），清空SqlSession中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	// 更新user1的信息</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	// user1.setUsername(&quot;测试用户22&quot;);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	// userMapper.updateUser(user1);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	//</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //执行commit操作去清空缓存</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	// sqlSession.commit();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	// 第二次发起请求，查询id为1的用户</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	User</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> user2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> userMapper</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">findUserById</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">	System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">user2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">	sqlSession</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">close</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.不执行更新操作，输出:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>DEBUG [main] - Opening JDBC Connection</span></span>
<span class="line"><span>DEBUG [main] - Created connection 110771485.</span></span>
<span class="line"><span>DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@69a3d1d]</span></span>
<span class="line"><span>DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user WHERE id=? </span></span>
<span class="line"><span>DEBUG [main] - ==&gt; Parameters: 1(Integer)</span></span>
<span class="line"><span>DEBUG [main] - &lt;==      Total: 1</span></span>
<span class="line"><span>User [id=1, username=王五, sex=2, birthday=null, address=null]</span></span>
<span class="line"><span>User [id=1, username=王五, sex=2, birthday=null, address=null]</span></span>
<span class="line"><span>DEBUG [main] - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@69a3d1d]</span></span>
<span class="line"><span>DEBUG [main] - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@69a3d1d]</span></span>
<span class="line"><span>DEBUG [main] - Returned connection 110771485 to pool.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.取消测试代码中更新的的注释，输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>DEBUG [main] - Opening JDBC Connection</span></span>
<span class="line"><span>DEBUG [main] - Created connection 110771485.</span></span>
<span class="line"><span>DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@69a3d1d]</span></span>
<span class="line"><span>DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user WHERE id=? </span></span>
<span class="line"><span>DEBUG [main] - ==&gt; Parameters: 1(Integer)</span></span>
<span class="line"><span>DEBUG [main] - &lt;==      Total: 1</span></span>
<span class="line"><span>User [id=1, username=王五, sex=2, birthday=null, address=null]</span></span>
<span class="line"><span>DEBUG [main] - ==&gt;  Preparing: update user set username=?,birthday=?,sex=?,address=? where id=? </span></span>
<span class="line"><span>DEBUG [main] - ==&gt; Parameters: 测试用户22(String), null, 2(String), null, 1(Integer)</span></span>
<span class="line"><span>DEBUG [main] - &lt;==    Updates: 1</span></span>
<span class="line"><span>DEBUG [main] - Committing JDBC Connection [com.mysql.jdbc.JDBC4Connection@69a3d1d]</span></span>
<span class="line"><span>DEBUG [main] - ==&gt;  Preparing: SELECT * FROM user WHERE id=? </span></span>
<span class="line"><span>DEBUG [main] - ==&gt; Parameters: 1(Integer)</span></span>
<span class="line"><span>DEBUG [main] - &lt;==      Total: 1</span></span>
<span class="line"><span>User [id=1, username=测试用户22, sex=2, birthday=null, address=null]</span></span>
<span class="line"><span>DEBUG [main] - Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@69a3d1d]</span></span>
<span class="line"><span>DEBUG [main] - Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@69a3d1d]</span></span>
<span class="line"><span>DEBUG [main] - Returned connection 110771485 to pool.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一级缓存应用" tabindex="-1"><a class="header-anchor" href="#一级缓存应用"><span>一级缓存应用</span></a></h3><p>正式开发，是将mybatis和spring进行整合开发，事务控制在service中。</p><p>一个service方法中包括 很多mapper方法调用。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>service{</span></span>
<span class="line"><span>	//开始执行时，开启事务，创建SqlSession对象</span></span>
<span class="line"><span>	//第一次调用mapper的方法findUserById(1)</span></span>
<span class="line"><span>	</span></span>
<span class="line"><span>	//第二次调用mapper的方法findUserById(1)，从一级缓存中取数据</span></span>
<span class="line"><span>	//方法结束，sqlSession关闭</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是执行两次service调用查询相同的用户信息，不走一级缓存，因为session方法结束，sqlSession就关闭，一级缓存就清空。</p>`,29)]))}const k=i(t,[["render",d]]),c=JSON.parse('{"path":"/framework/mybatis/spgjizpt/","title":"Mybatis一级缓存","lang":"zh-CN","frontmatter":{"title":"Mybatis一级缓存","createTime":"2025/08/26 15:31:48","permalink":"/framework/mybatis/spgjizpt/"},"readingTime":{"minutes":3.43,"words":1029},"git":{"createdTime":1756736713000},"filePathRelative":"notes/framework/mybatis/mybatis学习笔记(14)-查询缓存之一级缓存.md","headers":[]}');export{k as comp,c as data};

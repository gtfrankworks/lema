import{a as s,c as n,b as i,o as t}from"./app-ZQgO6-gU.js";const a={};function r(o,e){return t(),n("div",null,e[0]||(e[0]=[i(`<p>MyBatis-Flex 提供了一个名为 <code>IService</code> 的接口，及其默认实现类 <code>ServiceImpl</code> ，用于简化在 「Service」 层重复定义 「Mapper」 层的方法。</p><blockquote><p><code>IService</code> 接口只是提供了简单且常用的 “增删改查” 方法，更多细节以及复杂的业务，还是需要使用 <code>Mapper</code> 进行处理。</p></blockquote><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h2><p>接口：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>public interface IAccountService extends IService&lt;Account&gt; {</span></span>
<span class="line"><span>    //你的自定义方法</span></span>
<span class="line"><span>    List&lt;Account&gt; customMethod();</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现类：</p><p>java</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>@Component</span></span>
<span class="line"><span>public class AccountServiceImpl extends ServiceImpl&lt;AccountMapper, Account&gt;</span></span>
<span class="line"><span>        implements IAccountService {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public List&lt;Account&gt; customMethod() {</span></span>
<span class="line"><span>       // 返回 id &gt;= 100 的数据</span></span>
<span class="line"><span>       return list(ACCOUNT.ID.ge(100));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="保存数据" tabindex="-1"><a class="header-anchor" href="#保存数据"><span>保存数据</span></a></h2><p><code>IService</code> 的接口提供了 save、saveOrUpdate、saveBatch 方法，用于保存数据：</p><ul><li><strong>save(entity)</strong>：保存一条数据，忽略 null 值的字段。</li><li><strong>saveOrUpdate(entity)</strong>：保存一条数据，如果数据存在则更新数据。</li><li><strong>saveBatch(entities)</strong>：批量保存多条数据。</li><li><strong>saveBatch(entities, size)</strong>：批量保存多条数据，按指定数量切分。</li></ul><h2 id="删除数据" tabindex="-1"><a class="header-anchor" href="#删除数据"><span>删除数据</span></a></h2><p><code>IService</code> 的接口提供了 remove、removeById、removeByIds、removeByMap 方法，用于删除数据：</p><ul><li><strong>remove(query)</strong>：根据 <code>QueryWrapper</code> 构建的条件来删除数据。</li><li><strong>remove(condition)</strong>：根据 <code>QueryCondition</code> 构建的条件来删除数据。</li><li><strong>removeById(id)</strong>：根据主键删除数据，复合主键需要传入一个数组。</li><li><strong>removeById(entity)</strong>：根据实体主键删除数据，相比removeById(id)，此方法更便于对复合主键实体类的删除。。</li><li><strong>removeByIds(ids)</strong>：根据主键的集合，批量删除多条数据。</li><li><strong>removeByMap(map)</strong>：根据 <code>Map&lt;字段名，值&gt;</code> 组成的条件删除数据，字段名和值的关系为相等的关系；同时，防止 &quot;不小心&quot; 全表删除数据，Map 的值不允许为 null 或者空数据。</li></ul><h2 id="更新数据" tabindex="-1"><a class="header-anchor" href="#更新数据"><span>更新数据</span></a></h2><p><code>IService</code> 的接口提供了 update、updateById、updateBatch 方法，用于更新数据：</p><ul><li><strong>updateById(entity)</strong>：根据主键更新数据，要求主键值不能为空，否则会抛出异常；同时，数据为 null 的字段不会更新到数据库。</li><li><strong>updateById(entity, ignoreNulls)</strong>：根据主键更新数据，要求主键值不能为空，否则会抛出异常；同时，设置是否将数据为 null 的字段更新到数据库。</li><li><strong>update(entity, map)</strong>：根据 <code>Map&lt;字段名，值&gt;</code> 组成的条件更新数据，实体类可以没有主键（如果有也会被忽略），实体类的 null 属性，会自动被忽略。</li><li><strong>update(entity, query)</strong>：根据 <code>QueryWrapper</code> 构建的条件更新数据，实体类可以没有主键（如果有也会被忽略），实体类的 null 属性，会自动被忽略。</li><li><strong>update(entity, condition)</strong>：根据 <code>QueryCondition</code> 构建的条件更新数据，实体类可以没有主键（如果有也会被忽略），实体类的 null 属性，会自动被忽略。</li><li><strong>updateBatch(entities)</strong>：批量保存多条数据，要求主键值不能为空，否则会抛出异常；同时，数据为 null 的字段不会更新到数据库。</li><li><strong>updateBatchWithIgnoreNulls(entities, ignoreNulls)</strong>：批量保存多条数据，要求主键值不能为空，否则会抛出异常；可以选择数据为 null 的字段是否更新到数据库。</li><li><strong>updateBatch(entities, size)</strong>：批量保存多条数据，按指定数量切分，要求主键值不能为空，否则会抛出异常；同时，数据为 null 的字段不会更新到数据库。</li><li><strong>updateBatchWithIgnoreNulls(entities, size, ignoreNulls)</strong>：批量保存多条数据，按指定数量切分，要求主键值不能为空，否则会抛出异常；可以选择数据为 null 的字段是否更新到数据库。</li></ul><h2 id="查询数据" tabindex="-1"><a class="header-anchor" href="#查询数据"><span>查询数据</span></a></h2><h3 id="查询一条数据" tabindex="-1"><a class="header-anchor" href="#查询一条数据"><span>查询一条数据</span></a></h3><p><code>IService</code> 的接口提供了 getById、getByIdOpt、getOne、getOneOpt、getOneAs、getOneAsOpt 方法，用于查询一条数据：</p><ul><li><strong>getById(id)</strong>：根据主键查询数据。</li><li><strong>getByIdOpt(id)</strong>：根据主键查询数据，并封装为 <code>Optional</code> 返回。</li><li><strong>getOneByEntityId(entity)</strong>：根据实体主键查询数据。</li><li><strong>getByEntityIdOpt(entity)</strong>：根据实体主键查询数据，并封装为 <code>Optional</code> 返回。</li><li><strong>getOne(query)</strong>: 根据 <code>QueryWrapper</code> 构建的条件查询一条数据。</li><li><strong>getOne(condition)</strong>: 根据 <code>QueryCondition</code> 构建的条件查询一条数据。</li><li><strong>getOneOpt(query)</strong>: 根据<code>QueryWrapper</code> 构建的条件查询一条数据，并封装为 <code>Optional</code> 返回。</li><li><strong>getOneOpt(condition)</strong>: 根据 <code>QueryCondition</code> 构建的条件查询一条数据，并封装为 <code>Optional</code> 返回。</li><li><strong>getOneAs(query, asType)</strong>: 根据 <code>QueryWrapper</code> 构建的条件查询一条数据，并通过 asType 进行接收。</li><li><strong>getOneAsOpt(query, asType)</strong>: 根据<code>QueryWrapper</code> 构建的条件查询一条数据，并通过 asType 进行接收，封装为 <code>Optional</code> 返回。</li></ul><h3 id="查询多条数据" tabindex="-1"><a class="header-anchor" href="#查询多条数据"><span>查询多条数据</span></a></h3><p><code>IService</code> 的接口提供了 list、listAs、listByIds、listByMap 方法，用于查询多条数据：</p><ul><li><strong>list()</strong>：查询所有数据。</li><li><strong>list(query)</strong>：根据 <code>QueryCondition</code> 或 <code>QueryWrapper</code> 构建的条件查询多条数据。</li><li><strong>list(condition)</strong>：根据 <code>QueryCondition</code> 构建的条件查询多条数据。</li><li><strong>listAs(query, asType)</strong>：根据 <code>QueryWrapper</code> 构建的条件查询多条数据，并通过 asType 进行接收。</li><li><strong>listByIds(ids)</strong>：根据主键的集合查询多条数据。</li><li><strong>listByMap(map)</strong>：根据 <code>Map&lt;字段名，值&gt;</code> 组成的条件查询多条数据。</li></ul><h3 id="查询数据数量" tabindex="-1"><a class="header-anchor" href="#查询数据数量"><span>查询数据数量</span></a></h3><p><code>IService</code> 的接口提供了 exists、count 方法，用于查询数据数量；</p><ul><li><strong>count()</strong>：查询所有数据数量。</li><li><strong>count(query)</strong>：根据 <code>QueryWrapper</code> 构建的条件查询数据数量。</li><li><strong>count(condition)</strong>：根据 <code>QueryCondition</code> 构建的条件查询数据数量。</li><li><strong>exist(query)</strong>：根据 <code>QueryWrapper</code> 构建的条件判断数据是否存在。</li><li><strong>exist(condition)</strong>：根据 <code>QueryCondition</code> 构建的条件判断数据是否存在。</li></ul><h3 id="分页查询数据" tabindex="-1"><a class="header-anchor" href="#分页查询数据"><span>分页查询数据</span></a></h3><p><code>IService</code> 的接口提供了 page、pageAs 方法，用于分页查询数据：</p><ul><li><strong>page(page)</strong>：分页查询所有数据。</li><li><strong>page(page, query)</strong>：根据 <code>QueryWrapper</code> 构建的条件分页查询数据。</li><li><strong>page(page, condition)</strong>：根据 <code>QueryCondition</code> 构建的条件分页查询数据。</li><li><strong>pageAs(page, query, asType)</strong>：根据 <code>QueryWrapper</code> 构建的条件分页查询数据，并通过 asType 进行接收。</li></ul><h2 id="其他方法" tabindex="-1"><a class="header-anchor" href="#其他方法"><span>其他方法</span></a></h2><ul><li><strong>getMapper()</strong>：获取对应的 <code>BaseMapper</code> 接口。</li><li><strong>query()</strong>：获取默认的 <code>QueryWrapper</code> 类。</li></ul>`,33)]))}const d=s(a,[["render",r]]),c=JSON.parse('{"path":"/framework/mybatisflex/base/df5qelaw/","title":"Service顶级接口","lang":"zh-CN","frontmatter":{"title":"Service顶级接口","createTime":"2025/08/27 09:24:44","permalink":"/framework/mybatisflex/base/df5qelaw/"},"readingTime":{"minutes":4.78,"words":1435},"git":{"createdTime":1756736713000},"filePathRelative":"notes/framework/mybatisflex/base/Service顶级接口.md","headers":[]}');export{d as comp,c as data};

import{a as d,c as r,b as e,o as i}from"./app-ZQgO6-gU.js";const n={};function o(a,t){return i(),r("div",null,t[0]||(t[0]=[e('<p>PostgreSQL 内置函数也称为聚合函数，用于对字符串或数字数据执行处理。</p><p>下面是所有通用 PostgreSQL 内置函数的列表：</p><ul><li>COUNT 函数：用于计算数据库表中的行数。</li><li>MAX 函数：用于查询某一特定列中最大值。</li><li>MIN 函数：用于查询某一特定列中最小值。</li><li>AVG 函数：用于计算某一特定列中平均值。</li><li>SUM 函数：用于计算数字列所有值的总和。</li><li>ARRAY 函数：用于输入值(包括null)添加到数组中。</li><li>Numeric 函数：完整列出一个 SQL 中所需的操作数的函数。</li><li>String 函数：完整列出一个 SQL 中所需的操作字符的函数。</li></ul><hr><h2 id="_1-1-数学函数" tabindex="-1"><a class="header-anchor" href="#_1-1-数学函数"><span>1.1 数学函数</span></a></h2><p>下面是PostgreSQL中提供的数学函数列表，需要说明的是，这些函数中有许多都存在多种形式，区别只是参数类型不同。除非特别指明，任何特定形式的函数都返回和它的参数相同的数据类型。</p><table><thead><tr><th>函数</th><th>返回类型</th><th>描述</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>abs(x)</td><td></td><td>绝对值</td><td>abs(-17.4)</td><td>17.4</td></tr><tr><td>cbrt(double)</td><td></td><td>立方根</td><td>cbrt(27.0)</td><td>3</td></tr><tr><td>ceil(double/numeric)</td><td></td><td>不小于参数的最小的整数</td><td>ceil(-42.8)</td><td>-42</td></tr><tr><td>degrees(double)</td><td></td><td>把弧度转为角度</td><td>degrees(0.5)</td><td>28.6478897565412</td></tr><tr><td>exp(double/numeric)</td><td></td><td>自然指数</td><td>exp(1.0)</td><td>2.71828182845905</td></tr><tr><td>floor(double/numeric)</td><td></td><td>不大于参数的最大整数</td><td>floor(-42.8)</td><td>-43</td></tr><tr><td>ln(double/numeric)</td><td></td><td>自然对数</td><td>ln(2.0)</td><td>0.693147180559945</td></tr><tr><td>log(double/numeric)</td><td></td><td>10为底的对数</td><td>log(100.0)</td><td>2</td></tr><tr><td>log(b numeric,x numeric)</td><td>numeric</td><td>指定底数的对数</td><td>log(2.0, 64.0)</td><td>6.0000000000</td></tr><tr><td>mod(y, x)</td><td></td><td>取余数</td><td>mod(9,4)</td><td>1</td></tr><tr><td>pi()</td><td>double</td><td>&quot;π&quot;常量</td><td>pi()</td><td>3.14159265358979</td></tr><tr><td>power(a double, b double)</td><td>double</td><td>求a的b次幂</td><td>power(9.0, 3.0)</td><td>729</td></tr><tr><td>power(a numeric, b numeric)</td><td>numeric</td><td>求a的b次幂</td><td>power(9.0, 3.0)</td><td>729</td></tr><tr><td>radians(double)</td><td>double</td><td>把角度转为弧度</td><td>radians(45.0)</td><td>0.785398163397448</td></tr><tr><td>random()</td><td>double</td><td>0.0到1.0之间的随机数值</td><td>random()</td><td></td></tr><tr><td>round(double/numeric)</td><td></td><td>圆整为最接近的整数</td><td>round(42.4)</td><td>42</td></tr><tr><td>round(v numeric, s int)</td><td>numeric</td><td>圆整为s位小数数字</td><td>round(42.438,2)</td><td>42.44</td></tr><tr><td>sign(double/numeric)</td><td></td><td>参数的符号(-1,0,+1)</td><td>sign(-8.4)</td><td>-1</td></tr><tr><td>sqrt(double/numeric)</td><td></td><td>平方根</td><td>sqrt(2.0)</td><td>1.4142135623731</td></tr><tr><td>trunc(double/numeric)</td><td></td><td>截断(向零靠近)</td><td>trunc(42.8)</td><td>42</td></tr><tr><td>trunc(v numeric, s int)</td><td>numeric</td><td>截断为s小数位置的数字</td><td>trunc(42.438,2)</td><td>42.43</td></tr></tbody></table><h3 id="_1-1-1-三角函数列表" tabindex="-1"><a class="header-anchor" href="#_1-1-1-三角函数列表"><span>1.1.1 三角函数列表</span></a></h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>acos(x)</td><td>反余弦</td></tr><tr><td>asin(x)</td><td>反正弦</td></tr><tr><td>atan(x)</td><td>反正切</td></tr><tr><td>atan2(x, y)</td><td>正切 y/x 的反函数</td></tr><tr><td>cos(x)</td><td>余弦</td></tr><tr><td>cot(x)</td><td>余切</td></tr><tr><td>sin(x)</td><td>正弦</td></tr><tr><td>tan(x)</td><td>正切</td></tr></tbody></table><hr><h2 id="_1-2-字符串函数和操作符" tabindex="-1"><a class="header-anchor" href="#_1-2-字符串函数和操作符"><span>1.2 字符串函数和操作符</span></a></h2><p>下面是 PostgreSQL 中提供的字符串操作符列表：</p><table><thead><tr><th>函数</th><th>返回类型</th><th>描述</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>string 丨丨 string</td><td>text</td><td>字串连接</td><td>&#39;Post&#39; 丨丨 &#39;greSQL&#39;</td><td>PostgreSQL</td></tr><tr><td>bit_length(string)</td><td>int</td><td>字串里二进制位的个数</td><td>bit_length(&#39;jose&#39;)</td><td>32</td></tr><tr><td>char_length(string)</td><td>int</td><td>字串中的字符个数</td><td>char_length(&#39;jose&#39;)</td><td>4</td></tr><tr><td>convert(string using conversion_name)</td><td>text</td><td>使用指定的转换名字改变编码。</td><td>convert(&#39;PostgreSQL&#39; using iso_8859_1_to_utf8)</td><td>&#39;PostgreSQL&#39;</td></tr><tr><td>lower(string)</td><td>text</td><td>把字串转化为小写</td><td>lower(&#39;TOM&#39;)</td><td>tom</td></tr><tr><td>octet_length(string)</td><td>int</td><td>字串中的字节数</td><td>octet_length(&#39;jose&#39;)</td><td>4</td></tr><tr><td>overlay(string placing string from int [for int])</td><td>text</td><td>替换子字串</td><td>overlay(&#39;Txxxxas&#39; placing &#39;hom&#39; from 2 for 4)</td><td>Thomas</td></tr><tr><td>position(substring in string)</td><td>int</td><td>指定的子字串的位置</td><td>position(&#39;om&#39; in &#39;Thomas&#39;)</td><td>3</td></tr><tr><td>substring(string [from int] [for int])</td><td>text</td><td>抽取子字串</td><td>substring(&#39;Thomas&#39; from 2 for 3)</td><td>hom</td></tr><tr><td>substring(string from pattern)</td><td>text</td><td>抽取匹配 POSIX 正则表达式的子字串</td><td>substring(&#39;Thomas&#39; from &#39;…$&#39;)</td><td>mas</td></tr><tr><td>substring(string from pattern for escape)</td><td>text</td><td>抽取匹配SQL正则表达式的子字串</td><td>substring(&#39;Thomas&#39; from &#39;%#&quot;o_a#&quot;_&#39; for &#39;#&#39;)</td><td>oma</td></tr><tr><td>trim([leading丨trailing 丨 both] [characters] from string)</td><td>text</td><td>从字串string的开头/结尾/两边/ 删除只包含characters(默认是一个空白)的最长的字串</td><td>trim(both &#39;x&#39; from &#39;xTomxx&#39;)</td><td>Tom</td></tr><tr><td>upper(string)</td><td>text</td><td>把字串转化为大写。</td><td>upper(&#39;tom&#39;)</td><td>TOM</td></tr><tr><td>ascii(text)</td><td>int</td><td>参数第一个字符的ASCII码</td><td>ascii(&#39;x&#39;)</td><td>120</td></tr><tr><td>btrim(string text [, characters text])</td><td>text</td><td>从string开头和结尾删除只包含在characters里(默认是空白)的字符的最长字串</td><td>btrim(&#39;xyxtrimyyx&#39;,&#39;xy&#39;)</td><td>trim</td></tr><tr><td>chr(int)</td><td>text</td><td>给出ASCII码的字符</td><td>chr(65)</td><td>A</td></tr><tr><td>convert(string text, [src_encoding name,] dest_encoding name)</td><td>text</td><td>把字串转换为dest_encoding</td><td>convert( &#39;text_in_utf8&#39;, &#39;UTF8&#39;, &#39;LATIN1&#39;)</td><td>以ISO 8859-1编码表示的text_in_utf8</td></tr><tr><td>initcap(text)</td><td>text</td><td>把每个单词的第一个子母转为大写，其它的保留小写。单词是一系列字母数字组成的字符，用非字母数字分隔。</td><td>initcap(&#39;hi thomas&#39;)</td><td>Hi Thomas</td></tr><tr><td>length(string text)</td><td>int</td><td>string中字符的数目</td><td>length(&#39;jose&#39;)</td><td>4</td></tr><tr><td>lpad(string text, length int [, fill text])</td><td>text</td><td>通过填充字符fill(默认为空白)，把string填充为长度length。 如果string已经比length长则将其截断(在右边)。</td><td>lpad(&#39;hi&#39;, 5, &#39;xy&#39;)</td><td>xyxhi</td></tr><tr><td>ltrim(string text [, characters text])</td><td>text</td><td>从字串string的开头删除只包含characters(默认是一个空白)的最长的字串。</td><td>ltrim(&#39;zzzytrim&#39;,&#39;xyz&#39;)</td><td>trim</td></tr><tr><td>md5(string text)</td><td>text</td><td>计算给出string的MD5散列，以十六进制返回结果。</td><td>md5(&#39;abc&#39;)</td><td></td></tr><tr><td>repeat(string text, number int)</td><td>text</td><td>重复string number次。</td><td>repeat(&#39;Pg&#39;, 4)</td><td>PgPgPgPg</td></tr><tr><td>replace(string text, from text, to text)</td><td>text</td><td>把字串string里出现地所有子字串from替换成子字串to。</td><td>replace(&#39;abcdefabcdef&#39;, &#39;cd&#39;, &#39;XX&#39;)</td><td>abXXefabXXef</td></tr><tr><td>rpad(string text, length int [, fill text])</td><td>text</td><td>通过填充字符fill(默认为空白)，把string填充为长度length。如果string已经比length长则将其截断。</td><td>rpad(&#39;hi&#39;, 5, &#39;xy&#39;)</td><td>hixyx</td></tr><tr><td>rtrim(string text [, character text])</td><td>text</td><td>从字串string的结尾删除只包含character(默认是个空白)的最长的字</td><td>rtrim(&#39;trimxxxx&#39;,&#39;x&#39;)</td><td>trim</td></tr><tr><td>split_part(string text, delimiter text, field int)</td><td>text</td><td>根据delimiter分隔string返回生成的第field个子字串(1 Base)。</td><td>split_part(&#39;abc<sub>@</sub>def<sub>@</sub>ghi&#39;, &#39;<sub>@</sub>&#39;, 2)</td><td>def</td></tr><tr><td>strpos(string, substring)</td><td>text</td><td>声明的子字串的位置。</td><td>strpos(&#39;high&#39;,&#39;ig&#39;)</td><td>2</td></tr><tr><td>substr(string, from [, count])</td><td>text</td><td>抽取子字串。</td><td>substr(&#39;alphabet&#39;, 3, 2)</td><td>ph</td></tr><tr><td>to_ascii(text [, encoding])</td><td>text</td><td>把text从其它编码转换为ASCII。</td><td>to_ascii(&#39;Karel&#39;)</td><td>Karel</td></tr><tr><td>to_hex(number int/bigint)</td><td>text</td><td>把number转换成其对应地十六进制表现形式。</td><td>to_hex(9223372036854775807)</td><td>7fffffffffffffff</td></tr><tr><td>translate(string text, from text, to text)</td><td>text</td><td>把在string中包含的任何匹配from中的字符的字符转化为对应的在to中的字符。</td><td>translate(&#39;12345&#39;, &#39;14&#39;, &#39;ax&#39;)</td><td>a23x5</td></tr></tbody></table><hr><h2 id="_1-3-类型转换相关函数" tabindex="-1"><a class="header-anchor" href="#_1-3-类型转换相关函数"><span>1.3 类型转换相关函数</span></a></h2><table><thead><tr><th>函数</th><th>返回类型</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>to_char(timestamp, text)</td><td>text</td><td>将时间戳转换为字符串</td><td>to_char(current_timestamp, &#39;HH12:MI:SS&#39;)</td></tr><tr><td>to_char(interval, text)</td><td>text</td><td>将时间间隔转换为字符串</td><td>to_char(interval &#39;15h 2m 12s&#39;, &#39;HH24:MI:SS&#39;)</td></tr><tr><td>to_char(int, text)</td><td>text</td><td>整型转换为字符串</td><td>to_char(125, &#39;999&#39;)</td></tr><tr><td>to_char(double precision, text)</td><td>text</td><td>双精度转换为字符串</td><td>to_char(125.8::real, &#39;999D9&#39;)</td></tr><tr><td>to_char(numeric, text)</td><td>text</td><td>数字转换为字符串</td><td>to_char(-125.8, &#39;999D99S&#39;)</td></tr><tr><td>to_date(text, text)</td><td>date</td><td>字符串转换为日期</td><td>to_date(&#39;05 Dec 2000&#39;, &#39;DD Mon YYYY&#39;)</td></tr><tr><td>to_number(text, text)</td><td>numeric</td><td>转换字符串为数字</td><td>to_number(&#39;12,454.8-&#39;, &#39;99G999D9S&#39;)</td></tr><tr><td>to_timestamp(text, text)</td><td>timestamp</td><td>转换为指定的时间格式 time zone convert string to time stamp</td><td>to_timestamp(&#39;05 Dec 2000&#39;, &#39;DD Mon YYYY&#39;)</td></tr><tr><td>to_timestamp(double precision)</td><td>timestamp</td><td>把UNIX纪元转换成时间戳</td><td>to_timestamp(1284352323)</td></tr></tbody></table>',16)]))}const h=d(n,[["render",o]]),l=JSON.parse('{"path":"/PostgreSQL/aec51n0w/","title":"PostgreSQL常用函数","lang":"zh-CN","frontmatter":{"title":"PostgreSQL常用函数","createTime":"2025/08/26 15:13:11","permalink":"/PostgreSQL/aec51n0w/"},"readingTime":{"minutes":5.52,"words":1657},"git":{"createdTime":1756736713000},"filePathRelative":"notes/PostgreSQL/PostgreSQL常用函数.md","headers":[]}');export{h as comp,l as data};

import{a as s,c as a,b as n,o as l}from"./app-ZQgO6-gU.js";const e={};function t(p,i){return l(),a("div",null,i[0]||(i[0]=[n(`<figure><img src="https://i.loli.net/2020/10/25/pRsncV7AJKI4CFG.png" alt="decorator-title" tabindex="0" loading="lazy"><figcaption>decorator-title</figcaption></figure><h2 id="题外话" tabindex="-1"><a class="header-anchor" href="#题外话"><span>题外话</span></a></h2><p>一直都有看到“包装者模式“ 出现在一些文章，甚至书中。它们被应用在装饰者模式和适配器模式中，这个原因笔者猜测源自 GOF 最早在书中给模式命名的时候提到了这两个模式的别名 wrapper同时还有适配器也被成为 wrapper, 所以有人将这几个名称混来混去。后来 GOF 在结尾讲书的简史的时候有提到一些模式的名称变化，其中 glue 改成了 facade， wrapper 改为 decorator ，walker 变成了 visitor 。</p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>前阵子出于自己学习使用的原因开发了一个 chrome extension ，这样我的 chrome 变得比以前更强了，我赋予了它一个可以保存某个页面的某个片段的位置，后续通过点击这个记录可以快速的回到并高亮当时浏览的记录。</p><figure><img src="https://i.loli.net/2020/10/24/hb75jWUIlHGdmu1.png" alt="memo1" tabindex="0" loading="lazy"><figcaption>memo1</figcaption></figure><figure><img src="https://i.loli.net/2020/10/24/HamO9V56Y3bMKJP.png" alt="memo" tabindex="0" loading="lazy"><figcaption>memo</figcaption></figure><p><strong>我给 chrome 简单的装饰了一下（加了一个插件），它就变强了</strong></p><p><code>插件开源，可以作为基础进行二次开发，想要开发 chrome 插件但是不知道如何开始的可以参考。关注</code><strong>星尘的一个朋友</strong><code>公众号，回复源码获取</code></p><h2 id="不知不觉你已经知道了装饰者的概念。" tabindex="-1"><a class="header-anchor" href="#不知不觉你已经知道了装饰者的概念。"><span>不知不觉你已经知道了装饰者的概念。</span></a></h2><blockquote><p>动态地给一个对象添加一些额外的职责</p></blockquote><figure><img src="https://i.loli.net/2020/10/24/j7fU3RozypgGWAN.png" alt="chrome" tabindex="0" loading="lazy"><figcaption>chrome</figcaption></figure><figure><img src="https://i.loli.net/2020/10/24/EqQbkpzTeP6n5t3.png" alt="chrome" tabindex="0" loading="lazy"><figcaption>chrome</figcaption></figure><p>上面两个举出的例子在实际过程中只要你想，你可以无限的装饰它，所以装饰者的类，可以一直嵌套下去。就像</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        InputStream</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> in</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> DataInputStream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> FileInputStream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> File</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">filePath</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果IO不熟，看得不理解，那再看看这个</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ArrayList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        list </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Collections</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">synchronizedList</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>其实，当我写到这里的时候已经很清楚装饰者的概念了，它就是通过“套娃”变强了😂！</p><p>让我继续深入看看它的结构图👀。</p><h2 id="装饰者模式类图-📌" tabindex="-1"><a class="header-anchor" href="#装饰者模式类图-📌"><span>装饰者模式类图 📌</span></a></h2><figure><img src="https://i.loli.net/2020/10/25/L2a951Jf7cIspGK.png" alt="装饰者模式类图" tabindex="0" loading="lazy"><figcaption>装饰者模式类图</figcaption></figure><p>一个浏览器的接口，一个 Chrome 实现类，一个 ChromeExtension 插件的实现类（用以装饰 Chrome），扩展中的构造函数为 浏览器类型，在插件类中会对浏览器 Brower 的 browse 方法进行一层装饰（增强，或减弱），在不改变对象的情况下，对对象行为进行动态的改变。</p><p>上面的类图在抽象一层的话就变成了了这个样子</p><figure><img src="https://i.loli.net/2020/10/24/iJMe7mblkcOGTV2.png" alt="装饰者模式类图" tabindex="0" loading="lazy"><figcaption>装饰者模式类图</figcaption></figure><blockquote><p>为了示意，名称使用了中文，当然如果能够让人清楚你在干什么，无所谓你怎么表达。</p></blockquote><p>通过对象的组合来实现类的增强要比继承更加的灵活。这也是软件设计原则中的组合复用原则的一种体现，优先使用组合，然后考虑继承。</p><h2 id="代码-📄" tabindex="-1"><a class="header-anchor" href="#代码-📄"><span>代码 📄</span></a></h2><blockquote><p>关注公众号：星尘的一个朋友 回复：<code>源码</code>，获取全部代码和类图</p></blockquote><figure><img src="https://i.loli.net/2020/10/25/qsjOMU9HLpcnlzP.png" alt="decorator-code" tabindex="0" loading="lazy"><figcaption>decorator-code</figcaption></figure><p>代码演示通过一个游戏获取道具的方式来理解装饰者模式的具体实现；</p><p>想来想去，我没有选择超级玛丽，图难找，代码不好表达🤣</p><p>所以我选择了它 <strong>Tank Battle</strong> <img src="https://i.loli.net/2020/10/24/KED9OZhFk7WGtbl.jpg" alt="tank" loading="lazy">😂</p><p><code>很多回忆都在这里</code>而且好表达😁</p><p>在这游戏中，我们吃到一个星星⭐的时候，就会变强，可以发射两发子弹，同时样子也会发生改变。</p><p><img src="https://i.loli.net/2020/10/25/hfzJVmHCj6sNIEq.png" alt="image-20201025111349260" loading="lazy"> 吃了这个星（装饰），我变得更强 <img src="https://i.loli.net/2020/10/24/uQvdNDEV7JmLBCZ.gif" alt="p1tankU" loading="lazy"> ==&gt;&gt; <img src="https://i.loli.net/2020/10/24/QvIyB28tdxSjnrK.gif" alt="star" loading="lazy"> ==&gt;&gt; <img src="https://i.loli.net/2020/10/25/ANrTSZUghK5lcot.gif" alt="enemy3U" loading="lazy"></p><h3 id="结构组成" tabindex="-1"><a class="header-anchor" href="#结构组成"><span>结构组成</span></a></h3><ol><li>被装饰者接口</li><li>具体的装饰者类</li><li>抽象装饰者</li><li>具体的装饰者</li></ol><p>因为星星强化一共有 3 个级别</p><ul><li>移动、子弹加速</li><li>连发</li><li>打掉白色方块</li></ul><p>所以我们应该有 3 个装饰者。类角色。</p><ol><li>被装饰者接口 -&gt; 坦克 Tank</li><li>具体的被装饰者 -&gt; 玩家坦克 PlayerTank</li><li>抽象装饰者 -&gt; 用来抽象定义装饰者基本信息，如构造函数等 TankDecorator</li><li>具体的装饰者 -&gt; OneStarTankDecorator -&gt; TwoStarTankDecorator -&gt; ThreeStarTankDecorator</li></ol><figure><img src="https://i.loli.net/2020/10/25/LySXmYe7CJov9wx.png" alt="decorator" tabindex="0" loading="lazy"><figcaption>decorator</figcaption></figure><p><strong>部分代码</strong></p><blockquote><p>关注公众号：<code>星尘的一个朋友</code> 回复：<code>源码</code>，<strong>获取全部代码和类图</strong></p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 玩家坦克</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@author</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> lvgorice@gmail.com</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * @date 2020/10/25 11:40</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@since</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 1.0.0</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> PlayerTank</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Tank</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * 玩家默认坦克数据，移动，设计速度 1</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> PlayerTank</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        super</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * 定义坦克抽象装饰者</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@author</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> lvgorice@gmail.com</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * @date 2020/10/25 11:40</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> * </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">@since</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 1.0.0</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> */</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> abstract</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TankDecorator</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Tank</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    protected</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Tank</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> tank</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TankDecorator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Tank </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">tank</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">        this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">tank</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> tank</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    protected</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> move</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        tank</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">move</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    protected</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fire</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        tank</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fire</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果</p><figure><img src="https://i.loli.net/2020/10/25/FaRXJTVbftoL3sY.png" alt="image-20201025141131981" tabindex="0" loading="lazy"><figcaption>image-20201025141131981</figcaption></figure><h2 id="总结-🐱‍💻" tabindex="-1"><a class="header-anchor" href="#总结-🐱‍💻"><span>总结 🐱‍💻</span></a></h2><p>坦克增强的过程是一颗星一颗星获取的一个过程，一直在动态的增强。这个案例中只是一个维度，坦克吃星星。如果在增加一些额外的功能时，比如坦克变身，进化等等，不断的增加装饰时，就可以体会到装饰者模式组合的可扩展性。当然使用继承来实现的话，如果是单一不变的多种状况是很好的，比如说我的玩家坦克的选择不同的外观，可通过不同的子类来确定下来，但如果动态的想要增加一个类的时候，继承就显得非常的困难。</p><p>装饰者模式在不改变原对象的情况下，动态的增强具有较好的可扩展性。这也体现了<code>开闭原则</code>。但我们发现，如果你不合理的使用装饰者模式，类的数量会变的更多，且多重装饰使一个对象的维护变的更加复杂。所以，就像前面说的，具体的特性就完全可以用继承来实现而非装饰者模式，装饰者模式一定是使用在想要动态的给对象增加一些功能的时候使用。</p><ul><li>比如 JDK 中对 IO 的操作有一个 read() 操作，对它进行装饰之后就变成了 readLine(). <img src="https://i.loli.net/2020/10/25/hBN54spCA7yaqto.png" alt="image-20201025143102142" loading="lazy"><img src="https://i.loli.net/2020/10/25/thRfTdxnbvZpNEV.png" alt="image-20201025143124892" loading="lazy"><img src="https://i.loli.net/2020/10/25/abst7No5EjLGFQY.png" alt="image-20201025143158945" loading="lazy"></li><li>再比如 JDK 中的 Collections 工具类，通过对集合类的装饰，使其变得线程安全，而对象本身却没有发生改变</li></ul><figure><img src="https://i.loli.net/2020/10/25/qfHuhsSwnGMLY4F.png" alt="image-20201025143320753" tabindex="0" loading="lazy"><figcaption>image-20201025143320753</figcaption></figure><figure><img src="https://i.loli.net/2020/10/25/VXEMplcQaYkmHBy.png" alt="image-20201025143355998" tabindex="0" loading="lazy"><figcaption>image-20201025143355998</figcaption></figure><p>仅仅是对原来的方法前面都加了 <code> synchronized</code> 关键字来对原对象做了增强</p><figure><img src="https://i.loli.net/2020/10/25/MFXhDSzmRg3lAoT.png" alt="image-20201025143507646" tabindex="0" loading="lazy"><figcaption>image-20201025143507646</figcaption></figure><p>而 List 本身仍有更多的子类。Collections 工具类提供的就是对 List 对象做增强。</p><h2 id="结尾" tabindex="-1"><a class="header-anchor" href="#结尾"><span>结尾</span></a></h2><p>当我们明白了一件事物的本质之后，再去看表象会变的轻而易举。而这最关键的是要去亲自的操作它，看着再简单不过的东西，你第一次动手都会有很大的收获。这也让我想起了初中物理课本最常见的一句话 “<strong>动手动脑学物理</strong>”</p><figure><img src="https://i.loli.net/2020/10/25/TI5ECVzNZQgqi6A.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>任何情况下，看会和听懂都不是掌握。再不济语文课也学过“书读百遍其义自见”也是要动动嘴的🗣。加油！</p>`,61)]))}const k=s(e,[["render",t]]),r=JSON.parse('{"path":"/design/eh00kzpf/","title":"装饰者模式","lang":"zh-CN","frontmatter":{"title":"装饰者模式","createTime":"2025/08/27 23:10:37","permalink":"/design/eh00kzpf/"},"readingTime":{"minutes":5.89,"words":1767},"git":{"createdTime":1756736713000},"filePathRelative":"notes/design/装饰者模式.md","headers":[]}');export{k as comp,r as data};

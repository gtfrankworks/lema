import{a as d,c as a,b as r,o as s}from"./app-ZQgO6-gU.js";const e={};function n(o,t){return s(),a("div",null,t[0]||(t[0]=[r('<h2 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念"><span>基础概念</span></a></h2><p>聚合查询(Aggregation Pipeline Stages) 是将多种查询组合在一起，每一个查询阶段称为管道(pipeline)，每一个管道由若干个步骤(stage)构成。</p><p>聚合查询使用在 db.collection.aggregate() 或 db.aggregate() 这2个函数中。</p><blockquote><p>注意：<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mtext>、</mtext></mrow><annotation encoding="application/x-tex">out、</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord cjk_fallback">、</span></span></span></span>merge、$geoNear 这3个步骤只能出现1次，其他步骤函数可以出现使用多次。</p></blockquote><h2 id="步骤详情" tabindex="-1"><a class="header-anchor" href="#步骤详情"><span>步骤详情</span></a></h2><table><thead><tr><th>语法</th><th>解释</th></tr></thead><tbody><tr><td>$addFields</td><td>想元素添加字段属性值，同$set</td></tr><tr><td>$bucket</td><td>根据表达式和bucket边界将文档分类为组</td></tr><tr><td>$bucketAuto</td><td>根据表达式和自动确定的bucket边界将文档分类为组</td></tr><tr><td>$collStats</td><td>返回集合或视图的统计信息</td></tr><tr><td>$count</td><td>返回文档数量</td></tr><tr><td>$facet</td><td>在某个管道阶段允许创建多个子聚合管道查询</td></tr><tr><td>$geoNear</td><td>根据地理空间接近程度返回有序的文档流，文档中包含一个附加的距离字段</td></tr><tr><td>$graphLookup</td><td>向集合执行递归搜索，并向返回文档中添加一个新的数字字段，包含递归遍历结果</td></tr><tr><td>$group</td><td>将输出文档字段属性进行重新归类整理</td></tr><tr><td>$indexStats</td><td>返回集合使用的每个索引的统计信息</td></tr><tr><td>$limit</td><td>限定输出文档数量</td></tr><tr><td>$listSessions</td><td>当前会话中的Sessions列表</td></tr><tr><td>$lookup</td><td>对同一分片下的多个集合进行关联查询</td></tr><tr><td>$match</td><td>过滤文档流</td></tr><tr><td>$merge</td><td>将聚合管道的结果文档写入集合，必须是聚合查询管道中的最后一个阶段</td></tr><tr><td>$out</td><td>将聚合管道的结果文档写入结合，必须是聚合查询管道中的最后一个阶段</td></tr><tr><td>$planCacheStats</td><td>返回集合的计划缓存信息</td></tr><tr><td>$project</td><td>有选择性的重置输出文档中的各个字段属性，同$unset</td></tr><tr><td>$redact</td><td>通过文档本身的信息来限制输出文档的内容，包含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mtext>和</mtext></mrow><annotation encoding="application/x-tex">project和</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">ro</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal">ec</span><span class="mord mathnormal">t</span><span class="mord cjk_fallback">和</span></span></span></span>match功能</td></tr><tr><td>$replaceRoot</td><td>用指定的嵌入文档替换文档，同$replaceWith</td></tr><tr><td>$replaceWith</td><td>用指定的潜入文档替换文档，同$replaceRoot</td></tr><tr><td>$sample</td><td>从输入中随机选择指定数量的文档</td></tr><tr><td>$set</td><td>修改或新增字段，同$addFields</td></tr><tr><td>$skip</td><td>跳过前n个文档</td></tr><tr><td>$sort</td><td>按指定方式(升序或降序)进行重新排序</td></tr><tr><td>$sortByCount</td><td>根据指定表达式的值进行文档分组，并计算不同文档组中的数量</td></tr><tr><td>$unset</td><td>删除或排除某字段，同$project</td></tr><tr><td>$unwind</td><td>解构输入文档中的数组，将数组中每个元素解构为若干个字段</td></tr></tbody></table><h2 id="修饰详情" tabindex="-1"><a class="header-anchor" href="#修饰详情"><span>修饰详情</span></a></h2><p>修饰表达运算符可用户聚合查询管道阶段中，即每个步骤中。可以将修饰表达运算符理解成接受参数的函数。</p><p>根据不同的功能，可以将修饰表达运算符分为以下几类：</p><table><thead><tr><th>类型</th><th>解释</th></tr></thead><tbody><tr><td>算术运算修饰符</td><td>对数字进行不用方式的运算，例如取绝对值、平方等</td></tr><tr><td>数组运算修饰符</td><td>对数组进行不同方式的运算，例如判断是否为数组、数组内执行map运算等</td></tr><tr><td>布尔值运算修饰符</td><td>对布尔值进行不同方式的运算，例如取反运算 $not</td></tr><tr><td>比较运算修饰符</td><td>对属性值进行不同方式的比较运算，例如判断是否大于、小于等</td></tr><tr><td>条件运算修饰符</td><td>对属性值进行不同方式的条件运算，例如判断是否为null</td></tr><tr><td>日期运算修饰符</td><td>对日期进行不同方式的运算，例如转化时间格式</td></tr><tr><td>字面运算修饰符</td><td>对属性值进行字面返回，而不进行解析，目前只有$literal一个运算修饰符</td></tr><tr><td>Object运算修饰符</td><td>对Object对象进行不同方式的运算，例如将多个object合并为一个object</td></tr><tr><td>Set运算修饰符</td><td>对Set步骤进行不同方式的修饰运算</td></tr><tr><td>字符串运算修饰符</td><td>对String进行不同方式的运算</td></tr><tr><td>文本搜索运算修饰符</td><td>对文本搜索元数据进行修饰符运算，目前只有$meta一个运算修饰符</td></tr><tr><td>三角形运算修饰符</td><td>对三角形进行不同方式的运算，例如求cos等</td></tr><tr><td>类型转换修饰符</td><td>对类型进行不同方式的运算，例如将属性值转化为布尔值类型</td></tr><tr><td>$group运算修饰符</td><td>在$group中进行不同方式的运算</td></tr><tr><td>对非$group运算修饰符</td><td>对于非$group的其他步骤中进行不同方式的运算</td></tr><tr><td>声明变量运算修饰符</td><td>定义在子表达式内使用的变量，目前只有$let一个运算修饰符</td></tr></tbody></table>',10)]))}const p=d(e,[["render",n]]),l=JSON.parse('{"path":"/nosqldb/mongodb/p418al5x/","title":"MongoDB聚合查询","lang":"zh-CN","frontmatter":{"title":"MongoDB聚合查询","createTime":"2025/08/25 13:58:50","permalink":"/nosqldb/mongodb/p418al5x/"},"readingTime":{"minutes":3.88,"words":1165},"git":{"createdTime":1756736713000},"filePathRelative":"notes/nosqldb/mongodb/MongoDB聚合查询.md","headers":[]}');export{p as comp,l as data};

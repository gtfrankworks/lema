import{a as r,c as n,b as s,o}from"./app-ZQgO6-gU.js";const e={};function d(g,t){return o(),n("div",null,t[0]||(t[0]=[s('<h2 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述"><span>一、概述</span></a></h2><p>SpringMVC（Spring Web MVC）是 <strong>Spring 框架的重要组成部分</strong>，是一个基于 <strong>MVC（Model-View-Controller）设计模式</strong> 的 Web 层框架。 它为 Web 应用程序提供了清晰的分层结构，通过 <strong>前端控制器（DispatcherServlet）</strong> 统一分发请求，使开发者能够更专注于业务逻辑。</p><hr><h2 id="二、核心架构" tabindex="-1"><a class="header-anchor" href="#二、核心架构"><span>二、核心架构</span></a></h2><p>SpringMVC 采用典型的 <strong>前端控制器模式</strong>，所有请求首先由 <code>DispatcherServlet</code> 统一接收，再转发给相应的处理器进行处理。</p><p><strong>处理流程简述</strong>：</p><ol><li><strong>请求接收</strong>：用户请求进入 DispatcherServlet。</li><li><strong>映射查找</strong>：HandlerMapping 根据请求 URL 寻找对应的处理器（Controller）。</li><li><strong>适配调用</strong>：HandlerAdapter 调用处理器方法。</li><li><strong>结果封装</strong>：处理器返回 ModelAndView（模型数据 + 逻辑视图）。</li><li><strong>视图解析</strong>：ViewResolver 将逻辑视图解析为具体视图。</li><li><strong>结果响应</strong>：视图渲染后返回给客户端。</li></ol><hr><h2 id="三、核心组件" tabindex="-1"><a class="header-anchor" href="#三、核心组件"><span>三、核心组件</span></a></h2><ul><li><strong>DispatcherServlet（前端控制器）</strong> 请求统一入口，负责协调各组件，进行请求分发与结果返回。</li><li><strong>HandlerMapping（处理器映射器）</strong> 根据 URL、请求方式等信息，找到对应的 Controller。</li><li><strong>Controller（控制器）</strong> 接收请求，调用业务逻辑，返回处理结果。</li><li><strong>HandlerAdapter（处理器适配器）</strong> 负责执行不同类型的处理器。</li><li><strong>ModelAndView（模型和视图）</strong> 封装业务数据和视图信息。</li><li><strong>ViewResolver（视图解析器）</strong> 将逻辑视图解析为具体的物理视图（如 JSP、Thymeleaf、JSON）。</li><li><strong>View（视图）</strong> 负责最终结果的展示。</li></ul><hr><h2 id="四、主要特性" tabindex="-1"><a class="header-anchor" href="#四、主要特性"><span>四、主要特性</span></a></h2><ol><li><strong>与 Spring 深度集成</strong>：共享 Spring 容器，支持 IoC 和 AOP。</li><li><strong>轻量级</strong>：配置简洁，易于使用。</li><li><strong>RESTful 风格支持</strong>：自然支持 REST API 设计。</li><li><strong>数据绑定与校验</strong>：自动将请求参数绑定到对象，支持 JSR-303 校验。</li><li><strong>国际化支持</strong>：内置国际化资源处理。</li><li><strong>统一异常处理</strong>：支持全局异常管理。</li><li><strong>拦截器机制</strong>：提供请求前后扩展点。</li><li><strong>灵活视图支持</strong>：不仅支持 JSP，还支持 FreeMarker、Thymeleaf 及 JSON、XML 输出。</li></ol><hr><h2 id="五、适用场景" tabindex="-1"><a class="header-anchor" href="#五、适用场景"><span>五、适用场景</span></a></h2><ul><li><strong>传统 Web 应用</strong>：结合 JSP、Thymeleaf 渲染动态页面。</li><li><strong>前后端分离架构</strong>：作为后端服务，向前端框架（Vue、React、Angular）提供 JSON 数据。</li><li><strong>RESTful API 服务</strong>：用于移动端或微服务接口开发。</li></ul><hr><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结"><span>六、总结</span></a></h2><p>SpringMVC 是一个 <strong>基于 MVC 模式的 Web 框架</strong>，它通过 DispatcherServlet 统一管理请求流转，结合灵活的组件机制，为 Web 开发提供了高效、可扩展的解决方案。它既能满足传统的页面渲染需求，也能作为 REST API 框架，为现代前后端分离架构提供支持。</p><h1 id="七、springmvc-技术对比" tabindex="-1"><a class="header-anchor" href="#七、springmvc-技术对比"><span>七、SpringMVC 技术对比</span></a></h1><table><thead><tr><th>对比项</th><th><strong>SpringMVC</strong></th><th><strong>Struts2</strong></th><th><strong>Spring WebFlux</strong></th></tr></thead><tbody><tr><td><strong>框架定位</strong></td><td>基于 Spring 的 Web MVC 框架</td><td>早期流行的 MVC Web 框架（独立于 Spring）</td><td>响应式 Web 框架（Spring5 引入）</td></tr><tr><td><strong>底层架构模式</strong></td><td>前端控制器模式（DispatcherServlet）</td><td>拦截器 + 动作类（Filter + Action）</td><td>反应式流（Reactive Streams，基于 Reactor）</td></tr><tr><td><strong>开发模式</strong></td><td>注解驱动（@Controller、@RequestMapping）</td><td>配置驱动（XML + Action 配置），后期支持注解</td><td>完全基于函数式编程或响应式注解</td></tr><tr><td><strong>请求处理</strong></td><td>单例 Controller，方法级别处理请求</td><td>每次请求都会创建 Action 实例（性能较低）</td><td>异步非阻塞，事件驱动模型</td></tr><tr><td><strong>视图支持</strong></td><td>支持 JSP、Thymeleaf、Freemarker、JSON、XML 等</td><td>主要支持 JSP、Freemarker 等</td><td>主要返回 JSON / 响应流，适合 API 开发</td></tr><tr><td><strong>参数绑定</strong></td><td>自动绑定请求参数到对象</td><td>依赖 OGNL 表达式，性能一般</td><td>支持响应式数据绑定</td></tr><tr><td><strong>性能表现</strong></td><td>高效，适合传统 Web 和 REST API</td><td>较笨重，性能相对落后</td><td>高并发下表现优异，适合微服务</td></tr><tr><td><strong>RESTful 支持</strong></td><td>原生支持（@RestController、@GetMapping 等）</td><td>支持不友好，需要额外配置</td><td>天生支持响应式 REST API</td></tr><tr><td><strong>学习成本</strong></td><td>中等（依赖 Spring 生态）</td><td>较高，配置繁琐</td><td>较高，需要掌握响应式编程思想</td></tr><tr><td><strong>应用场景</strong></td><td>传统 Web 应用、REST API、前后端分离架构</td><td>传统 Web 应用（现在使用较少）</td><td>高并发场景、实时数据推送、微服务接口</td></tr><tr><td><strong>生态整合</strong></td><td>与 Spring 完美整合，支持 IoC/AOP</td><td>与 Spring 结合不紧密</td><td>与 Spring 5、Spring Boot 深度整合</td></tr><tr><td><strong>发展现状</strong></td><td>主流，广泛使用</td><td>已逐渐淘汰</td><td>新兴，适合高并发响应式架构</td></tr></tbody></table><hr><h2 id="🔎-总结" tabindex="-1"><a class="header-anchor" href="#🔎-总结"><span>🔎 总结</span></a></h2><ul><li><strong>SpringMVC</strong>：当前最主流的 Web 框架，适合 <strong>传统企业应用 + REST API</strong>。</li><li><strong>Struts2</strong>：早期流行，但 <strong>已逐渐被淘汰</strong>，主要存在于老系统维护。</li><li><strong>Spring WebFlux</strong>：面向未来的响应式框架，适合 <strong>高并发、实时通信、微服务架构</strong>。</li></ul>',24)]))}const l=r(e,[["render",d]]),a=JSON.parse('{"path":"/framework/springmvc/","title":"SpringMVC的介绍","lang":"zh-CN","frontmatter":{"title":"SpringMVC的介绍","createTime":"2025/08/27 13:30:11","permalink":"/framework/springmvc/"},"readingTime":{"minutes":3.95,"words":1185},"git":{"createdTime":1756736713000},"filePathRelative":"notes/framework/springmvc/README.md","headers":[]}');export{l as comp,a as data};

import{a as n,c as a,b as i,o as e}from"./app-ZQgO6-gU.js";const l={};function t(p,s){return e(),a("div",null,s[0]||(s[0]=[i(`<blockquote><p>在 Kotlin 中想要使 <code>@Table</code> 等注解生效十分简单。只需要使用 KAPT 即可。 如果您正在使用 SpringBoot + Kotlin 的开发方式，请将 kapt 的版本保持与 kotlin(&quot;jvm&quot;) / kotlin(&quot;plugin.spring&quot;) 一致</p></blockquote><h2 id="在-gradle-中使用" tabindex="-1"><a class="header-anchor" href="#在-gradle-中使用"><span>在 Gradle 中使用</span></a></h2><p>1、应用 Gradle 插件：<code>kotlin-kapt</code></p><p><strong>【Kotlin】</strong></p><p>kotlin</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>plugins {</span></span>
<span class="line"><span>    // 如果正在使用 SpringBoot，请保持 kapt 插件版本与 Spring 插件、kotlin JVM 插件一致</span></span>
<span class="line"><span>    // 如你的插件版本是（如果项目是使用 Spring Initializr 生成的话，是会自带下面两个插件）： </span></span>
<span class="line"><span>    // kotlin(&quot;jvm&quot;) version &quot;1.9.20&quot; &lt;- 注意版本</span></span>
<span class="line"><span>    // kotlin(&quot;plugin.spring&quot;) version &quot;1.9.20&quot; &lt;- 注意版本</span></span>
<span class="line"><span>    // 那么你的 kapt 版本也需要与其一致，否则将会改变项目使用的 Kotlin 版本，可能会引发兼容性问题</span></span>
<span class="line"><span>    kotlin(&quot;kapt&quot;) version &quot;1.9.20&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【Groovy】</strong></p><p>groovy</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>plugins {</span></span>
<span class="line"><span>    id &#39;org.jetbrains.kotlin.kapt&#39; version &#39;1.9.20&#39;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在 dependencies 块中使用 kapt 配置添加相应的依赖项</p><p><strong>【Kotlin】</strong></p><p>kotlin</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>dependencies {</span></span>
<span class="line"><span>    kapt(&quot;com.mybatis-flex:mybatis-flex-processor:1.5.6&quot;)</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【Groovy】</strong></p><p>groovy</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>dependencies {</span></span>
<span class="line"><span>    kapt &#39;com.mybatis-flex:mybatis-flex-processor:1.5.6&#39;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在-maven-中使用" tabindex="-1"><a class="header-anchor" href="#在-maven-中使用"><span>在 Maven 中使用</span></a></h2><p>1、 将以下kapt配置插入指定位置。</p><p>xml</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>&lt;execution&gt;</span></span>
<span class="line"><span>    &lt;id&gt;kapt&lt;/id&gt;</span></span>
<span class="line"><span>    &lt;goals&gt;</span></span>
<span class="line"><span>        &lt;goal&gt;kapt&lt;/goal&gt;</span></span>
<span class="line"><span>    &lt;/goals&gt;</span></span>
<span class="line"><span>    &lt;configuration&gt;</span></span>
<span class="line"><span>        &lt;annotationProcessorPaths&gt;</span></span>
<span class="line"><span>            &lt;path&gt;</span></span>
<span class="line"><span>                &lt;groupId&gt;com.mybatis-flex&lt;/groupId&gt;</span></span>
<span class="line"><span>                &lt;artifactId&gt;mybatis-flex-processor&lt;/artifactId&gt;</span></span>
<span class="line"><span>                &lt;version&gt;1.5.6&lt;/version&gt;</span></span>
<span class="line"><span>            &lt;/path&gt;</span></span>
<span class="line"><span>        &lt;/annotationProcessorPaths&gt;</span></span>
<span class="line"><span>    &lt;/configuration&gt;</span></span>
<span class="line"><span>&lt;/execution&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你需要使 KAPT 在 compile 前工作，将其插入到 <code>kotlin-maven-plugin</code> 中的 compile 前，然后将 compile 的时机改为 <code>process-sources</code></p><p>xml</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>&lt;plugin&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;\${kotlin.version}&lt;/version&gt;</span></span>
<span class="line"><span>    &lt;executions&gt;</span></span>
<span class="line"><span>        &lt;!--上述代码需插入到此处，compile前--&gt;</span></span>
<span class="line"><span>        &lt;execution&gt;</span></span>
<span class="line"><span>            &lt;id&gt;compile&lt;/id&gt;</span></span>
<span class="line"><span>            &lt;!--将此处的phase改为process-sources--&gt;</span></span>
<span class="line"><span>            &lt;phase&gt;process-sources&lt;/phase&gt;</span></span>
<span class="line"><span>            &lt;goals&gt;</span></span>
<span class="line"><span>                &lt;goal&gt;compile&lt;/goal&gt;</span></span>
<span class="line"><span>            &lt;/goals&gt;</span></span>
<span class="line"><span>        &lt;/execution&gt;</span></span>
<span class="line"><span>        &lt;execution&gt;</span></span>
<span class="line"><span>            &lt;id&gt;test-compile&lt;/id&gt;</span></span>
<span class="line"><span>            &lt;phase&gt;test-compile&lt;/phase&gt;</span></span>
<span class="line"><span>            &lt;goals&gt;</span></span>
<span class="line"><span>                &lt;goal&gt;test-compile&lt;/goal&gt;</span></span>
<span class="line"><span>            &lt;/goals&gt;</span></span>
<span class="line"><span>        &lt;/execution&gt;</span></span>
<span class="line"><span>    &lt;/executions&gt;</span></span>
<span class="line"><span>&lt;/plugin&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、 令 KAPT 在构建前运行</p><p>以 IDEA 举例：</p><ol><li>点击 Maven 图标</li><li>找到对应项目</li><li>点击插件</li><li>点击 kotlin</li><li>右击 kotlin:kapt，在选项中点击“<strong>构建前执行</strong>”，以让 KAPT 能够正确的生成代码。</li></ol><figure><img src="https://mybatis-flex.com/assets/kapt1.4_OzgEDX.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>关于 KAPT 更详细的说明，请看<a href="https://book.kotlincn.net/text/kapt.html" target="_blank" rel="noopener noreferrer">Kotlin官网说明</a>，或<a href="https://www.kotlincn.net/docs/reference/kapt.html" target="_blank" rel="noopener noreferrer">Kotlin语言中文站</a>。</p></blockquote>`,28)]))}const r=n(l,[["render",t]]),c=JSON.parse('{"path":"/framework/mybatisflex/ad/6f9799w8/","title":"MyBatis-Flex KAPT的配置","lang":"zh-CN","frontmatter":{"title":"MyBatis-Flex KAPT的配置","createTime":"2025/08/27 10:08:42","permalink":"/framework/mybatisflex/ad/6f9799w8/"},"readingTime":{"minutes":1.66,"words":499},"git":{"createdTime":1756736713000},"filePathRelative":"notes/framework/mybatisflex/ad/kapt.md","headers":[]}');export{r as comp,c as data};

import{a as n,c as i,b as a,o as e}from"./app-ZQgO6-gU.js";const o="/lema/images/noteImage/image-20210822180308501.png",t="/lema/images/noteImage/20210205002435988.png",r="/lema/images/noteImage/20210205003136877.png",l="/lema/images/noteImage/20210205003154682.png",p="/lema/images/noteImage/2021020500323396.png",g="/lema/images/noteImage/20210205003250782.png",h="/lema/images/noteImage/20210205003308111.png",d={};function c(k,s){return e(),i("div",null,s[0]||(s[0]=[a('<h2 id="什么是数据库事务" tabindex="-1"><a class="header-anchor" href="#什么是数据库事务"><span>什么是数据库事务？</span></a></h2><p>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。<strong>事务是逻辑上的一组操作，要么都执行，要么都不执行。</strong></p><p>事务最经典也经常被拿出来说例子就是转账了。</p><p>假如小明要给小红转账1000元，这个转账会涉及到两个关键操作就是：将小明的余额减少1000元，将小红的余额增加1000元。万一在这两个操作之间突然出现错误比如银行系统崩溃，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。</p><h2 id="事务的特性" tabindex="-1"><a class="header-anchor" href="#事务的特性"><span>事务的特性</span></a></h2><p>事务就是一组原子性的操作，这些操作要么全部发生，要么全部不发生。事务把数据库从一种一致性状态转换成另一种一致性状态。</p><ul><li>**原子性：是指事务包含所有操作要么全部成功，要么全部失败回滚。**事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做。</li><li><strong>一致性：指事务必须使数据库从一个一致性状态变换成另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</strong>。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统 运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。 拿转账来说，假设用户 A 和用户 B 两者的钱加起来一共是 5000，那么不管 A 和 B 之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是 5000，这就是事务的一致性。</li><li>**隔离性：是当多个用户并发访问数据库时，比如操作同一张表时，数据表为每个用户开启的事务，不能被其他事务所干扰，多个并发事务之间要相互隔离。**一个事务的执行不能其它事务干扰。即一个事务内部的//操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。</li><li><strong>持久性：持久性是指一个事务一旦被提交，那么对数据库中的数据的改变就是永久的，即便是在数据库系统遇到故障的性况下也不会丢失提交事务的操作</strong>。</li></ul><h2 id="事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#事务的隔离级别"><span>事务的隔离级别</span></a></h2><ul><li><strong>Serializable(串行化)：可避免脏读、不可重复读、幻读。（就是串行化读数据）</strong>。最高隔离级别，完全ACID隔离，一个个事务依次执行</li><li>**Repeatable read(可重复读)：可避免脏读、不可重复读的发生。**对同一个字段多次读取结果完全一致除非自己改，还会幻读</li><li>**Read committed(读已提交)：可避免脏读的发生。**允许读取并发事务已经提交的数据，还会幻读，不可重复读</li><li>**Read uncommitted(读未提交)：最低级别，任何情况都无法保证。**允许读取尚未提交的数据。导致脏读，幻读，不可重复读</li></ul><p><strong>在 MySQL 数据库中，支持上面四种隔离级别，默认的为 Repeatable read (可重复读)</strong>；而在 Oracle 数据库中，只支持 Serializable (串行化)级别和 Read committed (读已提交)这两种级别，其中默认的为 Read committed 级别。</p><figure><img src="'+o+'" alt="image-20210822180308501" tabindex="0" loading="lazy"><figcaption>image-20210822180308501</figcaption></figure><p><strong>事务隔离机制的实现基于锁机制和并发调度。<strong>其中并</strong>发调度使用的是MVCC（多版本并发控制）</strong>，通过保存修改的旧版本信息来支持并发一致性读和回滚等特性。</p><p>因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是READ-COMMITTED(读取提交内容):，但是你要知道的是InnoDB 存储引擎默认使用 **REPEATABLE-READ（可重读）**并不会有任何性能损失。</p><p>InnoDB 存储引擎在 分布式事务 的情况下一般会用到**SERIALIZABLE(可串行化)**隔离级别。</p><h2 id="mysql事务日志介绍下" tabindex="-1"><a class="header-anchor" href="#mysql事务日志介绍下"><span>MySQL事务日志介绍下？</span></a></h2><p><strong>innodb 事务日志包括 redo log 和 undo log。</strong></p><ul><li><strong>undo log（回滚日志）</strong>：是 Innodb 存储引擎层生成的日志，实现了事务中的<strong>原子性</strong>，主要<strong>用于事务回滚和 MVCC</strong>。</li><li><strong>redo log（重做日志）</strong>：是 Innodb 存储引擎层生成的日志，实现了事务中的<strong>持久性</strong>，主要<strong>用于掉电等故障恢复</strong>；</li></ul><p><strong>undo log 指事务开始之前，在操作任何数据之前，首先将需操作的数据备份到一个地方。redo log 指事务中操作的任何数据，将最新的数据备份到一个地方。</strong></p><p>事务日志的目的：实例或者介质失败，事务日志文件就能派上用场。</p><p><strong>redo log</strong> 不是随着事务的提交才写入的，而是<strong>在事务的执行过程中，便开始写入 redo 中</strong>。具体的落盘策略可以进行配置 。防止在发生故障的时间点，尚有脏页未写入磁盘，在重启 MySQL 服务的时候，根据 redo log 进行重做，从而达到事务的未入磁盘数据进行持久化这一特性。<strong>RedoLog 是为了实现事务的持久性而出现的产物。</strong></p><p><strong>undo log</strong>用来回滚行记录到某个版本。事务未提交之前，<strong>Undo 保存了未提交之前的版本数据</strong>，Undo 中的数据可作为数据旧版本快照供其他并发事务进行快照读。是<strong>为了实现事务的原子性而出现的产物</strong>,在 MySQL innodb 存储引擎中<strong>用来实现多版本并发控制</strong>。</p><h2 id="在事务中可以混合使用存储引擎吗" tabindex="-1"><a class="header-anchor" href="#在事务中可以混合使用存储引擎吗"><span>在事务中可以混合使用存储引擎吗?</span></a></h2><p><strong>尽量不要</strong>在同一个事务中使用多种存储引擎，<strong>MySQL服务器层不管理事务，事务是由下层的存储引擎实现的。</strong></p><p>如果在事务中混合使用了事务型和非事务型的表（例如InnoDB和MyISAM表）,在正常提交的情况下不会有什么问题。</p><p>但如果该事务需要回滚，非事务型的表上的变更就无法撤销，这会导致数据库处于不一致的状态，这种情况很难修复，事务的最终结果将无法确定。所以，为每张表选择合适的存储引擎非常重要。</p><h2 id="mysql中是如何实现事务隔离的" tabindex="-1"><a class="header-anchor" href="#mysql中是如何实现事务隔离的"><span>MySQL中是如何实现事务隔离的</span></a></h2><p><strong>读未提交和串行化基本上是不需要考虑的隔离级别</strong>，前者不加锁限制，后者相当于单线程执行，效率太差。</p><p><strong>MySQL 在可重复读级别解决了幻读问题，是通过行锁和间隙锁的组合 Next-Key 锁实现的。</strong></p><p>详细原理看这篇文章：https://haicoder.net/note/MySQL-interview/MySQL-interview-MySQL-trans-level.html</p><h2 id="innodb存储引擎默认的是什么-为什么" tabindex="-1"><a class="header-anchor" href="#innodb存储引擎默认的是什么-为什么"><span>InnoDB存储引擎默认的是什么?为什么?</span></a></h2><p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ(可重读)</p><p>至于<strong>InnoDB为什么选用可重复读,我的个人理解是:在InnoDB存储引擎中,使用可重复读可以解决脏读、不可重复读,而幻读也有可能发生,但是是可以避免的,通过加Next-Key Lock锁可以解决幻读问题。并且并非隔离级别越高越好,隔离级别越高的话,并发性能越低,所以在实际的开发中,需要根据业务场景进行选择事务的隔离级别。</strong></p><h2 id="acid特性" tabindex="-1"><a class="header-anchor" href="#acid特性"><span>ACID特性</span></a></h2><ul><li>原子性：语句要么全执行，要么全不执行，是事务最核心的特性，事务本身就是以原子性来定义的；<strong>原子性是通过 undo log（回滚日志） 来保证的；</strong></li><li>持久性：保证事务提交后不会因为宕机等原因导致数据丢失；<strong>持久性是通过 redo log （重做日志）来保证的；</strong></li><li>隔离性：保证事务执行尽可能不受其他事务影响；InnoDB默认的隔离级别是RR，RR的实现主要基于锁机制（包含next-key lock）、MVCC（包括数据的隐藏列、基于undo log的版本链、ReadView）；<strong>隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；</strong></li><li>一致性：事务追求的最终目标，一致性的实现既需要数据库层面的保障，也需要应用层面的保障；<strong>一致性则是通过持久性+原子性+隔离性来保证；</strong></li></ul><h2 id="mysql逻辑架构和存储引擎" tabindex="-1"><a class="header-anchor" href="#mysql逻辑架构和存储引擎"><span>MySQL逻辑架构和存储引擎</span></a></h2><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如上图所示，MySQL服务器逻辑架构从上往下可以分为三层：</p><p>（1）第一层：处理客户端连接、授权认证等。</p><p>（2）第二层：服务器层，负责查询语句的解析、优化、缓存以及内置函数的实现、存储过程等。</p><p>（3）第三层：存储引擎，负责MySQL中数据的存储和提取。**MySQL中服务器层不管理事务，事务是由存储引擎实现的。**MySQL支持事务的存储引擎有InnoDB、NDB Cluster等，其中InnoDB的使用最为广泛；其他存储引擎不支持事务，如MyIsam、Memory等。</p><p>如无特殊说明，后文中描述的内容都是基于InnoDB。</p><h2 id="原子性" tabindex="-1"><a class="header-anchor" href="#原子性"><span>原子性</span></a></h2><p><strong>1. 定义</strong></p><p><strong>原子性是指一个事务是一个不可分割的工作单位，其中的操作要么都做，要么都不做；如果事务中一个sql语句执行失败，则已执行的语句也必须回滚，数据库退回到事务前的状态。</strong></p><p><strong>2. 实现原理：undo log</strong></p><p><strong>实现原子性的关键，是当事务回滚时能够撤销所有已经成功执行的sql语句</strong>。InnoDB实现回滚，靠的是undo log：当事务对数据库进行修改时，InnoDB会生成对应的undo log；如果事务执行失败或调用了rollback，导致事务需要回滚，便可以利用undo log中的信息将数据回滚到修改之前的样子。</p><p><strong>undo log属于逻辑日志，它记录的是sql执行相关的信息</strong>。当发生回滚时，InnoDB会根据undo log的内容做与之前相反的工作：对于每个insert，回滚时会执行delete；对于每个delete，回滚时会执行insert；对于每个update，回滚时会执行一个相反的update，把数据改回去。</p><p>以update操作为例：当事务执行update时，其生成的undo log中会包含被修改行的主键(以便知道修改了哪些行)、修改了哪些列、这些列在修改前后的值等信息，回滚时便可以使用这些信息将数据还原到update之前的状态。</p><h2 id="持久性" tabindex="-1"><a class="header-anchor" href="#持久性"><span>持久性</span></a></h2><p><strong>1. 定义</strong></p><p><strong>持久性是指事务一旦提交，它对数据库的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</strong></p><p><strong>2. 实现原理：redo log</strong></p><p>redo log和undo log都属于InnoDB的事务日志。下面先聊一下redo log存在的背景。</p><p>InnoDB作为MySQL的存储引擎，数据是存放在磁盘中的，但如果每次读写数据都需要磁盘IO，效率会很低。为此，InnoDB提供了缓存(Buffer Pool)，Buffer Pool中包含了磁盘中部分数据页的映射，作为访问数据库的缓冲：当从数据库读取数据时，会首先从Buffer Pool中读取，如果Buffer Pool中没有，则从磁盘读取后放入Buffer Pool；当向数据库写入数据时，会首先写入Buffer Pool，Buffer Pool中修改的数据会定期刷新到磁盘中（这一过程称为刷脏）。</p><p>Buffer Pool的使用大大提高了读写数据的效率，但是也带了新的问题：如果MySQL宕机，而此时Buffer Pool中修改的数据还没有刷新到磁盘，就会导致数据的丢失，事务的持久性无法保证。</p><p>于是，redo log被引入来解决这个问题：<strong>当数据修改时，除了修改Buffer Pool中的数据，还会在redo log记录这次操作</strong>；当事务提交时，会调用fsync接口对redo log进行刷盘。如果MySQL宕机，重启时可以读取redo log中的数据，对数据库进行恢复。redo log采用的是WAL（Write-ahead logging，预写式日志），所有修改先写入日志，再更新到Buffer Pool，保证了数据不会因MySQL宕机而丢失，从而满足了持久性要求。</p><p>既然redo log也需要在事务提交时将日志写入磁盘，为什么它比直接将Buffer Pool中修改的数据写入磁盘(即刷脏)要快呢？主要有以下两方面的原因：</p><p>（1）刷脏是随机IO，因为每次修改的数据位置随机，但<strong>写redo log是追加操作，属于顺序IO</strong>。</p><p>（2）刷脏是以数据页（Page）为单位的，MySQL默认页大小是16KB，一个Page上一个小修改都要整页写入；而redo log中只包含真正需要写入的部分，<strong>无效IO大大减少。</strong></p><h2 id="redo-log与binlog的区别" tabindex="-1"><a class="header-anchor" href="#redo-log与binlog的区别"><span>redo log与binlog的区别</span></a></h2><p>我们知道，在MySQL中还存在binlog(二进制日志)也可以记录写操作并用于数据的恢复，但二者是有着根本的不同的：</p><p>（1）<strong>作用不同</strong>：redo log是用于故障恢复的，保证MySQL宕机也不会影响持久性；binlog是用于point-in-time recovery的，保证服务器可以基于时间点恢复数据，此外binlog还用于主从复制。</p><p>（2）<strong>层次不同</strong>：redo log是InnoDB存储引擎实现的，而binlog是MySQL的服务器层(可以参考文章前面对MySQL逻辑架构的介绍)实现的，同时支持InnoDB和其他存储引擎。</p><p>（3）<strong>内容不同</strong>：redo log是物理日志，内容基于磁盘的Page；binlog的内容是二进制的，根据binlog_format参数的不同，可能基于sql语句、基于数据本身或者二者的混合。</p><p>（4）<strong>写入时机不同</strong>：binlog在事务提交时写入；redo log的写入时机相对多元：</p><p>前面曾提到：当事务提交时会调用fsync对redo log进行刷盘；这是默认情况下的策略，修改innodb_flush_log_at_trx_commit参数可以改变该策略，但事务的持久性将无法保证。</p><p>除了事务提交时，还有其他刷盘时机：如master thread每秒刷盘一次redo log等，这样的好处是不一定要等到commit时刷盘，commit速度大大加快。</p><h2 id="隔离性" tabindex="-1"><a class="header-anchor" href="#隔离性"><span>隔离性</span></a></h2><p><strong>1. 定义</strong></p><p>与原子性、持久性侧重于研究事务本身不同，隔离性研究的是不同事务之间的相互影响。<strong>隔离性是指，事务内部的操作与其他事务是隔离的，并发执行的各个事务之间不能互相干扰</strong>。严格的隔离性，对应了事务隔离级别中的Serializable (可串行化)，但实际应用中出于性能方面的考虑很少会使用可串行化。</p><p>隔离性追求的是并发情形下事务之间互不干扰。简单起见，我们主要考虑最简单的读操作和写操作(加锁读等特殊读操作会特殊说明)，那么隔离性的探讨，主要可以分为两个方面：</p><ul><li>(一个事务)<strong>写</strong>操作对(另一个事务)<strong>写</strong>操作的影响：<strong>锁机制保证隔离性</strong></li><li>(一个事务)<strong>写</strong>操作对(另一个事务)<strong>读</strong>操作的影响：<strong>MVCC保证隔离性</strong></li></ul><h2 id="锁机制" tabindex="-1"><a class="header-anchor" href="#锁机制"><span>锁机制</span></a></h2><p>首先来看两个事务的写操作之间的相互影响。隔离性要求同一时刻只能有一个事务对数据进行写操作，InnoDB通过锁机制来保证这一点。</p><p>锁机制的基本原理可以概括为：事务在修改数据之前，需要先获得相应的锁；获得锁之后，事务便可以修改数据；该事务操作期间，这部分数据是锁定的，其他事务如果需要修改数据，需要等待当前事务提交或回滚后释放锁。</p><h2 id="行锁与表锁" tabindex="-1"><a class="header-anchor" href="#行锁与表锁"><span>行锁与表锁</span></a></h2><p><strong>按照粒度，锁可以分为表锁、行锁以及其他位于二者之间的锁</strong>。表锁在操作数据时会锁定整张表，并发性能较差；行锁则只锁定需要操作的数据，并发性能好。但是由于加锁本身需要消耗资源(获得锁、检查锁、释放锁等都需要消耗资源)，因此在锁定数据较多情况下使用表锁可以节省大量资源。MySQL中不同的存储引擎支持的锁是不一样的，例如MyIsam只支持表锁，而InnoDB同时支持表锁和行锁，且出于性能考虑，绝大多数情况下使用的都是行锁。</p><h2 id="如何查看锁信息" tabindex="-1"><a class="header-anchor" href="#如何查看锁信息"><span>如何查看锁信息</span></a></h2><p>有多种方法可以查看InnoDB中锁的情况，例如：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> information_schema</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">innodb_locks</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">; #锁的概况</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">show engine innodb </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">status</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">; #InnoDB整体状态，其中包括锁的情况</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面来看一个例子：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#在事务A中执行：</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">start transaction</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">update</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> account </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> balance </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> where</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">#在事务B中执行：</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">start transaction</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">update</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> account </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> balance </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2000</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> where</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时查看锁的情况：</p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>show engine innodb status</code>查看锁相关的部分：</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过上述命令可以查看事务24052和24053占用锁的情况；其中lock_type为RECORD，代表锁为行锁(记录锁)；lock_mode为X，代表排它锁(写锁)。</p><p>除了排它锁(写锁)之外，MySQL中还有共享锁(读锁)的概念。由于本文重点是MySQL事务的实现原理，因此对锁的介绍到此为止，后续会专门写文章分析MySQL中不同锁的区别、使用场景等，欢迎关注。</p><p>介绍完写操作之间的相互影响，下面讨论写操作对读操作的影响。</p><h2 id="什么是脏读-幻读-不可重复读" tabindex="-1"><a class="header-anchor" href="#什么是脏读-幻读-不可重复读"><span>什么是脏读？幻读？不可重复读？</span></a></h2><ul><li>脏读：读到其他事务未提交的数据；</li><li>不可重复读：前后读取的数据不一致；</li><li>幻读：前后读取的记录数量不一致。</li></ul><p>1、脏读：事务 A 读取了事务 B 更新的数据，然后 B 回滚操作，那么 A 读取到的数据是脏数据</p><p>2、不可重复读：事务 A 多次读取同一数据，事务 B 在事务 A 多次读取的过程中，对数据作了更新并提交，导致事务 A 多次读取同一数据时，结果 不一致。</p><p>3、幻读：系统管理员 A 将数据库中所有学生的成绩从具体分数改为 ABCDE 等级，但是系统管理员 B 就在这个时候插入了一条具体分数的记录，当系统管理员 A 改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p><p><strong>不可重复读侧重于修改，幻读侧重于新增或删除（多了或少量行），脏读是一个事务回滚影响另外一个事务。</strong></p><h2 id="脏读、不可重复读和幻读" tabindex="-1"><a class="header-anchor" href="#脏读、不可重复读和幻读"><span>脏读、不可重复读和幻读</span></a></h2><p>首先来看并发情况下，读操作可能存在的三类问题：</p><p>（1）<strong>脏读：当前事务(A)中可以读到其他事务(B)未提交的数据（脏数据）</strong>，这种现象是脏读。举例如下（以账户余额表为例）：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（2）<strong>不可重复读：在事务A中先后两次读取同一个数据，两次读取的结果不一样，这种现象称为不可重复读</strong>。脏读与不可重复读的区别在于：<strong>前者读到的是其他事务未提交的数据，后者读到的是其他事务已提交的数据</strong>。举例如下：</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（3）<strong>幻读：在事务A中按照某个条件先后两次查询数据库，两次查询结果的条数不同，这种现象称为幻读</strong>。不可重复读与幻读的区别可以通俗的理解为：<strong>前者是数据变了，后者是数据的行数变了</strong>。举例如下：</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h2>',104)]))}const y=n(d,[["render",c]]),f=JSON.parse('{"path":"/bigcompany/luq5cane/","title":"Mysql事务","lang":"zh-CN","frontmatter":{"title":"Mysql事务","createTime":"2025/08/22 16:22:49","permalink":"/bigcompany/luq5cane/"},"readingTime":{"minutes":17.32,"words":5195},"git":{"createdTime":1756736713000},"filePathRelative":"notes/bigcompany/mianshiti/mysql事务.md","headers":[]}');export{y as comp,f as data};
